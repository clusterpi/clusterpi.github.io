<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster PI â€“ Kubernetes</title>
    <link>/docs/cluster/kubernetes/</link>
    <description>Recent content in Kubernetes on Cluster PI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/cluster/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Links:Kubernetes Cluster in Raspberry Pi</title>
      <link>/docs/cluster/kubernetes/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/cluster/kubernetes/links/</guid>
      <description>
        
        
        &lt;p&gt;All tutorials ahve the same issue: &amp;ldquo;I show you how to do it on one worked, now repeat it on all others&amp;rdquo; What we want is a single command that given n ip addresses it will install the head node on one ip address and the workers on all others&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.com/article/20/6/kubernetes-raspberry-pi&#34;&gt;https://opensource.com/article/20/6/kubernetes-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s&#34;&gt;https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ubuntu.com/tutorials/how-to-kubernetes-cluster-on-raspberry-pi#1-overview&#34;&gt;https://ubuntu.com/tutorials/how-to-kubernetes-cluster-on-raspberry-pi#1-overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/nycdev/k8s-on-pi-9cc14843d43&#34;&gt;https://medium.com/nycdev/k8s-on-pi-9cc14843d43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jeffgeerling.com/blog/2019/everything-i-know-about-kubernetes-i-learned-cluster-raspberry-pis&#34;&gt;https://www.jeffgeerling.com/blog/2019/everything-i-know-about-kubernetes-i-learned-cluster-raspberry-pis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/blog/2015/12/creating-raspberry-pi-cluster-running/&#34;&gt;https://kubernetes.io/blog/2015/12/creating-raspberry-pi-cluster-running/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/building-a-kubernetes-cluster-on-raspberry-pi-and-low-end-equipment-part-1-a768359fbba3&#34;&gt;https://itnext.io/building-a-kubernetes-cluster-on-raspberry-pi-and-low-end-equipment-part-1-a768359fbba3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codesqueak/k18srpi4&#34;&gt;https://github.com/codesqueak/k18srpi4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/blog/five-years-of-raspberry-pi-clusters/&#34;&gt;https://www.raspberrypi.org/blog/five-years-of-raspberry-pi-clusters/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nocture.dk/2020/07/02/running-a-kubernetes-cluster-with-dashboard-on-raspberry-pi-4/&#34;&gt;https://www.nocture.dk/2020/07/02/running-a-kubernetes-cluster-with-dashboard-on-raspberry-pi-4/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dinofizzotti.com/blog/2020-05-09-raspberry-pi-cluster-part-2-todo-api-running-on-kubernetes-with-k3s/&#34;&gt;https://www.dinofizzotti.com/blog/2020-05-09-raspberry-pi-cluster-part-2-todo-api-running-on-kubernetes-with-k3s/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Videos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DjpVtNjiXSU&#34;&gt;https://www.youtube.com/watch?v=DjpVtNjiXSU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XvlkYL1dGbw&#34;&gt;https://www.youtube.com/watch?v=XvlkYL1dGbw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qsy1Gwa-J5o&#34;&gt;https://www.youtube.com/watch?v=qsy1Gwa-J5o&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 417: Kubernetes Cluster in Raspberry Pi</title>
      <link>/docs/cluster/kubernetes/417/bin/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/cluster/kubernetes/417/bin/readme/</guid>
      <description>
        
        
        &lt;p&gt;NOTE: THIS PROJECT IS INCOMPLETE AND OUTDATED&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a project from Spring 2018, so its likely outdated&lt;/li&gt;
&lt;li&gt;all the shs scripts were not properly added and gregor had to add
them in this md.&lt;/li&gt;
&lt;li&gt;code should be in code repository, but not documentation repo&lt;/li&gt;
&lt;li&gt;There is to much unneded code here&lt;/li&gt;
&lt;li&gt;codes should use cloudmesh shell not shell scripts&lt;/li&gt;
&lt;li&gt;code shows lots of things that need to be done by hand which is not
needed if it were to be properly automated&lt;/li&gt;
&lt;li&gt;a single line of cold should be able to configure &amp;ldquo;ALL&amp;rdquo; workers and
also the head node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The original is at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/hid-sp18-417/tree/master/deprecated/tutorial/automate&#34;&gt;https://github.com/cloudmesh-community/hid-sp18-417/tree/master/deprecated/tutorial/automate&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/hid-sp18-417/blob/master/deprecated/tutorial/pi-kubernetes.md&#34;&gt;https://github.com/cloudmesh-community/hid-sp18-417/blob/master/deprecated/tutorial/pi-kubernetes.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The student may have switched to doing kubernetes on google, Bu that
seems to be just a manaul and deos not include a project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/hid-sp18-417/tree/master/project-code/gcloud&#34;&gt;https://github.com/cloudmesh-community/hid-sp18-417/tree/master/project-code/gcloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This section of the tutorial is targeting to automate the Kubernetes cluster setup in
Raspberry pi.&lt;/p&gt;
&lt;h2 id=&#34;opt_setupsh&#34;&gt;opt_setup.sh&lt;/h2&gt;
&lt;p&gt;This is an optional setup if its required to download the cloudmesh code from 417 repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#080&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;hostname&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$2&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# should be of format: 192.168.1.100&lt;/span&gt;
sudo apt-get update
sudo apt-get install git
mkdir /~/cloudmesh
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; installing git
git clone https://github.com/cloudmesh-community/hid-sp18-417.git
&lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; *417/tutorial/dhcp
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; running initial dhcp setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sh opt_setup.sh&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dhcp_setupsh&#34;&gt;dhcp_setup.sh&lt;/h2&gt;
&lt;p&gt;This Script will help setting up the dhcp static ip.&lt;/p&gt;
&lt;p&gt;Please note that the shell script will execute the recommended reboot after the static IP assignment.&lt;/p&gt;
&lt;p&gt;It needs four params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hostname&lt;/li&gt;
&lt;li&gt;desired static ip&lt;/li&gt;
&lt;li&gt;router ip&lt;/li&gt;
&lt;li&gt;dns server ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sh dhcp_setup.sh &amp;lt;hostname&amp;gt; &amp;lt;nodeIP&amp;gt; &amp;lt;routerIP&amp;gt; &amp;lt;dnsIP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#080&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;hostname&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$2&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# should be of format: 192.168.1.100&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$3&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# should be of format: 192.168.1.1&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;dns&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$4&lt;/span&gt; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# should be of format: 192.168.1.1&lt;/span&gt;

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Change the hostname&lt;/span&gt;
touch hostname
sudo cat &lt;span style=&#34;color:#b44&#34;&gt;&amp;lt;&amp;lt;end&amp;gt;&amp;gt; hostname
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;$hostname
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;end&lt;/span&gt;
sudo cp hostname /etc/hostname

head -n -1 /etc/hosts &amp;gt; temp ; sudo mv temp /etc/hosts
sudo cat &lt;span style=&#34;color:#b44&#34;&gt;&amp;lt;&amp;lt;end11&amp;gt;&amp;gt; /etc/hosts
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;127.0.0.1     $hostname
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;end11&lt;/span&gt;

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Set the static ip&lt;/span&gt;

sudo cat &lt;span style=&#34;color:#b44&#34;&gt;&amp;lt;&amp;lt;EOT &amp;gt;&amp;gt; /etc/dhcpcd.conf
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;interface eth0
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static ip_address=$ip/24
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static routers=$router
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static domain_name_servers=$dns
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;interface wlan0
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static ip_address=$ip/24
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static routers=$router
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;static domain_name_servers=$dns
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;EOT&lt;/span&gt;
reboot


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker_setupsh&#34;&gt;docker_setup.sh&lt;/h2&gt;
&lt;p&gt;Now Install docker and turn off the swap memory.
This shell will reboot the node per recommendation of the references.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh docker_setup.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ERROR THIS SCRIPT DOES NOT EXIST IN THE 417 DIR&lt;/p&gt;
&lt;p&gt;The previous shell scripts are common in both worker and head.&lt;/p&gt;
&lt;p&gt;Maybe the student meant install_docker.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#080&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#080&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Install Docker&lt;/span&gt;
curl -sSL get.docker.com | sh &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo usermod pi -aG docker

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Disable Swap&lt;/span&gt;
sudo dphys-swapfile swapoff &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo dphys-swapfile uninstall &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo update-rc.d dphys-swapfile remove
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; Adding &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34; cgroup_enable=cpuset cgroup_enable=memory&amp;#34;&lt;/span&gt; to /boot/cmdline.txt and rebooting...
sudo cp /boot/cmdline.txt /boot/cmdline_backup.txt
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# if you encounter problems, try changing cgroup_memory=1 to cgroup_enable=memory.&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;orig&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;head -n1 /boot/cmdline.txt&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt; cgroup_enable=cpuset cgroup_memory=1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$orig&lt;/span&gt; | sudo tee /boot/cmdline.txt
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kube_head_setupsh&#34;&gt;kube_head_setup.sh&lt;/h2&gt;
&lt;p&gt;To be executed only on the master.
This will initiate kubectl master and setup networking[debugging now]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh kube_head_setup.sh&lt;/code&gt;
Please save the join token for the workers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# Add repo list and install kubeadm&lt;/span&gt;
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;deb http://apt.kubernetes.io/ kubernetes-xenial main&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/kubernetes.list &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo apt-get update -q &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo apt-get install -qy kubeadm
sudo kubeadm init --token-ttl&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; --apiserver-advertise-address&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&amp;lt;internal master ip&amp;gt;
mkdir -p &lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;/.kube/config
sudo chown &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -u&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;:&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -g&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; setting up network...installing weave
kubectl apply -f &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;https://cloud.weave.works/k8s/net?k8s-version=&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl version | base64 | tr -d &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kube_worker_setupsh&#34;&gt;kube_worker_setup.sh&lt;/h2&gt;
&lt;p&gt;To be executed in the worker nodes&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh kube_worker_setup.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;deb http://apt.kubernetes.io/ kubernetes-xenial main&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/kubernetes.list &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo apt-get update -q &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo apt-get install -qy kubeadm
&lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; now run the join token to join the cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;other-files&#34;&gt;Other files&lt;/h2&gt;
&lt;p&gt;otherfiles that are not properly documented include&lt;/p&gt;
&lt;p&gt;kubeadm_conf.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;kubeadm.k8s.io/v1alpha1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;MasterConfiguration&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;controllerManagerExtraArgs&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pod-eviction-timeout&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;10s&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also a dir called join that apparently has the join command
that is also not properly documented&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubeadm join 10.0.1.104:6443 --token w7hmjs.tgt6hqss5i30bpvc --discovery-token-ca-cert-hash sha256:24321005a87fa8803b470e141cef51688ad411bf52d98c05488aa0f46ae8194a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also there is no reason we need to bother about the token it should be
safed with our cloudmesh shell and than reused.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 526: Kubernetes Cluster in Raspberry Pi</title>
      <link>/docs/cluster/kubernetes/526/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/cluster/kubernetes/526/</guid>
      <description>
        
        
        &lt;p&gt;here is another project&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/hid-sp18-526/tree/master/cluster&#34;&gt;https://github.com/cloudmesh-community/hid-sp18-526/tree/master/cluster&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo; status is also unclear. It has been done 3 years ago&lt;/p&gt;
&lt;p&gt;This may have some good starts, but again ist a shell script.&lt;/p&gt;
&lt;p&gt;I recommend to start over and look what they now do&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes with sh</title>
      <link>/docs/cluster/kubernetes/pi-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/cluster/kubernetes/pi-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;In this section we will discuss how to set up a Kubernetes cluster on a
number of Raspberry Pis.&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; As we can see thsi just has too many nscripts. We neeed a single
comamnd with cloudmesh shell cmd5 instead. When properly documented
we can reduce the documentation considerably.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; We need to make sure to use one repo. I prefer one in cloudmesh
instead of cloudmesh-community&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; all the simple setup with sd cards, ssh, keys, and so on should
be moved to the NOW cluster section. This way we can require simply
a NOW and start without duplication on the real Kubernetes install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; cloudmesh burn should be used to create a NOW&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; we have two sections of Kubernetes contributed by two
students. What we need is to merge them and save the usable
things. We need to identify if the setup is significantly different
before we can do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; so before you can work on the Kubernetes section you need to
make sure the NOW section is up to date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources-needed&#34;&gt;Resources Needed&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt; section we explained how to set up a
network of Pis. Here we assume that we start from such a network. We
recommend that the cluster will have at least one master and three
worker nodes. The test should not use too many resources otherwise the
system may be unnecessarily slow. In particular we should have one
dedicated master. We use three nodes to support testing the
distribution of containers. (It may work with two, but we have not
tested it). Please give us feedback on this and let us know what works
for you.  We will integrate your feedback.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-kubernetes-cluster-setup&#34;&gt;Overview of Kubernetes Cluster Setup&lt;/h2&gt;
&lt;p&gt;A Kubernetes cluster is made of one master and several worker
nodes. Each node must have the standard Kubernetes setup completed and
the master must also have additional setup. Once the master and worker
nodes are setup then the worker nodes can join the network created by
the master node. For the Raspberry Pi we support two modes of setting
up the master and workers. The first method is to use the scripts that
we provide to do the required installations. The second method is to
perform each step by hand. We will begin by explaining how to use the
scripts to setup your cluster quickly.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-cluster-setup-with-scripts&#34;&gt;Kubernetes Cluster Setup with Scripts&lt;/h2&gt;
&lt;p&gt;These steps have been verified with the latest build of Raspbian
Stretch which is
&lt;a href=&#34;https://downloads.raspberrypi.org/raspbian_lite_latest&#34;&gt;2018-11-13-raspbian-stretch-lite&lt;/a&gt;.
If you have installed Raspbian Stretch with Desktop or Raspbian
Stretch with Desktop and Recommended Software then some of these steps
will not be required, but repeating them will not be a problem.&lt;/p&gt;
&lt;p&gt;The required scripts are stored in the &lt;a href=&#34;https://github.com/cloudmesh-community/pi&#34;&gt;Cloudmesh Community
Pi&lt;/a&gt; repository and must be
copied to each Raspberry Pi in order to run. This guide assumes that
each Pi has internet access which is required to download the
necessary tools.  The first steps to setup the Pi tools is listed on
the
&lt;a href=&#34;https://github.com/cloudmesh-community/pi/blob/master/README.md&#34;&gt;README.md&lt;/a&gt;
for the Pi tools repository. We will repeat those steps here for
convenience.&lt;/p&gt;
&lt;h3 id=&#34;pi-cluster-tools-setup&#34;&gt;Pi Tools Prerequisites&lt;/h3&gt;
&lt;p&gt;To use the Cloudmesh Pi tools you need &lt;code&gt;git&lt;/code&gt; to download the tools
from the github repository. You must also update the Pi&amp;rsquo;s list of
software, install &lt;code&gt;git&lt;/code&gt;, and then download or clone the &lt;code&gt;git&lt;/code&gt;
repository. Run these steps at the Pi command prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get update; sudo apt-get install -y git
$ git clone https://github.com/cloudmesh-community/pi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When that successfully completes you will have a copy of the Pi tools
on your Pi and you can now run them.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-shared-setup&#34;&gt;Kubernetes Shared Setup&lt;/h3&gt;
&lt;p&gt;Every Kubernetes node, whether master or worker, needs to complete the
following setup steps. The Pi scripts are stored in the &lt;code&gt;bin&lt;/code&gt;
directory. Every Kubernetes Pi master and worker must run the
&lt;code&gt;kubernetes-setup.sh&lt;/code&gt; script which will download and install Docker
and Kubernetes and make the necessary system changes to support
both. When this script completes the Pi must be rebooted to properly
configure its memory system for Kubernetes. Execute the following
commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo pi/bin/kubernetes-setup.sh
$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are connected to the Pi over &lt;code&gt;ssh&lt;/code&gt; your session may hang at
this point.  You can either wait for &lt;code&gt;ssh&lt;/code&gt; to timeout or kill the
session by typing a tilde then a period. The tilde on a new line is a
special command to &lt;code&gt;ssh&lt;/code&gt; and the period means to disconnect the
session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point the worker is ready to connect to the Kubernetes master
node.  The command to connect to the master node is &lt;code&gt;kubeadm join&lt;/code&gt; but
we need to finish setting up the master node in order to get the token
necessary to authenticate with it.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-master-setup&#34;&gt;Kubernetes Master Setup&lt;/h3&gt;
&lt;p&gt;To setup the Kubernetes master node you should first complete the
&lt;a href=&#34;#kubernetes-shared-setup&#34;&gt;Kubernetes Shared Setup&lt;/a&gt;. After the Pi
reboots you can run the master setup script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo pi/bin/kubernetes-master-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The master setup script will run &lt;code&gt;kubeadm init&lt;/code&gt; which can take a long
time and will occasionally timeout on the Raspberry Pi without
completing. This does not indicate a failure of the Pi setup. If the
command finishes with the error&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unfortunately, an error has occurred:
        timed out waiting for the condition
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then it is possible to restart the setup and it will usually complete
successfully the second time. To do this (only if the master setup
failed) run &lt;code&gt;kubeadm reset&lt;/code&gt; and be sure to answer &lt;code&gt;y&lt;/code&gt; to the
prompts. Then run the master setup script again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm reset
$ sudo pi/bin/kubernetes-master-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the master setup successfully completes you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes master has initialized successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and there will be further instructions on how to setup the
master. These steps have already been performed by the setup scripts
so you do not need to do them.  The output will also list the required
&lt;code&gt;kubeadm join&lt;/code&gt; command that can be issued on each worker node that
wishes to join this Kubernetes master node. In addition, the scripts
have stored the join command, the master IP address, the join token,
and the CA Hash in a YAML file &lt;code&gt;kubeadm-settings.yml&lt;/code&gt; in the current
directory. If you need to add nodes in the future, you may refer to
this file for the required parameters.&lt;/p&gt;
&lt;h2 id=&#34;pi-kubernetes-join-workers&#34;&gt;Join Workers to Master&lt;/h2&gt;
&lt;p&gt;Now login to each of the workers and issue the &lt;code&gt;kubeadm join&lt;/code&gt; command
from the master node. If you have not successfully completed the
master node setup, please see &lt;a href=&#34;#kubernetes-master-setup&#34;&gt;Kubernetes Master
Setup&lt;/a&gt; for the required steps.&lt;/p&gt;
&lt;p&gt;As of this writing there is a version incompatibility between the
latest Kubernetes and the latest Docker. Kubernetes has not yet
verified Docker version 18.09 which is installed by the default Docker
install script. If you use our provided setup script then the version
of Docker will be automatically downgraded to 18.06.1 which is
verified by Kubernetes. You can follow the steps to downgrade your
Docker version given in &lt;a href=&#34;#pi-install-docker&#34;&gt;Install Docker&lt;/a&gt; or you
can skip the version check by specifying
&lt;code&gt;--ignore-preflight-errors=SystemVerification&lt;/code&gt; on the command line. An
example &lt;code&gt;kubeadm join&lt;/code&gt; command would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm join 10.0.0.101:6443 &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --token vstt3y.faa67q2dp383xhgv &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    --discovery-token-ca-cert-hash &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;    sha256:7fa06185f14b89234235aa9f03ef60835ade825e2553cd97a52b5894566edeb5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the worker nodes have joined the cluster, you can login to the
master node and see their status with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
blue00   Ready    master   4h56m   v1.12.2
blue01   Ready    &amp;lt;none&amp;gt;   4h44m   v1.12.2
blue02   Ready    &amp;lt;none&amp;gt;   4h46m   v1.12.2
blue03   Ready    &amp;lt;none&amp;gt;   4h42m   v1.12.2
blue04   Ready    &amp;lt;none&amp;gt;   4h1m    v1.12.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the workers are joining the cluster they will initially be in a
&lt;code&gt;NotReady&lt;/code&gt; state for a while as they complete their setup. This is the
normal expected behavior and each node should reach the &lt;code&gt;Ready&lt;/code&gt; state
within a few minutes. To continue experimenting with your Kubernetes
cluster, please see the &lt;a href=&#34;#kubernetes-first-steps&#34;&gt;Kubernetes First
Steps&lt;/a&gt; section.&lt;/p&gt;
&lt;h2 id=&#34;manual-kubernetes-cluster-setup&#34;&gt;Manual Kubernetes Cluster Setup&lt;/h2&gt;
&lt;p&gt;If you do not want to use our setup scripts or would like to change
some steps in the installation you can use the following steps to
manually setup a Kubernetes cluster on several Pis. First, each node
in the cluster must have Docker and Kubernetes installed along with
some system configurations. Then the master should be launched and
each worker node connected to the master. Please follow these
instructions carefully and you should have a working Kubernetes
cluster.&lt;/p&gt;
&lt;h3 id=&#34;pi-install-docker&#34;&gt;Install docker&lt;/h3&gt;
&lt;p&gt;Kubernetes depends on a containerization platform to run
applications. The standard platform used with Kubernetes is Docker,
although other container platforms are also support. We will use
Docker on the Pi. Install Docker with the convenience script at
&lt;code&gt;get.docker.com&lt;/code&gt;. You may also download the script manually and see
what operations it performs. The basic steps in the script are to
detect your operation system and computer architecture, setup the
proper Docker package repositories and keys for your system, and
finally install the Docker packages and dependencies. The current
version of Docker 18.09 has not been verified by Kubernetes, so after
installation we will downgrade this package to 18.06 in the following
steps. Once the installation finishes we recommend running the
following &lt;code&gt;usermod&lt;/code&gt; command to run Docker as a non-root user. This is
an optional but recommended step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -sSL get.docker.com | sudo sh
$ sudo usermod -aG docker pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The current version of Docker 18.09 installed by the convenience
script has not been verified by Kubernetes v1.12.2 yet so it will give
an error and Kubernetes will fail to start. You can fix this by giving
the &lt;code&gt;--ignore-preflight-errors=SystemVerification&lt;/code&gt; flag to &lt;code&gt;kubeadm init&lt;/code&gt; and &lt;code&gt;kubeadm join&lt;/code&gt;. However, a better solution is to downgrade
the Docker version installed. The Docker install script will also
setup the proper &lt;code&gt;apt-get&lt;/code&gt; repositories that host previous versions of
Docker. To downgrade, first stop the &lt;code&gt;docker.service&lt;/code&gt; that is running,
then downgrade the package and restart the service. The Docker service
should restart automatically after the downgrade, so restarting the
service with &lt;code&gt;systemctl&lt;/code&gt; is just done in case of a problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo systemctl stop docker.service
$ sudo apt-get install -qy --allow-downgrades &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  docker-ce&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;18.06.1~ce~3-0~raspbian
$ sudo systemctl start docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-kubernetes&#34;&gt;Install Kubernetes&lt;/h3&gt;
&lt;p&gt;After installing Docker we must also install Kubernetes. The
Kubernetes package sources and GPG keys need to be added to the
&lt;code&gt;apt-get&lt;/code&gt; package manager first, then we must update the &lt;code&gt;apt-get&lt;/code&gt;
package list with the new sources before we can finally install the
Kubernetes services and administration package &lt;code&gt;kubeadm&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo apt-key add -
$ &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;deb http://apt.kubernetes.io/ kubernetes-xenial main&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo tee /etc/apt/sources.list.d/kubernetes.list
$ sudo apt-get update -q; sudo apt-get install -qy kubeadm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once Kubernetes and Docker are correctly installed there are some system
configuration changes necessary for Kubernetes.&lt;/p&gt;
&lt;h3 id=&#34;pi-kubernetes-system-config&#34;&gt;System configuration&lt;/h3&gt;
&lt;p&gt;Kubernetes is not compatible with SWAP memory and as of version 1.8 it
will &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading&#34;&gt;fail if swap is enabled on a
node&lt;/a&gt;,
therefore we need to disable swap memory on Raspbian. It is possible
that disabling swap on the Pi could cause other issues, especially due
to the low memory on the Raspberry Pi, but it is accepted practice for
running any Kubernetes cluster to disable swap. There is a flag
&lt;code&gt;--fail-swap-on=false&lt;/code&gt; that can be passed to &lt;code&gt;kubeadm&lt;/code&gt; to skip the
check for swap but we have not tested with this setting.  To disable
swap execute the following commands on the Pi:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dphys-swapfile swapoff &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo dphys-swapfile uninstall &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo update-rc.d dphys-swapfile remove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now not see any entries in this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo swapon --summary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next some kernel cgroup settings need to be changed for
Kubernetes. This is a boot-time option that can only be changed by
altering the options passed to the Linux kernel during boot. These
options are stored in the file &lt;code&gt;/boot/cmdline.txt&lt;/code&gt; on the Raspberry
Pi. This file only contains a single line that specifies the kernel
options. The following three options must be added to the end of the
line &lt;code&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&lt;/code&gt;.  You
may edit the file in a text editor if you are confident that you can
make the change correctly or simply run the following lines at the
command prompt.  They will first backup the current file, then then
append the new options and finally write the entire string back to the
original file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo cp /boot/cmdline.txt /boot/cmdline.bak.txt
$ &lt;span style=&#34;color:#b8860b&#34;&gt;new_options&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;head -n1 /boot/cmdline.txt&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt; \
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&amp;#34;&lt;/span&gt;
$ &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$new_options&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt; | sudo tee /boot/cmdline.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kubernetes also expects certain kernel modules to be loaded. It will
enable these kernel modules during setup but we can also specify them
to always be loaded on boot which removes the warning messages. To
enable the required kernel modules, execute the following lines which
will append these modules to the list of enabled kernel modules stored
in &lt;code&gt;/etc/modules&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat &lt;span style=&#34;color:#b44&#34;&gt;&amp;lt;&amp;lt; EOF | sudo tee -a /etc/modules
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;ip_vs
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;ip_vs_sh
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;ip_vs_rr
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;ip_vs_wrr
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;nf_conntrack_ipv4
&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since these changes only take place at boot time, you &lt;em&gt;must reboot&lt;/em&gt;
before continuing with the rest of the section. If you do not reboot
then Kubernetes will refuse to run and issue an error.&lt;/p&gt;
&lt;h3 id=&#34;setup-kubernetes-cluster&#34;&gt;Setup Kubernetes Cluster&lt;/h3&gt;
&lt;p&gt;After the Pi reboots and you reconnect to it there are a few steps to
perform on the master Kubernetes node to prepare it for the worker
nodes to connect to.  First we recommend pulling (downloading) the
Kubernetes images so that this step is separate from initializing the
cluster. You can issue the following command and note that it will
take several minutes depending on your network connection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm config images pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that is complete we can now initialize the Kubernetes master. You
need to know the IP address of the master node and you should choose a
CIDR for the pod network. Note that in this case we are setting the
join token to have a time-to-live of 0 which means it will never
expire. This is reasonable for initial setup and testing but in any
permanent system the token should be allowed to expire in a few hours
or days to prevent unauthorized nodes from joining the cluster should
the token accidentally be leaked. The following command will setup the
master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b8860b&#34;&gt;POD_CIDR&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;10.244.0.0/16
$ &lt;span style=&#34;color:#b8860b&#34;&gt;APISERVER_IP&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;10.0.0.101
$ sudo kubeadm init --token-ttl&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  --pod-network-cidr&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$POD_CIDR&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  --apiserver-advertise-address&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$APISERVER_IP&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the master setup completes successfully then you should see output similar
to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &amp;quot;kubectl apply -f [podnetwork].yaml&amp;quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 10.0.0.101:6443 --token vstt3y.faa67q2dp383xhgv --discovery-token-ca-cert-hash sha256:7fa06185f14b89234235aa9f03ef60835ade825e2553cd97a52b5894566edeb5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should follow these instructions, running these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir -p &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;/.kube&amp;#34;&lt;/span&gt;
$ sudo cp -i /etc/kubernetes/admin.conf &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;/.kube/config&amp;#34;&lt;/span&gt;
$ sudo chown &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -u&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -g&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;/.kube/config&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;kubeadm join&lt;/code&gt; command should be copied and stored for later use. If you
lose the details you can view the existing tokens with &lt;code&gt;kubeadm token list&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm token list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can find the sha256 hash of the CA Cert with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  openssl rsa -pubin -outform DER 2&amp;gt;/dev/null | sha256sum |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  cut -d&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The original token is for development use and so we set it to have an
unlimited time-to-live. This is not recommended for a production
system, however, a shorter TTL of a few hours or days should be
specified and a new token should be generated when the previous one
has expired. A new token can be created with the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm token create --print-join-command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will not retrieve the original token but will generate a new
one. These tokens should be carefully managed as they allow a node to
join the Kubernetes cluster which is a potentially unsafe operation
for untrusted nodes.&lt;/p&gt;
&lt;p&gt;The final step is setting up the networking. These instructions use
&lt;a href=&#34;https://www.weave.works/oss/net/&#34;&gt;Weave Net&lt;/a&gt; to enable the Kubernetes
network architecture. Another recommended solution to use with the
Raspberry Pi is &lt;a href=&#34;https://github.com/coreos/flannel&#34;&gt;Flannel&lt;/a&gt;. Here is
the command to setup Weave Net on the Kubernetes cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  kubectl apply -f \
 &amp;quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#39;\n&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After waiting a minute or so, you should see the following output from this
command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ sudo kubectl get pods --namespace=kube-system
NAME                             READY   STATUS    RESTARTS   AGE
coredns-576cbf47c7-hn55k         1/1     Running   0          4m51s
coredns-576cbf47c7-nvmm4         1/1     Running   0          4m51s
etcd-blue00                      1/1     Running   0          3m55s
kube-apiserver-blue00            1/1     Running   0          4m7s
kube-controller-manager-blue00   1/1     Running   0          4m5s
kube-proxy-9xwdn                 1/1     Running   0          4m51s
kube-scheduler-blue00            1/1     Running   0          4m
weave-net-xj4tc                  2/2     Running   0          73s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that the master is running and networking is enabled, you can run the
&lt;code&gt;kubeadm join&lt;/code&gt; command on each Pi in the cluster and issue the identical command
for them to join the master. Please see the section &lt;a href=&#34;#pi-kubernetes-join-workers&#34;&gt;Join Workers to
Master&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-first-steps&#34;&gt;Kubernetes First Steps&lt;/h2&gt;
&lt;p&gt;Now that you have the Kubernetes cluster running you can deploy pods
on the cluster. For production use of Kubernetes it is recommended to
use a Controller which will manage the details of deploying pods to
nodes and ensuring replication and self-healing. Please see the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#pods-and-controllers&#34;&gt;Kubernetes Pod
Overview&lt;/a&gt;
section of the Kubernetes documentation for information on creating
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;,
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34;&gt;StatefulSets&lt;/a&gt;
or
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34;&gt;DaemonSets&lt;/a&gt;
on your cluster. For our simple use case we will create a few pods by
hand.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-pods&#34;&gt;Kubernetes Pods&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/cloudmesh-community/pi&#34;&gt;Cloudmesh Community
Pi&lt;/a&gt; repository has several
pod definition files that you can use directly or customize to your
particular use case for experimenting with the Kubernetes cluster. If
you used our install scripts you should already have these on your
Kubernetes master. If you did the setup by hand you can get the
repository by installing &lt;code&gt;git&lt;/code&gt; and then cloning it onto the Pi using
the instructions in the &lt;a href=&#34;#pi-cluster-tools-setup&#34;&gt;Pi Tools
Prerequisites&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;As an initial test you can create the markdown renderer deployment on
your cluster with the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; pi/kubernetes
$ sudo kubectl create -f markdownrender.yml
service/markdownrender created
deployment.apps/markdownrender created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the markdownrender.yml file you will see that it
defines a Service and a Deployment and it maps port 8080 from the
Service to the external port 31118. The Deployment specifies that it
should have one replica of the application which runs a Docker
container from Docker Hub titled
&lt;a href=&#34;https://hub.docker.com/r/functions/markdownrender/&#34;&gt;functions/markdownrender:latest-armhf&lt;/a&gt;.
This container supplies a simple service to translate a markdown
document into an HTML document. You can test it with the following
commands to see it working:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -4 http://localhost:31118 -d &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;# test&amp;#34;&lt;/span&gt;
$ curl -4 http://localhost:31118 --data-binary @../README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 31118 port will also be accessible to any computer that can reach
the Kubernetes master (unless firewall rules dictate otherwise) so you
can also test this from your own computer if it is on the same network
as the Kubernetes master. For example you could run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -4 http://blue00:31118 -d &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;# test&amp;#34;&lt;/span&gt;
$ curl -s &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  https://raw.githubusercontent.com/cloudmesh-community/pi/master/README.md |&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  curl -4 http://blue00:31118 --data-binary @-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see the status of your pods by using &lt;code&gt;kubectl get pods&lt;/code&gt; on the master.
Adding the &lt;code&gt;-o wide&lt;/code&gt; parameter will also output the node and node ip of the node
that the pod is deployed to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl get pods -o wide
NAME                              READY   STATUS    RESTARTS   AGE   IP
NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-67bsg   1/1     Running   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;          20m   10.44.0.1
blue01   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo kubectl get pods -o &lt;span style=&#34;color:#b8860b&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;{.items[*].spec.nodeName}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;removing-a-node-from-a-cluster&#34;&gt;Removing a node from a cluster&lt;/h3&gt;
&lt;p&gt;To remove a Kubernetes node from a cluster, you must first drain the
node which will evict every pod in the node and cordon it off so that
no new pods will be scheduled in it. For cluster setup each node will
be running the Weave daemon so it is necessary to specify
&lt;code&gt;--ignore-daemonsets&lt;/code&gt; to drain the node. The drain command should
complete without errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl drain --ignore-daemonsets &amp;lt;node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there are pods scheduled to the node then you should wait until those pods
complete and are shutdown and removed from the node. You can observe the node
state using &lt;code&gt;kubectl get nodes&lt;/code&gt; and &lt;code&gt;kubectl get pods&lt;/code&gt;. You could see a sequence
of events such as this when draining a node that has a deployed pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl drain blue01 --ignore-daemonsets
node/blue01 cordoned
WARNING: Ignoring DaemonSet-managed pods: kube-proxy-2zplz, weave-net-r7b85
pod/markdownrender-7d8d6f74d6-67bsg evicted
$ sudo kubectl get pods -o wide
NAME                              READY   STATUS              RESTARTS   AGE   IP       NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-lqk58   0/1     ContainerCreating   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;          14s   &amp;lt;none&amp;gt;   blue03   &amp;lt;none&amp;gt;
$ sudo kubectl get pods -o wide
NAME                              READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-lqk58   1/1     Running   &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;          24s   10.39.0.1   blue03   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the node has no pods scheduled to it you can remove it from the
cluster permanently by issuing the &lt;code&gt;delete&lt;/code&gt; command on the master. The
node should be in the &lt;code&gt;Ready,SchedulingDisabled&lt;/code&gt; status. For example,
in this output the node &lt;code&gt;blue04&lt;/code&gt; has been drained and is ready to be
deleted from the cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo kubectl get nodes
NAME     STATUS                     ROLES    AGE     VERSION
blue00   Ready                      master   40h     v1.12.2
blue01   Ready                      &amp;lt;none&amp;gt;   40h     v1.12.2
blue02   Ready                      &amp;lt;none&amp;gt;   40h     v1.12.2
blue03   NotReady                   &amp;lt;none&amp;gt;   40h     v1.12.2
blue04   Ready,SchedulingDisabled   &amp;lt;none&amp;gt;   4m10s   v1.12.2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl delete node &amp;lt;node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is complete you can login to the node itself and reset it so
that it can join another cluster or be used for other purposes. The
&lt;code&gt;kubeadm reset&lt;/code&gt; command will accomplish this. At this point Kubernetes
should be shut down on the Pi and you should not see any entries in
the &lt;code&gt;systemctl&lt;/code&gt; table for &lt;code&gt;kubernetes&lt;/code&gt; or &lt;code&gt;kubelet&lt;/code&gt; and you should not
see any running Docker images that are related to Kubernetes. This can
be confirmed with the following commands run &lt;em&gt;on the node&lt;/em&gt; not on the
master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm reset
$ sudo systemctl list-units | grep -E &lt;span style=&#34;color:#b44&#34;&gt;&amp;#39;kubernetes|kubelet&amp;#39;&lt;/span&gt;
$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that Kubernetes required swap to be disabled and it may need
to be re-enabled if you are planning to use the Raspberry Pi for other
uses. There is some debate about whether swap on a Pi is actually a
good idea in general, however, since the SD Card is rather slow and
doesn&amp;rsquo;t handle repeated reads and writes well. If you have a USB hard
drive this could be a good solution to increasing swap. The memory and
cpuset cgroups were also enabled for Kubernetes by modifying the
&lt;code&gt;/boot/cmdline.txt&lt;/code&gt; kernel options file. Leaving these enabled will
not cause problems for other uses but they can be easily turned off by
removing the lines that were added in the &lt;a href=&#34;#pi-kubernetes-system-config&#34;&gt;System
configuration&lt;/a&gt; section.  Here are the
required commands to re-enable swap.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dphys-swapfile install &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo dphys-swapfile swapon &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;&lt;/span&gt;  sudo update-rc.d dphys-swapfile defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Swap will be enabled immediately and the changes will persist after reboot.&lt;/p&gt;
&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/adm_kub_config.yaml&#34;&gt;kubernetes/526/bin/adm_kub_config.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/config_kub.sh&#34;&gt;kubernetes/526/bin/config_kub.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/copy_dk_kub_install_script_to_nodes.sh&#34;&gt;kubernetes/526/bin/copy_dk_kub_install_script_to_nodes.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/docker_kubernites_install.sh&#34;&gt;kubernetes/526/bin/docker_kubernites_install.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/install_docker.sh&#34;&gt;docker_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/dhcp_setup.sh&#34;&gt;dhcp_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;417/bin/join&#34;&gt;join&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kube_head_setup.sh&#34;&gt;kube_head_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kube_worker_setup.sh&#34;&gt;kube_worker_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kubeadm_conf.yaml&#34;&gt;kubeadm_conf.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/opt_setup.sh&#34;&gt;opt_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975&#34;&gt;https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/solutions/real-time/kubernetes-redis-bigquery&#34;&gt;https://cloud.google.com/solutions/real-time/kubernetes-redis-bigquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubecloud.io/setup-a-kubernetes-1-9-0-raspberry-pi-cluster-on-raspbian-using-kubeadm-f8b3b85bc2d1&#34;&gt;https://kubecloud.io/setup-a-kubernetes-1-9-0-raspberry-pi-cluster-on-raspbian-using-kubeadm-f8b3b85bc2d1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hanselman.com/blog/HowToBuildAKubernetesClusterWithARMRaspberryPiThenRunNETCoreOnOpenFaas.aspx&#34;&gt;https://www.hanselman.com/blog/HowToBuildAKubernetesClusterWithARMRaspberryPiThenRunNETCoreOnOpenFaas.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marcussmallman.io/2018/02/18/diy-rasberry-pi-kubernetes-cluster/&#34;&gt;https://marcussmallman.io/2018/02/18/diy-rasberry-pi-kubernetes-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/&#34;&gt;https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sicara.com/build-own-cloud-kubernetes-raspberry-pi-9e5a98741b49&#34;&gt;https://blog.sicara.com/build-own-cloud-kubernetes-raspberry-pi-9e5a98741b49&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
