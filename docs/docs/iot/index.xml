<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster PI â€“ IoT</title>
    <link>/docs/iot/</link>
    <description>Recent content in IoT on Cluster PI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/iot/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Adruino</title>
      <link>/docs/iot/adruino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/adruino/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: ESP8266</title>
      <link>/docs/iot/esp8266/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/esp8266/</guid>
      <description>
        
        
        &lt;p&gt;When working with a external hardware such as the NodeMCU you will find
a lot of information on the internet about it. It is a bit difficult at
times to assess what you need to program it. You are exposed to many
choices. A NodeMCU typically comes with Lua. However you have many other
choices. Such choices include multiple programming languages such as
Lua, MicroPython, Arduino/C, Go and others.&lt;/p&gt;
&lt;p&gt;As all of them are slightly different you need to identify which works
best for you. In addition you need to install images, programs and
libraries that support your specific language choice.&lt;/p&gt;
&lt;p&gt;For our first experiments we will be using MicroPython. This choice is
motivated by the fact that Python is a well established and easy to
learn programming language. Recently many educational institutions are
offering Python as an introductory programming language making this
choice even mor compelling&lt;/p&gt;
&lt;p&gt;To simplify the setup and use of the esp8266 for MicroPython we
developed an easy to use commandline tool that allows users to set up
their computer and interact more easily with the board. We believe that
the interface is so simple that it can also be used in STEM activities
and not just in the university or by advanced hobbyists.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;In this section we discuss the various ways on how to set up the esp8266
&lt;code&gt;cloudmesh.robot&lt;/code&gt; development environment. You have several options to
install it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Option A: OSX with scripts hosted on github (recommended)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option B: OSX from source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option C: Explore your own&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we provide here a detailed option for OSX, you are free to explore
other operating systems. We know that it can for example be installed on
Ubuntu 16.04. We have not tested any of this on a Windows machine.&lt;/p&gt;
&lt;p&gt;We like to get feedback and Installation instructions.&lt;/p&gt;
&lt;h2 id=&#34;option-a-osx-install-from-a-script&#34;&gt;Option A: OSX install from a Script&lt;/h2&gt;
&lt;p&gt;For OSX we have created two scripts that you will need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cloudmesh.github.io/get/robot/osx/system/&#34;&gt;system.sh&lt;/a&gt;, that
installs pip, ansible, homebrew, xcode, virtualenv, readline, wget,
lua, picocom, mosquito, aquamacs, pycharm, numpy, matplotlib,
libusb, USB drivers for selkected esp8266 (ch34x chip)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cloudmesh.github.io/get/robot/osx/user&#34;&gt;user.sh&lt;/a&gt;, that
installs matplotlib, virtualenv, and the cloudmesh source in
~/github&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend that you review these scripts carefully before you use them
and check if they fit your needs. If they do not, please just download t
hem and adapt them to your needs. The &lt;strong&gt;system&lt;/strong&gt; script must be ran on
an &lt;strong&gt;Administrator&lt;/strong&gt; account as it requires sudo privileges. The
&lt;strong&gt;user&lt;/strong&gt; script must be ran on a &lt;strong&gt;User&lt;/strong&gt; account. We do not recommend
to run the IoT software in an administrative account due to security
best practices. To execute the &lt;strong&gt;system&lt;/strong&gt; script, type in the
&lt;em&gt;Administrator account&lt;/em&gt; terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -fsSL http://cloudmesh.github.io/get/robot/osx/system | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As earlier versions of pip may have some issues, this script will also
update pip and setuptools to a newer version&lt;/p&gt;
&lt;p&gt;To execute the &lt;strong&gt;user&lt;/strong&gt; script, type in the User account terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -fsSL http://cloudmesh.github.io/get/robot/osx/user | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Together these scripts allow you to install in a simple way development
tools for our IoT activities.&lt;/p&gt;
&lt;p&gt;The following steps are to be executed in the user environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;em&gt;the scripts do not update pip and setuptools, which may be
required due to a bug in setuptools prior to version 34 for setuptools.
You may have to repeat the update on any pyenv environment that you use.
How to do thi sis documented in a later section.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To simplify use, we recommend that you make the following additions to
your &lt;code&gt;~/.bash_profile&lt;/code&gt; file so that python 3 is automatically activated,
but does not interfere with the system installed python. Use the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ emacs ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or your favourite editor to edit the file and add the following lines at
the end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;#######################################################################&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# PYENV&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;######################################################################&lt;/span&gt;
open_emacs&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# open -na Aquamacs $*&lt;/span&gt;
    open -a Aquamacs &lt;span style=&#34;color:#b8860b&#34;&gt;$*&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;open_emacs

&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;########################################################&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;# PYENV&lt;/span&gt;
&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;########################################################&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;PYENV_VIRTUALENV_DISABLE_PROMPT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv init -&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;
__pyenv_version_ps1&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a2f&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;ret&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$?&lt;/span&gt;;
    &lt;span style=&#34;color:#b8860b&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv version-name&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;[[&lt;/span&gt; ! -z &lt;span style=&#34;color:#b8860b&#34;&gt;$output&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;(&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$output&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$ret&lt;/span&gt;;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#b8860b&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;\$(__pyenv_version_ps1) &lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color:#b68;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a2f&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;ENV3&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;pyenv activate ENV3&amp;#34;&lt;/span&gt;
ENV3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you start a new terminal you can edit files via aquamacs by typing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ e FILENAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where FILENAME is the name of the file you like to edit. However the
file must exists, which you can simply do with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;touch FILENAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the following lines at the end of the file&lt;/p&gt;
&lt;p&gt;To learn more about how to you automate the setup of an OSX machine, you
may be inspired by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ricbra/dotfiles/blob/master/bin/setup_osx&#34;&gt;https://github.com/ricbra/dotfiles/blob/master/bin/setup_osx&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible&#34;&gt;https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setting-up-git&#34;&gt;Setting Up Git&lt;/h3&gt;
&lt;p&gt;Sooner or later you will be using git. We recommend that you set your
identity on all computers that you will be using. To do this adapt the
following example according to your github.com identity that you have.
IF you do not, its time to greater one at github.com and follow the
directions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global user.name &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Gregor von Laszewski&amp;#34;&lt;/span&gt;
$ git config --global user.email laszewski@gmail.com
$ git config --global core.editor emacs
$ git config --global push.default matching
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;option-b-setup-from-pip&#34;&gt;Option B: setup from pip&lt;/h2&gt;
&lt;p&gt;We have removed the pip setup instructions as they do not include
installing the drivers.&lt;/p&gt;
&lt;h2 id=&#34;option-b-install-cloudmesh-robot-from-source&#34;&gt;Option B: Install Cloudmesh Robot from source&lt;/h2&gt;
&lt;p&gt;Developers that already have a development environment (e.g. xcode is
installed) can install cloudmesh robot also from the terminal while
downloading the source. You will need to first obtain the source and
compile it with the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir github
$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; github
$ git clone https://github.com/cloudmesh/cloudmesh.common.git
$ git clone https://github.com/cloudmesh/cloudmesh.cmd5.git
$ git clone https://github.com/cloudmesh/cloudmesh.robot.git
$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; cloudmesh.robot
$ make &lt;span style=&#34;color:#a2f&#34;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test out if the command has been installed, type&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot welcome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything works you should see an ASCII image of R2D2 and C3PO.
Next, we still have to install some additional programs before you can
use other commands.&lt;/p&gt;
&lt;p&gt;Once you have installed cloudmesh robots you well be able to install a
number of tools automatically with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot osx install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install services and tools including xcode, homebrew, macdown,
pycharm, and aquamacs. If you have some these tools already installed
it will skip the Installation process for a particular tool. Please note
that some of the tools require root access and thus you must be able to
have access to sudo to run them from our tool. In addition you will need
to install the OSX driver for the USB interface to the esp8266. This is
achieved with (only to be done if you follow the install from source
option)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot osx driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now please change your account to be again a standard account.&lt;/p&gt;
&lt;p&gt;Now you &lt;strong&gt;MUST REBOOT&lt;/strong&gt; the machine. Without rebooting you will not be
able to use the USB drivers.&lt;/p&gt;
&lt;h2 id=&#34;option-c-a-possible-setup-for-linux&#34;&gt;Option C: A possible setup for Linux&lt;/h2&gt;
&lt;p&gt;On a linux computer we recommend that you install emacs, cmake and
configure your git. Replace the user name and e-mail with the once that
you used to register your account in git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir github
$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; github
$ git clone https://github.com/cloudmesh/cloudmesh.robot.git
$ ssh-keygen
$ sudo apt-get install -y emacs
$ sudo apt-get install -y cmake
$ sudo apt-get install -y libqt4-dev
$ git config --global user.name &lt;span style=&#34;color:#b44&#34;&gt;&amp;#34;Gregor von Laszewski&amp;#34;&lt;/span&gt;
$ git config --global user.email laszewski@gmail.com
$ git config --global core.editor emacs
$ git config --global push.default matching
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This setup is highly incomplete and does not include the setup of the
USB drivers. Please help us completing the documentation.&lt;/p&gt;
&lt;h3 id=&#34;option-c-a-possible-setup-for-windows&#34;&gt;Option C: A possible setup for Windows&lt;/h3&gt;
&lt;p&gt;We do not have tried to set this up on Windows or a virtualbox running
Linux under windows. If you have tried it, please let us know. If you
have difficulties just use a raspberry PI and skip the IoT projects&lt;/p&gt;
&lt;h3 id=&#34;option-c-installation-of-the-cloudmeshrobot-interface-via-pip&#34;&gt;Option C: Installation of the cloudmesh.robot Interface via Pip&lt;/h3&gt;
&lt;p&gt;.. warning:: this option does not include installing the USB drivers.
You have to install them first. See examples on how to do that in our
install scripts. Generally what we do in our user.sh script is the same
way, but also includes the setup of python 3.6.1.&lt;/p&gt;
&lt;p&gt;To more easily interface with the robot we have developed a convenient
program that is installed as part of a command tool called cloudmesh.&lt;/p&gt;
&lt;h3 id=&#34;install-cloudmesh-robot-with-pip-not-working&#34;&gt;Install Cloudmesh Robot with Pip (not working)&lt;/h3&gt;
&lt;p&gt;Note that pip may not include the newest version of cloudmesh.robot and
we recommend you use the source install instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install cloudmesh.robot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install a program &lt;code&gt;cms&lt;/code&gt; on your computer that allows you to
easily communicate with the robot.&lt;/p&gt;
&lt;h2 id=&#34;using-cloudmesh-robot&#34;&gt;Using cloudmesh robot&lt;/h2&gt;
&lt;p&gt;Once you have successfully installed the drivers and the commands you
can look at the manual page of the robot command with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot &lt;span style=&#34;color:#a2f&#34;&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will see a manual page like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage:
   robot welcome
   robot osx install
   robot osx driver
   robot image fetch
   robot probe [--format=FORMAT]
   robot flash erase [--dryrun]
   robot flash python [--dryrun]
   robot test
   robot run PROGRAM
   robot credentials set SSID USERNAME PASSWORD
   robot credentials put
   robot credentials list
   robot login
   robot set PORT NOT IMPLEMENTED
   robot ls [PATH]
   robot put [-o] SOURCE [DESTINATION]
   robot get PATH
   robot rm PATH
   robot rmdir PATH
   robot dance FILE IPS
   robot inventory list [--cat] [--path=PATH] [ID]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testing-the-board&#34;&gt;Testing the board&lt;/h3&gt;
&lt;p&gt;Before you can use you ESP8266, you must have the appropriate drivers
installed on your computer. Click on &lt;a href=&#34;https://github.com/cloudmesh/cloudmesh.robot/blob/7859b395fd15e4d6ced679b05893c9a91957c956/documentation/source/espdrivers.md&#34;&gt;this
link&lt;/a&gt;
and follow the instructions on how to install these drivers.&lt;/p&gt;
&lt;p&gt;Next is to connect a esp8266 with a USB cable to the computer. The
ESP8266 should look similar to this.&lt;/p&gt;
&lt;p&gt;After you connected it, press the reset button. Before doing anything on
the board, we must test it. Once you have plugged it in, execute the
following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot probe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command takes about ten seconds to execute. The ESP8266&amp;rsquo;s led
should flash irregularly as it is probed. When the probe is finished, an
image similar to the following should appear in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    +-----------+---------------------------+
    | Attribute | Value                     |
    +-----------+---------------------------+
    | chipid    | b&#39; 0x00d0f9ec&#39;            |
    | mac       | b&#39; 00:10:FA:6E:38:4A&#39;     |
    | tty       | /dev/tty.wchusbserial1410 |
    +-----------+---------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please note that you should only have one board attached to your
computer.&lt;/p&gt;
&lt;h4 id=&#34;flashing-the-image-onto-the-robot-board&#34;&gt;Flashing the image onto the robot board&lt;/h4&gt;
&lt;p&gt;Next we need to flash the image on the robot board. Naturally we need to
fetch the image first from the internet. We do this with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot image fetch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will fetch an image that contains MicroPython into your local
directory.&lt;/p&gt;
&lt;p&gt;Next we need to &lt;em&gt;flash&lt;/em&gt; the image on the board.&lt;/p&gt;
&lt;p&gt;Before you begin, make sure that the ESP8266 is connected to your
computer. The board may come with a pre-installed image such as Lua or
some custom image from the vendor. In order to write programs in python,
we need to the chips to run micropython. To get micropython on our
ESP8266&amp;rsquo;s, a number of steps are required.&lt;/p&gt;
&lt;h4 id=&#34;erase-the-chip&#34;&gt;Erase the chip&lt;/h4&gt;
&lt;p&gt;First we need to erase the chip.&lt;/p&gt;
&lt;p&gt;Run the following command in your terminal terminal, and then &lt;strong&gt;stop.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash erase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your terminal should respond with the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/dev/tty.SLAB_USBtoUART
Please press the right buttons
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;continue&lt;/span&gt;? &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Y/n&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before taking any further steps, press both buttons on the ESP8266 at
the same time. Once you have done this, type &lt;code&gt;Y&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;. The
process should take under ten seconds to complete.&lt;/p&gt;
&lt;h4 id=&#34;putting-python-on-the-chip&#34;&gt;Putting Python on the chip&lt;/h4&gt;
&lt;p&gt;Before proceeding, you must once again press both of the buttons on the
ESP8266. Once this is done, you are ready to flash the chip with python
with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;testing-if-it-works&#34;&gt;Testing if it works&lt;/h4&gt;
&lt;p&gt;To test running a python program execute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be careful as it overwrites the file &lt;code&gt;test.py&lt;/code&gt;. If the ESP8266 is set up
properly, it should return this in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Count to 3
1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;execute-an-arbitrary-program&#34;&gt;Execute an arbitrary program&lt;/h4&gt;
&lt;p&gt;Lets assume you have placed a program in the file &lt;code&gt;prg.py&lt;/code&gt; with the
command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot put prg.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must reboot the ESP8266 before using a new program. This can be done
manually by pressing the reset button on the chip, or in terminal with
the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the chip is reset, you can run &lt;code&gt;prg.py&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot run prg.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;interactive-python-shell-on-the-board&#34;&gt;Interactive Python shell on the board&lt;/h4&gt;
&lt;p&gt;To get into the interactive python shell on the board you need to reset
the ESP8266 and run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cleaning-an-reinstalling-a-development-version&#34;&gt;Cleaning an reinstalling a development version&lt;/h4&gt;
&lt;p&gt;IN case you are a developer and you need to modify the source code, we
found that it is sometimes necessary to clean your development directory
and libraries. The easiest way to do this is to go to the repository
that you like to reinstall. Let us assume it is &lt;em&gt;cloudmesh.robot&lt;/em&gt;. Than
the following commands will clean the repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#a2f&#34;&gt;cd&lt;/span&gt; cloudmesh.robot
$ pip uninstall cloudmesh.robot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do the pip uninstall as many times till you see an error that no more
cloudmesh.robot versions can be found. Than execute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ make clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this you can reinstall it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python setup.py install; pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the -e flag is optional, but allows you to change the code without the
need of recompiling. A very useful feature in python.&lt;/p&gt;
&lt;h4 id=&#34;nodemcu-esp12-dev-kit-pin-definition&#34;&gt;NodeMCU ESP12 Dev Kit Pin Definition&lt;/h4&gt;
&lt;p&gt;For V1.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nodemcu.png&#34; alt=&#34;nodemcu&#34;&gt;&lt;/p&gt;
&lt;p&gt;The GPIO numbers of teh NodeMCU, do not correspond with the actual
numbers used in micropython&amp;rsquo;s pin library. The numbers are as follows:&lt;/p&gt;
&lt;p&gt;Pin/GPIO   NodeMCU&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;15         D8&lt;/p&gt;
&lt;h4 id=&#34;led&#34;&gt;LED&lt;/h4&gt;
&lt;p&gt;To switch on and of the LED you can use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;machine&lt;/span&gt;
led &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin(&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;,machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;OUT)
led&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;high()
led&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;low()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To blink youcan use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;machine&lt;/span&gt;
led &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin(&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;,machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;OUT)
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;while&lt;/span&gt; True:
    led&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;high()
    time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)
    led&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;low()
    time&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#666&#34;&gt;0.5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;led-esp8266_bb.png&#34; alt=&#34;LED A&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;led-esp8266-circuit.png&#34; alt=&#34;LED B&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;real-time-clock&#34;&gt;Real Time Clock&lt;/h5&gt;
&lt;p&gt;Get the library urtc.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget https://raw.githubusercontent.com/adafruit/Adafruit-uRTC/master/urtc.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Place it on the esp8266&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot put urtc.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Connect the board the following pins&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SDA to pin 5 = D1
SCL to pin 4 = D2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Login to the board&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;machine&lt;/span&gt;
i2c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;I2C(sda&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin(&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;), scl&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;machine&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;Pin(&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;))
i2c&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;scan()

&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;       [&lt;span style=&#34;color:#666&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;104&lt;/span&gt;]

&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;urtc&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;import&lt;/span&gt; DS3231
t &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; DS3231(i2c)
t&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;datetime()

&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;               DateTimeTuple(year&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2000&lt;/span&gt;, month&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, day&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;                                                weekday&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;, hour&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;, minute&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;15&lt;/span&gt;,
&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;                                                second&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;53&lt;/span&gt;, millisecond&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;None)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assignment: Create an object oriented class and fill out the details
while using code from &lt;code&gt;urtc.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;Clock&lt;/span&gt; (&lt;span style=&#34;color:#a2f&#34;&gt;object&lt;/span&gt;):
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, sda&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;5&lt;/span&gt;, scl&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;):
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;pass&lt;/span&gt;

c &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; Clock()
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;print&lt;/span&gt; (c&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;get())
&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;print&lt;/span&gt; (c)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ https://github.com/adafruit/Adafruit-uRTC/blob/master/urtc.py
$ git clone https://github.com/adafruit/Adafruit-uRTC.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;alternative-boards&#34;&gt;Alternative boards&lt;/h3&gt;
&lt;h4 id=&#34;huzzah-feather-esp8266&#34;&gt;HUZZAH Feather esp8266&lt;/h4&gt;
&lt;p&gt;Many different 8266 based alternative boards exist. One of these boards
is the HUZZAH Feather. IT behaves the same as the other boards, but ay
be using different drivers and USB ports. The &lt;em&gt;cms robot&lt;/em&gt; command line
tool is clever enough to identify automatically if it is attached and
uses the appropriate settings. More documentation about this board can
be found at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/adafruit-feather-huzzah-esp8266/using-nodemcu-lua&#34;&gt;doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This site has also many other examples and you can search for them with
keywords such as feather, esp8266, micropython.&lt;/p&gt;
&lt;p&gt;An example on how to use the LED on the &lt;em&gt;feather&lt;/em&gt; is documented at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/micropython-basics-blink-a-led/blink-led&#34;&gt;Feather HUZZAH
ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To place micropython on the feather you can plug in the to the usb port.
The good thing about this board is that you do not need to press any
buttons as it detects the upload nicely. If not make sure to reset it or
for flashing press both buttons. You can do the following:&lt;/p&gt;
&lt;p&gt;Probe the board with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot probe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Erasing the feather is simple as it has a build in mechanism to detect if
it is going to be erased. Hence no reset button needs to be pressed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash erase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get the python image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot fetch python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flashing is conducted with 460800 baud, it will take about 15 seconds.
After flashing you should try to login:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the boudrate to 115200:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    CTRL-A CTRL-B&amp;gt;

    *** baud:
    ```

type in:

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;115200 &amp;lt;ENTER&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Make sure that echo is switched to OFF:

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;CTRL-A CTRL-C
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;toggles it. Now you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try typing in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    print(&amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;appendix&#34;&gt;Appendix&lt;/h3&gt;
&lt;h3 id=&#34;installing-esp8266-usb-drivers&#34;&gt;Installing ESP8266 USB drivers&lt;/h3&gt;
&lt;p&gt;We provide here a section to explain which drivers we have tested on
various esp8266. Please note that if you have different versions you may
need different drivers. On OSX we found that we get good results with
the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew tap mengbo/ch340g-ch34g-ch34x-mac-os-x-driver https://github.com/mengbo/ch340g-ch34g-ch34x-mac-os-x-driver
$ brew cask install wch-ch34x-usb-serial-driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start a new terminal after the driver has finished installing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget http://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip
$ unzip Mac_OSX_VCP_Driver.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Click on the driver install file contained inside the zip file and the
driver should start installing. Once the driver has finished installing,
make sure to start a new terminal.&lt;/p&gt;
&lt;p&gt;Please remember that you need to close all terminals, as well as reboot
the computer to use the drivers. They will typically not work if you
have not rebooted.&lt;/p&gt;
&lt;p&gt;For other boards that also use the CH340G chip the following page may
help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html&#34;&gt;http://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: GrovePi</title>
      <link>/docs/iot/grovepi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/grovepi/</guid>
      <description>
        
        
        &lt;h3 id=&#34;grove-sensors&#34;&gt;Grove Sensors&lt;/h3&gt;
&lt;p&gt;Grove sensors have ready-made cables that make them easy to attach to
the Raspberry PI. However, they are more expensive. You still need a
Raspberry PI. No soldering iron and no breadboards are required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Starter-Kit-for-Arduino-p-1855.html&#34;&gt;Grove Starter
Set&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/category/Grove-c-1003.html&#34;&gt;Seed Studio Grove
Sensors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Base-Shield-for-NodeMCU-p-2513.html&#34;&gt;Grove Shield for
NodeMCU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.switchdoc.com/2016/02/tutorial-intro-to-grove-connectors-for-arduinoraspberry-pi-projects/&#34;&gt;Grove
Cable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.instructables.com/id/Basic-Electronics&#34;&gt;Electronics&lt;/a&gt;: An
introduction to the basic principals of electronics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.sparkfun.com/tutorials/voltage-current-resistance-and-ohms-law&#34;&gt;Voltage&lt;/a&gt;:
An introduction to the physics of electricity.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://info-ee.eps.surrey.ac.uk/Teaching/Unix/index.html&#34;&gt;Unix&lt;/a&gt;:
An introduction to the Unix os.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd/GrovePi/tree/master/Software/Python&#34;&gt;Grove
examples&lt;/a&gt;:
A list of Dexter Industries example code for GrovePi modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/tree/master/cloudmesh/pi&#34;&gt;GrovePi module
classes&lt;/a&gt;:
A repository for the GrovePi module classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;led&#34;&gt;LED&lt;/h2&gt;
&lt;p&gt;An LED is the simplest possible module for a raspberry pi, as it is
responsive only to the provided power. For an LED to emit light, it must
be exposed to a voltage greater than a certain threshold value. Above
this voltage, the conductivity of the diode increases exponentially and
its brightness increases likewise. If the current through the LED
becomes too high, the LED will burn out. The following link leads to a
tutorial from Dexter Industries for the LED module.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dexterindustries.com/GrovePi/projects-for-the-raspberry-pi/raspberry-pi-led-tutorial/&#34;&gt;Dexter LED
tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connect the LED to a digital port (see @fig:grove-led). The following code describes an LED
class. Since it is connected to a digital output, the voltage has only
two states, on and off. The default port for the LED class is D3. The
code for the &lt;code&gt;LED&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/led.py&#34;&gt;LED
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;led.jpg&#34; alt=&#34;LED&#34;&gt;{#fig:grove-led}&lt;/p&gt;
&lt;h2 id=&#34;buzzer&#34;&gt;Buzzer&lt;/h2&gt;
&lt;p&gt;The buzzer is shown in @fig:grove-buzzer.  Connect the buzzer to a
digital port. The default port for the Buzzer class is D3. You will
notice that the Buzzer class and the LED class are
interchangeable. This is because they work on the same digital
principal. Their two values are on and off. The code for the &lt;code&gt;Buzzer&lt;/code&gt;
class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/buzzer.py&#34;&gt;Buzzer
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;buzzer.jpg&#34; alt=&#34;Buzzer&#34;&gt;{#fig:grove-buzzer}&lt;/p&gt;
&lt;h2 id=&#34;relay&#34;&gt;Relay&lt;/h2&gt;
&lt;p&gt;The relay is shown in @fig:grove-relay.  The relay acts as a switch
in a circuit. When the value on the relay is 1, it allows current to
flow through it. When the value is 0, the relay breaks the circuit and
the current stops. Connect the relay to a digital port. The default
digital port is D4. The &lt;code&gt;Relay&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/relay.py&#34;&gt;Relay
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;relay.jpg&#34; alt=&#34;Relay&#34;&gt;{#fig:grove-relay}&lt;/p&gt;
&lt;h2 id=&#34;light-sensor&#34;&gt;Light Sensor&lt;/h2&gt;
&lt;p&gt;The light sensor is shown in @fig:grove-light-sensor.  The light
sensor measures light intensity and returns a value between 0
and 1023. Connect the light sensor to an analog port. The default port
is A0. The analog port allows the light sensor to return a range of
values. The &lt;code&gt;LightSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/light.py&#34;&gt;LightSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;light.jpg&#34; alt=&#34;Light Sensor&#34;&gt;{#fig:grove-light-sensor}&lt;/p&gt;
&lt;h2 id=&#34;rotary-angle-sensor&#34;&gt;Rotary Angle Sensor&lt;/h2&gt;
&lt;p&gt;The rotary angle sensor is shown in @fig:grove-rotary-angle-sensor.
The rotary angle sensor measures the angle to which it is turned.
Connect the sensor to an analog port. Port A0 is the default. The
&lt;code&gt;RotarySensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/rotary.py&#34;&gt;RotarySensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;rotary.jpg&#34; alt=&#34;Rotary Angle Sensor&#34;&gt;{#fig:grove-rotary-angle-sensor}&lt;/p&gt;
&lt;h2 id=&#34;barometer&#34;&gt;Barometer&lt;/h2&gt;
&lt;p&gt;The barometer is shown in @fig:grove-barometer.  Connect the
barometer to an I2C port. In addition to pressure, the GrovePi
barometer measures temperature in Fahrenheit and Celsius. The
&lt;code&gt;Barometer&lt;/code&gt; class can be found here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/barometer.py&#34;&gt;Barometer
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;barometer.jpg&#34; alt=&#34;Barometer&#34;&gt;{#fig:grove-barometer}&lt;/p&gt;
&lt;h2 id=&#34;distance-sensor&#34;&gt;Distance Sensor&lt;/h2&gt;
&lt;p&gt;The distance sensor is shown in @fig:grove-distance-sensor.  Connect
the distance sensor to a digital port. The grovepi module has a
built-in function to read the distance from the distance sensor, but
it is improperly calibrated, so this DistanceSensor class has a
calibration based on experimental data. The &lt;code&gt;DistanceSensor&lt;/code&gt; class can
be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/distance.py&#34;&gt;DistanceSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;distance.jpg&#34; alt=&#34;Distance Sensor&#34;&gt;{#fig:grove-distance-sensor}&lt;/p&gt;
&lt;h2 id=&#34;temperature-sensor&#34;&gt;Temperature Sensor&lt;/h2&gt;
&lt;p&gt;The temperature sensor is shown in @fig:grove-temperature-sensor.
The temperature sensor measures both temperature and humidity. Connect
the temperature sensor to a digital port. D7 is the default port. The
&lt;code&gt;TemperatureSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/temperature.py&#34;&gt;TemperatureSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;temperature.jpg&#34; alt=&#34;Temperature Sensor&#34;&gt;{#fig:grove-temperature-sensor}&lt;/p&gt;
&lt;h2 id=&#34;heartbeat-sensor&#34;&gt;Heartbeat Sensor&lt;/h2&gt;
&lt;p&gt;the heartbeat sensor is shown in @fig:grove-heartbeat.  Connect the
heartbeat sensor to an I2C port. The heartbeat sensor returns the
heart rate of the wearer. The &lt;code&gt;HeartbeatSensor&lt;/code&gt; class can be found
here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/heartbeat.py&#34;&gt;HeartbeatSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;heartbeat.jpg&#34; alt=&#34;Heartbeat Sensor&#34;&gt;{#fig:grove-heartbeat}&lt;/p&gt;
&lt;h2 id=&#34;joystick&#34;&gt;Joystick&lt;/h2&gt;
&lt;p&gt;The joystick is shown in @fig:grove-joystick.  Connect the joystick
to an analog port. A0 is the default port. The joystick has an x, y,
and click status based on the current state of the module. The
&lt;code&gt;Joystick&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/joystick.py&#34;&gt;Joystick
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;joystick.jpg&#34; alt=&#34;Joystick&#34;&gt;{#fig:grove-joystick}&lt;/p&gt;
&lt;h2 id=&#34;lcd-screen&#34;&gt;LCD Screen&lt;/h2&gt;
&lt;p&gt;The LCD screen is shown in @fig:grove-lcd.  The LCD screen can be
used to display text and colors. In order to use it, plug it into one
of the I2C ports. The &lt;code&gt;LCD&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/lcd.py&#34;&gt;LCD
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;lcd.jpg&#34; alt=&#34;LCD Screen&#34;&gt;{#fig:grove-lcd}&lt;/p&gt;
&lt;h2 id=&#34;moisture-sensor&#34;&gt;Moisture Sensor&lt;/h2&gt;
&lt;p&gt;The moisture sensor is shown in @fig:grove-moisture-sensor.  Connect
the moisture sensor to an analog port. The default port is A0.  The
&lt;code&gt;MoistureSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/moisture.py&#34;&gt;MoistureSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;moisture.jpg&#34; alt=&#34;Moisture Sensor&#34;&gt;{#fig:grove-moisture-sensor}&lt;/p&gt;
&lt;p&gt;An example of the implementation of the moisture sensor from Dexter
Industries can be found
&lt;a href=&#34;https://github.com/DexterInd/GrovePi/blob/master/Projects/plant_monitor/plant_project.py&#34;&gt;here&lt;/a&gt;.
The program is meant to measure the environmental conditions that affect
plant growth.&lt;/p&gt;
&lt;h2 id=&#34;water-sensor&#34;&gt;Water Sensor&lt;/h2&gt;
&lt;p&gt;The water sensor is shown in @fig:grove-water-sensor.  The water
sensor measures the amount of water in the environment of the
sensor. Connect the sensor to a digital point. D2 is the default port.
The &lt;code&gt;WaterSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/water.py&#34;&gt;WaterSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;water.jpg&#34; alt=&#34;Water Sensor&#34;&gt;{#fig:grove-water-sensor}&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Output</title>
      <link>/docs/iot/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/output/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Power</title>
      <link>/docs/iot/power/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/power/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Information about powering IoT projects&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Sensors</title>
      <link>/docs/iot/sensors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/iot/sensors/</guid>
      <description>
        
        
        &lt;p&gt;This section contains the wiring diagrams and associated classes for sensors that can be used with the Raspberry Pi.  In addition to the individual sensors an example project is also included.  Before getting started with sensors for the Raspberry Pi you will need to ensure that the Pi is set up with python3 and has the latest version of Raspbian installed.  Instructions for setting up the Raspberry Pi can be found &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/iot/pi.md&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
