<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster PI â€“ Old IoT</title>
    <link>/docs/old/iot/</link>
    <description>Recent content in Old IoT on Cluster PI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/old/iot/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Easy Plug</title>
      <link>/docs/old/iot/easyplug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/easyplug/</guid>
      <description>
        
        
        &lt;p&gt;Note: Easy plug is no longer available. We leave it here just in case someone has easy plug.&lt;/p&gt;
&lt;p&gt;Copied from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.keyestudio.com/index.php/Ks0099_keyestudio_EASY_plug_Control_Board&#34;&gt;http://wiki.keyestudio.com/index.php/Ks0099_keyestudio_EASY_plug_Control_Board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keyestudio Easy-plug control board is a microcontroller board based on
the ATmega328P-PU. It has 14 digital input/outputs (of which 6 can be
used as PWM outputs), 6 analog inputs, a 16 MHz quartz crystal, a USB
connection, a power jack, an ICSP header and a reset button. It
contains everything needed to support the microcontroller; simply
connect it to a computer with a USB cable or power it with a AC-to-DC
adapter or battery to get started.You can tinker with your UNO without
worrying too much about doing something wrong, worst case scenario you
can replace the chip for a few dollars and start over again.  For
convenience of wire connection, we simplify pins GND and VCC into each
plug, so you only need one wire to connect a module, no need to
separately connect the VCC and GND. The pins on the original UNO are
all redesigned into plug interface. On the board, you can find ports
D2-D13, A0 to A5, an IIC port and a COM port. All in one simple plug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/easyplug.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Microcontroller core&lt;/th&gt;
&lt;th&gt;ATmega328P-PU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Working voltage&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;External input voltage&lt;/td&gt;
&lt;td&gt;$+7V - +12V$ (suggested)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;External input voltage  (externum)&lt;/td&gt;
&lt;td&gt;$+6V \leq Vin \leq +20V$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital signal I/O interface&lt;/td&gt;
&lt;td&gt;14 (of which 6 provide PWM output)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Analog signal input interface&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DCI/O interface current&lt;/td&gt;
&lt;td&gt;20 mA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FlashMemory&lt;/td&gt;
&lt;td&gt;32KB (ATmega328) of which 0.5 KB used by bootloader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRAM static storage capacity&lt;/td&gt;
&lt;td&gt;2KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EEPROM storage capacity&lt;/td&gt;
&lt;td&gt;1 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EEPROM storage capacity&lt;/td&gt;
&lt;td&gt;16 MHz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;connect&#34;&gt;Connect&lt;/h2&gt;
&lt;p&gt;Tools -&amp;gt; Arduino/Genuine Arduino&lt;/p&gt;
&lt;p&gt;port oon OSX will lock something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dev/cu.usbmodem1461&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;test-code&#34;&gt;Test code&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;int command;
int port;

int pin_from = 5;
int pin_to = 13;

void Light(int pin){
  digitalWrite(pin,HIGH);
  delay(500);
  digitalWrite(pin,LOW);
}

void setup() {
  Serial.begin(9600);
  int i;
  for (i = pin_from; i &amp;lt;= pin_to; i++){
    pinMode(i,OUTPUT);
  }
}


void loop() {
 command=Serial.read();
  if(command==&#39;a&#39;) {
    int i;
    for (i = pin_from; i &amp;lt;= pin_to; i++){
      Light(i);
      Serial.print(&amp;quot;Led &amp;quot;);
      Serial.println(i);
      delay(100);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kit-list&#34;&gt;Kit List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.keyestudio.com/keyestudio-easy-plug-learning-kit-for-arduino-super-makers.html&#34;&gt;http://www.keyestudio.com/keyestudio-easy-plug-learning-kit-for-arduino-super-makers.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../images/easyplugkit.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Part&lt;/th&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug controller Board&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acrylic Board + Copper bush set&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug cable&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB cable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Piranha LED Module&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Line Tracking Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Infrared obstacle avoidance sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Photo Interrupter Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug PIR Motion Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DS18B20 Temperature Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug IR Receiver Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug IR Transmitter Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Single Relay Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug ADXL345 Three Axis Acceleration Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DHT11 Temperature and Humidity Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DS3231 Clock Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Analog Gas Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Analog Alcohol Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug MQ135 Air Quality Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug BMP180 Barometric Pressure Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Bluetooth Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug 1602 I2C Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug I2C 8x8 LED Matrix&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;command-language&#34;&gt;Command Language&lt;/h2&gt;
&lt;p&gt;on PORT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches PORT on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;off PORT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches port off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches all ports on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;off all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches all ports off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goes serially through ports and switches them on and off&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;String command;


int pin_from = 5;
int pin_to = 13;

String getValue(String data, char separator, int index)
{
  // copied from internet
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i &amp;lt;= maxIndex &amp;amp;&amp;amp; found &amp;lt;= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found &amp;gt; index ? data.substring(strIndex[0], strIndex[1]) : &amp;quot;&amp;quot;;
}

void Light(int pin, int action){
  if (action ==  1) {
    digitalWrite(pin,HIGH);
  } else {
    digitalWrite(pin,LOW);
  }
}

void wait_for_input() {
  while (Serial.available()==0) { }
}

void setup() {
  Serial.begin(9600);
  int i;
  for (i = pin_from; i &amp;lt;= pin_to; i++){
    pinMode(i,OUTPUT);
  }
}


void loop() {

  Serial.print(&amp;quot;command:&amp;quot;);
  wait_for_input();
  command=Serial.readString();
  Serial.println (command);

   if (command==&amp;quot;dance&amp;quot;) {
      for (int i = pin_from; i &amp;lt;= pin_to; i++) {
        Light(i,1);
        delay(100);
        Light(i,0);
        Serial.print(&amp;quot;Led &amp;quot;);
        Serial.println(i);
        delay(100);
      }
    } else {

      int action;
      String action_name = getValue(command, &#39; &#39;, 0);
      String port_name = getValue(command, &#39; &#39;, 1);

      action = action_name == &amp;quot;on&amp;quot;;

      if (port_name == &amp;quot;all&amp;quot;) {
        for (int i = pin_from; i &amp;lt;= pin_to; i++){
          Light(i,action);
          Serial.print(&amp;quot;Led &amp;quot;);
          Serial.println(i);
        }
      } else {
        int port = port_name.toInt();

        Serial.println(action);
        Serial.println(port);
        Light(port, action);
     }
  }
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Introduction</title>
      <link>/docs/old/iot/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/introduction/</guid>
      <description>
        
        
        &lt;p&gt;Internet of Things is one of the driving forces in the modernisation
of today&amp;rsquo;s world. It is based on connecting &lt;em&gt;things&lt;/em&gt; to the internet
to create a more aware world that can be interfaced with. This not
only includes us humans, but any &lt;em&gt;thing&lt;/em&gt; that can interact with other
things.  It is clear that such a vision of interconnected devices will
result in billions of devices to communicate with each other. Some of
them may only communicate small number of items, while others will
communicate a large amount. Analysis of this data is dependent on the
capability of the &lt;em&gt;thing&lt;/em&gt;. If it is to small the analysis can be
conducted on a remote server or cloud while information to act are fed
back from the device.  In other cases the device may be completely
autonomous and does not require any interaction. Yet in other cases
the collaborative information gathered from such devices is used to
derive decisions and actions.&lt;/p&gt;
&lt;p&gt;Within this section we are trying to provide you with a small glimpse
into how IoT devices function and can be utilized on small projects.
Ideally if the class has all such a device we could even attempt to
build a cloud based service that collects and redistributes the data.&lt;/p&gt;
&lt;p&gt;To keep things simple we are not providing a general introduction in
IoT. For that we offer other classes. However, we will introduce you to
two different devices. These are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;esp8266&lt;/li&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reasons we chose them is that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are cheap.&lt;/li&gt;
&lt;li&gt;We can program both in python allowing us to use a single
programming language for all projects and assignments, and&lt;/li&gt;
&lt;li&gt;They are sufficiently powerful and we can conduct real projects with
them beyond toy projects.&lt;/li&gt;
&lt;li&gt;The devices, especially the Raspberry PI can be used to also learn
Linux in case you do not have access to a linux computer. Please
note however the raspberry will have memory and space limitations
that you need to deal with.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Projects that you can do to test the devices are&lt;/p&gt;
&lt;p&gt;esp8266 (easy-moderate, small memory):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a LED blinker&lt;/li&gt;
&lt;li&gt;a dendrite :o2:&lt;/li&gt;
&lt;li&gt;a robot fish :o2:&lt;/li&gt;
&lt;li&gt;a fish swarm :o2:&lt;/li&gt;
&lt;li&gt;a robot swarm :o2:&lt;/li&gt;
&lt;li&gt;an activity of your desire&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raspberry Pi (easy-moderate, 32GB space limitation):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a LED blinker&lt;/li&gt;
&lt;li&gt;a robot car&lt;/li&gt;
&lt;li&gt;a robot car with camera&lt;/li&gt;
&lt;li&gt;a temperature service&lt;/li&gt;
&lt;li&gt;different clusters&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;-!&amp;ndash;
Crazyflie 2.0 (difficult):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;programming a drone&lt;/li&gt;
&lt;li&gt;programming a drone swarm
-&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Indiana University&lt;/em&gt;: Please note that for those at IU we do have a
Lab in which you can use some of the devices pointed out here. You can
arrange for accessing the infrastructure.&lt;/p&gt;
&lt;p&gt;In case you want to work on a swarm, we do have positioning sensors
that simplify that task.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Due to the small cost involed in these devices you can buy them
also simply yourself.&lt;/p&gt;
&lt;p&gt;We provide throughout the book lists of hardware that you will need
for the various projects.&lt;/p&gt;
&lt;p&gt;In general we think that these platforms provide a wonderful
introduction into IoT. Such platforms were
just a decade ago not powerful enough or too expensive. However today
the provide a serious platform for developers. Sensors are available
easily as most Android comparable sensors can be used.&lt;/p&gt;
&lt;p&gt;Before we jump right into programming the devices, we like to point
out that we did not chose to use Arduinos much, as their price advantage is
no longer valid. They also are mostly using C and as we focus in our
material on python we decided to not spend much time on it.&lt;/p&gt;
&lt;p&gt;We also find that esp8266 and Raspberry can interface
with most sensors. Having the ability to easily use WiFi however is
our primary reason for using them. Furthermore being able to attach a
camera to the Raspberry is just superb. Image analysis is one of
the drivers for big data.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI 3</title>
      <link>/docs/old/iot/pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/pi/</guid>
      <description>
        
        
        &lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h3 id=&#34;erasing-the-sd-card&#34;&gt;Erasing the SD Card&lt;/h3&gt;
&lt;p&gt;Before you can install an OS on your sd card, you must erase it and put
it in the proper format.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Insert your sd card into your micro-sd adapter and open Disk Utility
with a spotlight search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Disk Utility, right click the name of the sd card and select
erase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name the sd card and format it as MS-DOS (FAT). Then click erase.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/diskutil.png&#34; alt=&#34;image&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it does not erase the first time, try again. It sometimes takes
multiple tries to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;installation-of-noobs&#34;&gt;Installation of NOOBS&lt;/h3&gt;
&lt;p&gt;NOOBS is an OS that includes Raspbian. The official description of
Raspbian can be found
&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;here&lt;/a&gt;. It comes
pre-packaged with many useful programming tools, and is easy to use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download Noobs &lt;a href=&#34;https://www.raspberrypi.org/downloads/noobs/&#34;&gt;here&lt;/a&gt;.
This will take around 30 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to your Finder and in Downloads, search for NOOBS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the NOOBS folder and drag its contents into the sd card in the
devices section. There should be 20 files and folders in the NOOBS
folder. The download should take about 3 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installed, eject the sd card and put it in your raspberry pi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power up your raspberry and you will see a menu like this&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images/noobs.jpg&#34; alt=&#34;Noobs&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select Raspbian and click &lt;code&gt;Install (i)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;installation-of-dexter&#34;&gt;Installation of Dexter&lt;/h3&gt;
&lt;p&gt;The version of Dexter that you want to flash onto your sd card is called
Raspbian for Robots. This is a Raspbian based os that is compatible with
the GrovePi board. It also comes with pre-installed Dexter Industries
software.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, download the most recent Dexter_Industries_jessie.zip file
from
&lt;a href=&#34;https://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the file has downloaded, uncompress it and insert your sd card
into the micro-sd adapter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open etcher and flash the uncompressed jessie image onto the sd
card.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images/etcher.png&#34; alt=&#34;Etcher&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eject your sd card and insert it into your raspberry pi.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;configure&#34;&gt;Configure&lt;/h2&gt;
&lt;h3 id=&#34;prepare-os&#34;&gt;Prepare OS&lt;/h3&gt;
&lt;h2 id=&#34;update&#34;&gt;Update&lt;/h2&gt;
&lt;p&gt;The following are essential updates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install emacs
dpkg -l &amp;gt; ~/Desktop/packages.list
pip freeze &amp;gt; ~/Desktop/pip-freeze-initial.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following are necessary for the scientific libraries, but they
require lots of space. Our sd cards do not have enough space for them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential python-dev python-distlib python-setuptools python-pip python-wheel libzmq-dev libgdal-dev
sudo apt-get install xsel xclip libxml2-dev libxslt-dev python-lxml python-h5py python-numexpr python-dateutil python-six python-tz python-bs4 python-html5lib python-openpyxl python-tables python-xlrd python-xlwt cython python-sqlalchemy python-xlsxwriter python-jinja2 python-boto python-gflags python-googleapi python-httplib2 python-zmq libspatialindex-dev
sudo pip install bottleneck rtree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add to .bashrc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd
git clone git://github.com/yyuu/pyenv.git .pyenv
echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc

export PATH=&amp;quot;/home/pi/.pyenv/bin:$PATH&amp;quot;
eval &amp;quot;$(pyenv init -)&amp;quot;
eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;

curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source&lt;/p&gt;
&lt;h3 id=&#34;update-to-python-361&#34;&gt;Update to Python 3.6.1&lt;/h3&gt;
&lt;h2 id=&#34;change-python-version&#34;&gt;Change python version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux]
(&lt;a href=&#34;https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux&#34;&gt;https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upgrade setuptools for pip install with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ pip3 install --upgrade setuptools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test your python version with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your python version alternatives&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ update-alternatives --list python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If python2.7 is not in your alternatives, add it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If python3.4 is not in your alternatives, add it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now make python3.4 to your default with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    update-alternatives --config python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select python3.4&lt;/p&gt;
&lt;h2 id=&#34;install-361&#34;&gt;install 3.6.1&lt;/h2&gt;
&lt;p&gt;To install python 3.6.1, follow steps 1 and 2. This is unnecessary for
our purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/dschep/24aa61672a2092246eaca2824400d37f&#34;&gt;better get
3.6.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-cloudmesh-pi&#34;&gt;install cloudmesh-pi&lt;/h2&gt;
&lt;p&gt;pip install cloudmesh-pi&lt;/p&gt;
&lt;p&gt;pip install cloudmesh-pi with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git clone https://github.com/cloudmesh/cloudmesh-pi.git
    $ cd cloudmesh-pi
    $ sudo pip3 install .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;see how we do this in macOS/linux can this be done on raspberry? if not
document update from source with altinstall&lt;/p&gt;
&lt;h3 id=&#34;install-scientific-libraries&#34;&gt;Install scientific Libraries&lt;/h3&gt;
&lt;p&gt;check if they are already installed we do not have enough space to
install all of these.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-numpy python-matplotlib python-scipy python-sklearn python-pandas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;numpy&lt;br&gt;
matplotlib&lt;br&gt;
scipy&lt;br&gt;
scikitlearn&lt;/p&gt;
&lt;h3 id=&#34;cloudmesh-pi&#34;&gt;cloudmesh-pi&lt;/h3&gt;
&lt;p&gt;cloudmesh-pi is a repository for our GrovePi module classes. These
classes require Dexter software, so you need to either have Raspbian for
Robots or download the software separately.&lt;/p&gt;
&lt;p&gt;If you have Raspbian for Robots, run the following in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd
mkdir github
cd github
git clone https://github.com/cloudmesh/cloudmesh-pi.git
cd cloudmesh-pi
sudo pip install .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-vnc&#34;&gt;Install VNC&lt;/h3&gt;
&lt;p&gt;describe how to install and configure VNC&lt;/p&gt;
&lt;h2 id=&#34;sensors&#34;&gt;Sensors&lt;/h2&gt;
&lt;h3 id=&#34;grove-sensors-o2&#34;&gt;Grove Sensors :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;we already have draft&lt;/p&gt;
&lt;h3 id=&#34;non-grove-sensors-o2&#34;&gt;Non Grove Sensors :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;Elegoo as example&lt;/p&gt;
&lt;h2 id=&#34;notes-to-integrates&#34;&gt;Notes To integrates&lt;/h2&gt;
&lt;h3 id=&#34;connecting&#34;&gt;Connecting&lt;/h3&gt;
&lt;p&gt;Hostnames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;raspberrypi.local&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;raspberrypi.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;change&lt;/p&gt;
&lt;p&gt;recovery.cmdline&lt;/p&gt;
&lt;p&gt;forgot what these were:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;runinstaller quiet ramdisk_size=32768 root=/dev/ram0 init=/init vt.cur_default=1 elevator=deadline
silentinstall runinstaller quiet ramdisk_size=32768 root=/dev/ram0 init=/init vt.cur_default=1 elevator=deadline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Connect the cable&lt;/p&gt;
&lt;p&gt;You will see the activity LEDs flash while the OS installs. Depending on
your SD-Card this can take up to 40-60 minutes.&lt;/p&gt;
&lt;h2 id=&#34;vlc-on-macos&#34;&gt;VLC on macOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.videolan.org/vlc/index.en_GB.html&#34;&gt;http://www.videolan.org/vlc/index.en_GB.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://get.videolan.org/vlc/2.2.6/macosx/vlc-2.2.6.dmg&#34;&gt;http://get.videolan.org/vlc/2.2.6/macosx/vlc-2.2.6.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mybigideas.co.uk/RPi/RPiCamera/&#34;&gt;http://www.mybigideas.co.uk/RPi/RPiCamera/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;camera-on-pi&#34;&gt;Camera on Pi&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install vlc
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&#34;&gt;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackster.io/bestd25/pi-car-016e66&#34;&gt;https://www.hackster.io/bestd25/pi-car-016e66&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;streaming-video&#34;&gt;Streaming video&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguelgrinberg.com/post/stream-video-from-the-raspberry-pi-camera-to-web-browsers-even-on-ios-and-android&#34;&gt;https://blog.miguelgrinberg.com/post/stream-video-from-the-raspberry-pi-camera-to-web-browsers-even-on-ios-and-android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux-commandline&#34;&gt;Linux Commandline&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.computerworld.com/article/2598082/linux/linux-linux-command-line-cheat-sheet.html&#34;&gt;http://www.computerworld.com/article/2598082/linux/linux-linux-command-line-cheat-sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enable-spi&#34;&gt;Enable SPI&lt;/h2&gt;
&lt;p&gt;go to the configuration interfaces and enable&lt;/p&gt;
&lt;h2 id=&#34;rtimulib2&#34;&gt;RTIMUlib2&lt;/h2&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/RTIMULib/RTIMULib2.git&#34;&gt;https://github.com/RTIMULib/RTIMULib2.git&lt;/a&gt; cd RTIMULib&lt;/p&gt;
&lt;p&gt;Add the following two lines to /etc/modules&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i2c-bcm2708
i2c-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /dev/i2c-*
sudo apt-get install i2c-tools

sudo i2cdetect -y 1
         0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a file /etc/udev/rules.d/90-i2c.rules and add the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KERNEL==&amp;quot;i2c-[0-7]&amp;quot;,MODE=&amp;quot;0666&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;note: does not work&lt;/p&gt;
&lt;p&gt;instead we do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chmod 666 /dev/i2c-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set the I2C bus speed to 400KHz by adding to /boot/config.txt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dtparam=i2c1_baudrate=400000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot. In terminal change directories to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/pi/github/RTIMULib2/RTIMULib/IMUDrivers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emacs RTIMUDefs.h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In RTIMUDefs.h change&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MPU9250_ID 0x71
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MPU9250_ID 0x73



cd /home/pi/github/RTIMULib2/RTIMULib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terminal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
make -j4
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;compile-rtimulib-apps&#34;&gt;Compile RTIMULib Apps&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cd /home/pi/github/RTIMULib2/Linux/RTIMULibCal
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive10
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive11
make clean; make -j4
sudo make install


cd /home/pi/github/RTIMULib2/Linux/RTIMULibDemo
qmake clean
make clean
qmake
make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDemoGL
qmake clean
make clean
qmake
make -j4
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;camera&#34;&gt;Camera&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&#34;&gt;Camera
Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

sudo apt-get install libxvidcore-dev libx264-dev

sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/.cache/pip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy into ~/.profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; echo -e &amp;quot;\n# virtualenv and virtualenvwrapper&amp;quot; &amp;gt;&amp;gt; ~/.profile
 echo &amp;quot;export WORKON_HOME=$HOME/.virtualenvs&amp;quot; &amp;gt;&amp;gt; ~/.profile
 echo &amp;quot;source /usr/local/bin/virtualenvwrapper.sh&amp;quot; &amp;gt;&amp;gt; ~/.profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source ~/.profile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvirtualenv cv -p python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;workon cv&lt;/p&gt;
&lt;p&gt;command line has (cv) in front&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install numpy

wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip
wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip
unzip opencv.zip
unzip opencv_contrib.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lessons-and-projects&#34;&gt;Lessons and Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-guis/worksheet/&#34;&gt;Gui&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-guis/&#34;&gt;Solder&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/blog/an-image-processing-robot-for-robocup-junior/&#34;&gt;PI Camera Line
Follower&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://circuitdigest.com/microcontroller-projects/web-controlled-raspberry-pi-surveillance-robot&#34;&gt;Pi car
flask&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-to-be-integrated&#34;&gt;OTHER TO BE INTEGRATED&lt;/h2&gt;
&lt;h3 id=&#34;pi-emulator-on-windows&#34;&gt;PI emulator on Windows&lt;/h3&gt;
&lt;p&gt;We have not yet tried it, but we like to hear back from you on
experiences with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/rpiqemuwindows/&#34;&gt;https://sourceforge.net/projects/rpiqemuwindows/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-server&#34;&gt;Web Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/python-web-server-with-flask/worksheet/&#34;&gt;Web Server
Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tools</title>
      <link>/docs/old/iot/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/tools/</guid>
      <description>
        
        
        &lt;h2 id=&#34;pyenv&#34;&gt;Pyenv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;refers to usiing anaconda within pyenv anaconda &lt;a href=&#34;https://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osxhttps://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osx&#34;&gt;Pyenv&lt;/a&gt;
allows to manage multiple versions of python easily. &lt;a href=&#34;https://github.com/pyenv/pyenv#how-it-works&#34;&gt;Pyenv
link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;matplotlib&#34;&gt;Matplotlib&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Matplotlib&lt;/em&gt;: Matplotlib is a library that allows us to create nice
graphs in python. As we typically install python with virtualenv, we
need to configure matplotlib properly to use it. The easiest way to
do this is to execute the following commands. After you run them you
can use matplotlib.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install numpy
$ pip install matplotlib
$ echo &amp;quot;backend : TkAgg&amp;quot; &amp;gt; ~/.matplotlib/matplotlibrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/en/guide/macOSX&#34;&gt;Arduino&lt;/a&gt; (from Arduino if
you like to use their interface to access the esp8266 boards)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arduino&#34;&gt;Arduino&lt;/h2&gt;
&lt;p&gt;This installation is optional. In the event that there is a TTY error,
you will need to install Arduino, since your Mac may be missing some
drivers that are included in Arduino. Simply go to
&lt;a href=&#34;https://www.arduino.cc/en/guide/macOSX&#34;&gt;Arduino&lt;/a&gt; and follow the
installation instructions.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
