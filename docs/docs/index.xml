<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster PI â€“ Documentation</title>
    <link>/docs/</link>
    <description>Recent content in Documentation on Cluster PI</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Build a Mini Cluster</title>
      <link>/docs/mini-cluster/</link>
      <pubDate>Sun, 09 Apr 2017 10:58:08 -0400</pubDate>
      
      <guid>/docs/mini-cluster/</guid>
      <description>
        
        
        &lt;p&gt;Please describe here the steps on how you build the mini cluster.&lt;/p&gt;
&lt;p&gt;Include some image. Make sure the background is white.&lt;/p&gt;
&lt;h2 id=&#34;team&#34;&gt;Team&lt;/h2&gt;
&lt;p&gt;Put team names here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adam&lt;/li&gt;
&lt;li&gt;Logan&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;Sunny&lt;/li&gt;
&lt;li&gt;Richie (pi burn)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;equipmemt&#34;&gt;Equipmemt&lt;/h2&gt;
&lt;p&gt;put list of equipment here&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Quantity&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Power Switch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Allows the cluster do be switched on and of easily&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;h3 id=&#34;week-1&#34;&gt;Week 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Distributed mini cluster equipment&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up cluster with cloudmesh-pi-burn&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get more SD Cards&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add more tasks &amp;hellip; ;-)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add more weeks &amp;hellip; ;-)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add dates to Weeks &amp;hellip; ;-)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add weekly meeting&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add slack to web page: &lt;a href=&#34;https://app.slack.com/client/TFQC2P62D/CTP848QDV&#34;&gt;https://app.slack.com/client/TFQC2P62D/CTP848QDV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Is there a build in slack module for hugo?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;week-2&#34;&gt;Week 2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; find k3s and see if that can be set up. Remember they may do it
differently than we need. We assume a cluster network is setup. We
need to build form existing cluster with network. Can k3s do this?
Evaluate report.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; By end of week 2 we want a mechnaism to set up while using
cloudmesh-pi-burn before hand&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: About</title>
      <link>/docs/old/pi/preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/preface/</guid>
      <description>
        
        
        &lt;p&gt;This document has been created form our document collection to target
the creation of Cloud Clusters with Raspberry PI&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;The document can be contributed to by you and compiled on your local
machine. More information about this will be presented in this prefix.&lt;/p&gt;
&lt;p&gt;We recommend that you read an entire section first before you start
copy paste style execution of shell commands or programs. We want you
to obtain first a solid overview of what you need to do. Whatever yo
do crate a backup first.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Automated Headless Configuration of a Pi Cluster :o2:</title>
      <link>/docs/old/pi/clusters/pi-configure-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-configure-cluster/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;Our goal is perform the following configuration automatically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/&#34;&gt;Enable ssh&lt;/a&gt;
permanently (initial ssh access will be enabled when we burn the SD cards)&lt;/li&gt;
&lt;li&gt;Change the password&lt;/li&gt;
&lt;li&gt;Set up one of the Pis as a DHCP server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These actions are all done with two scripts. The first script,
&lt;code&gt;configure-pi.sh&lt;/code&gt;, runs on the computer used to set up the Pis. The
second, &lt;code&gt;setup-pi.sh&lt;/code&gt;, enables ssh, changes the password for the pi
user, and configures the master node as a DHCP server.  Determination
of whether the node is the master or a worker is done with the &lt;code&gt;-m&lt;/code&gt;
flag.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;assemble-pi-cluster.md&#34;&gt;Assemble a Pi Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;modify-pi-image.md&#34;&gt;Burn SD cards with names changed and ssh enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;expect&lt;/code&gt; on computer running &lt;code&gt;configure-pi.sh&lt;/code&gt;. On a Mac, this is done with
&lt;code&gt;brew install expect&lt;/code&gt;. On Unix, use &lt;code&gt;apt-get install expect&lt;/code&gt; or &lt;code&gt;yum install expect&lt;/code&gt;.
More information on &lt;code&gt;expect&lt;/code&gt; can be found &lt;a href=&#34;https://likegeeks.com/expect-command/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-dhcp&#34;&gt;Setting up DHCP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;The information presented here insecure!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TODO: Find out if cluster should be set up with or without internet
enabled. Tutorial for getting Pi on IU Secure
&lt;a href=&#34;https://cs.iupui.edu/~xiaozhon/course_tutorials/Connecting_to_IU_Secure_RPi_Tutorial.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TODO: New version of isc-dhcp-server. Find out if INTERFACES in
/etc/default/isc-dhcp-server should be V4, V6 or both.&lt;/p&gt;
&lt;p&gt;TODO: Switch is eth8 when internet sharing is off, names show up, and
IP addresses are on different subnet. When internet sharing is on,
names do not show up. How should DHCP and network be setup? What is the
use case? Listed next is output of &lt;code&gt;arp -a&lt;/code&gt; with internet sharing.  I turned
it on so that installations via apt-get would work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(2.7.16) BKS-MBP:project-code bsobolik$ arp -a
hello (192.168.1.1) at 58:ef:68:a9:51:4e on en0 ifscope [ethernet]
bertoltksiphone.hsd1.in.comcast.net (192.168.1.126) at e4:9a:79:7f:19:55 on en0 ifscope [ethernet]
? (192.168.1.255) at ff:ff:ff:ff:ff:ff on en0 ifscope [ethernet]
? (192.168.2.7) at b8:27:eb:0:c3:55 on bridge100 ifscope [bridge]
? (192.168.2.8) at b8:27:eb:d1:21:33 on bridge100 ifscope [bridge]
? (192.168.2.255) at ff:ff:ff:ff:ff:ff on bridge100 ifscope [bridge]
? (224.0.0.251) at 1:0:5e:0:0:fb on en0 ifscope permanent [ethernet]
? (239.255.255.250) at 1:0:5e:7f:ff:fa on en0 ifscope permanent [ethernet]
broadcasthost (255.255.255.255) at ff:ff:ff:ff:ff:ff on en0 ifscope [ethernet]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When internet sharing is off I get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(2.7.16) BKS-MBP:~ bsobolik$ arp -a
raspberrypi.local (169.254.177.219) at b8:27:eb:0:c3:55 on en8 [ethernet]
? (169.254.255.255) at (incomplete) on en0 [ethernet]
hello (192.168.1.1) at 58:ef:68:a9:51:4e on en0 ifscope [ethernet]
? (192.168.1.255) at ff:ff:ff:ff:ff:ff on en0 ifscope [ethernet]
? (224.0.0.251) at 1:0:5e:0:0:fb on en0 ifscope permanent [ethernet]
broadcasthost (255.255.255.255) at ff:ff:ff:ff:ff:ff on en0 ifscope [ethernet]
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Cluster Setup</title>
      <link>/docs/old/pi/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/setup/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;../images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this section we discuss how we setup the cluster. To explore that we
can conduct the setup without monitor, we are collecting in this section
a variety of tasks in regards to it and documenting solutions for them.
Students in the residential or in the online classes that participate in
cluster building can contribute to this section.&lt;/p&gt;
&lt;p&gt;A number of students have been assigned for particular tasks. and will
be added here by the TA&amp;rsquo;s. It is expected that you conduct your task
ASAP.&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;A number of useful links may help for this task. However be aware that
we want to develop a &lt;em&gt;script&lt;/em&gt; for most of the tasks eliminating input by
hand. The information here deals to identifying the information needed
to do so.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/raspberry-pi-headless-install-462ccabd75d0&#34;&gt;https://hackernoon.com/raspberry-pi-headless-install-462ccabd75d0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://installvirtual.com/enable-ssh-in-raspberry-pi-without-monitor&#34;&gt;https://installvirtual.com/enable-ssh-in-raspberry-pi-without-monitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;According to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/configuration/raspi-config.md&#34;&gt;https://www.raspberrypi.org/documentation/configuration/raspi-config.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rasp-config writes a file /boot/config.txt. Maybe it is a good idea to
inspect this file manipulate it and see if there are field we simply
could write and overwrite it on the SD card. See also&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elinux.org/R-Pi_configuration_file&#34;&gt;https://elinux.org/R-Pi_configuration_file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;add-on-hardware&#34;&gt;Add-on Hardware&lt;/h2&gt;
&lt;p&gt;recently ordered add on hardware&lt;/p&gt;
&lt;p&gt;power switches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/dp/B01DE57SD4/ref=psdc_6396124011_t2_B075WZJL6N&#34;&gt;https://www.amazon.com/dp/B01DE57SD4/ref=psdc_6396124011_t2_B075WZJL6N&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SD Card Writers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Collection-MicroSD-MicroSDHC-MicroSDXC-Kingston/dp/B01IF7TPMS/ref=sr_1_15?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1518271583&amp;amp;sr=1-15&amp;amp;keywords=Micro+SD+Card+writer&#34;&gt;https://www.amazon.com/Collection-MicroSD-MicroSDHC-MicroSDXC-Kingston/dp/B01IF7TPMS/ref=sr_1_15?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1518271583&amp;amp;sr=1-15&amp;amp;keywords=Micro+SD+Card+writer&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dexter</title>
      <link>/docs/old/iot/dexter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/dexter/</guid>
      <description>
        
        
        &lt;h2 id=&#34;creating-an-sd-card&#34;&gt;Creating an SD Card&lt;/h2&gt;
&lt;h3 id=&#34;macos&#34;&gt;macOS&lt;/h3&gt;
&lt;p&gt;First, install Etcher from &lt;a href=&#34;https://etcher.io/&#34;&gt;etcher.io&lt;/a&gt; which allows
you to flash images onto the SD card. When flashing make sure you only
attach one USB SD card reader/writer or use the build in SD card slot
provided in some Mac&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;The version of etcher we used is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resin-io/etcher/releases/download/v1.1.1/Etcher-1.1.1-darwin-x64.dmg&#34;&gt;Etcher-1.1.1-darwin-x64.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure to check if there is a newer version&lt;/p&gt;
&lt;h3 id=&#34;dexteros&#34;&gt;DexterOS&lt;/h3&gt;
&lt;p&gt;DexterOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dexterindustries.com/dexteros/get-dexteros-operating-system-for-raspberry-pi-robotics&#34;&gt;https://www.dexterindustries.com/dexteros/get-dexteros-operating-system-for-raspberry-pi-robotics&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dexterindustries.com/download/dexteros&#34;&gt;https://www.dexterindustries.com/download/dexteros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pJZURHLeTs0&#34;&gt;&lt;img src=&#34;../images/video.png&#34; alt=&#34;Video&#34;&gt; DexterOS 9:15 Set up SDCard (original Video)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The video is published on the Dexter Web site.&lt;/p&gt;
&lt;h3 id=&#34;dexter-raspbian&#34;&gt;Dexter Raspbian&lt;/h3&gt;
&lt;p&gt;Dexter provides a special image that contains the drivers and sample
programs for the GrovePi shield. We had some issues installing it on a
plain Raspbian OS, thus we recommend that you use dexters version if you
use the GrovePi shield. It is available from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;Google
Drive&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;Sourceforge&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed information on how to generate an SD card while using your OS
is provided at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dexterindustries.com/howto/install-raspbian-for-robots-image-on-an-sd-card&#34;&gt;https://www.dexterindustries.com/howto/install-raspbian-for-robots-image-on-an-sd-card&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;github&#34;&gt;Github&lt;/h3&gt;
&lt;p&gt;Dexter maintains a github repository that includes their code for the
shield and many other projects at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd&#34;&gt;https://github.com/DexterInd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloning-grove-pi&#34;&gt;Cloning Grove PI&lt;/h3&gt;
&lt;p&gt;To clone the GrovePI library on other computers you can use the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/DexterInd/GrovePi.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dexter-sample-programs&#34;&gt;Dexter Sample programs&lt;/h3&gt;
&lt;p&gt;Dexter maintains all GrovePi related programs at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd/GrovePi&#34;&gt;https://github.com/DexterInd/GrovePi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The python related programs are in a subdirectory at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd/GrovePi/tree/master/Software/Python&#34;&gt;https://github.com/DexterInd/GrovePi/tree/master/Software/Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here you find many programs and for a complete list visit that link.
Dependent on the sensors and actuators you have, inspect some programs.
Some of them may inspire you to purchase some sensors.&lt;/p&gt;
&lt;p&gt;We have developed a partial library of GrovePi module classes at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/tree/master/cloudmesh/pi&#34;&gt;https://github.com/cloudmesh/cloudmesh-pi/tree/master/cloudmesh/pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docker</title>
      <link>/docs/old/pi/clusters/pi-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-docker/</guid>
      <description>
        
        
        &lt;p&gt;Docker is a tool that allows us to deploy applications inside of
software containers.  A container allows a developer to package the
application along with dependencies associated with it and put all in
a box which is an isolated environment so that the underlying host
operating system is completely abstracted from the application running
inside the box.&lt;/p&gt;
&lt;p&gt;It is a method of packaging software, to include not only our code,
but also other components such as a full file system, system tools,
services, and libraries. This can be useful for the Raspberry Pi
because it allows users to run applications without lot of steps, as
long as the application is packaged inside of a Docker image. We
simply install Docker and run the container.&lt;/p&gt;
&lt;p&gt;According to the developers of Docker it includes the following
features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;li&gt;Density&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;First we need to make sure the Raspberry Pi is up to date so we can
install a recent version of docker.  The automated script maintained
by the Docker project will create a systemd service file and copy the
relevant Docker binaries into &lt;code&gt;/usr/bin/&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo apt-get update
pi$ curl -sSL https://get.docker.com &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order for us to start the docker daemon at the next boot, we add it
as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo systemctl &lt;span style=&#34;color:#204a87&#34;&gt;enable&lt;/span&gt; docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we reboot, the Docker daemon will start. In case you like to
avoid the first reboot, you can use the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Naturally you do not have to do this after you reboot the next time.&lt;/p&gt;
&lt;p&gt;The Docker client can only be used by &lt;code&gt;root&lt;/code&gt; or members of the
&lt;code&gt;docker&lt;/code&gt; group.  Thus, let us add the user pi (or your equivalent
user) to the docker group using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo usermod -aG docker pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After executing the previous command, we log out of the terminal restart
it so we are sure the user permissions are available in the shell we
use.&lt;/p&gt;
&lt;p&gt;To test docker is installed successfully, we run the &lt;code&gt;hello-world&lt;/code&gt;
docker image with the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If Docker is installed properly, we will see a &lt;code&gt;Hello from Docker!&lt;/code&gt;
message.&lt;/p&gt;
&lt;h2 id=&#34;docker-swarm&#34;&gt;Docker Swarm&lt;/h2&gt;
&lt;p&gt;Swarm is a native clustering and scheduling tool for Docker. Instead
of just managing containers on a single server, we can manage
containers on a set of servers. The containers will be automatically
scheduled on the pool of servers making them appear as a single
resource. We will set up and use Docker on a number of Raspberry Pi&amp;rsquo;s
install Docker on them and register them into a Docker Swarm.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-network-of-pis-with-docker&#34;&gt;Creating a Network of Pi&amp;rsquo;s with docker&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt; section we explained how to set up a network
of Pis. Here we assume that we start from such a network. The Pi&amp;rsquo;s have all
different names, and are registered on the network. Each Pi has the public key
installed from the machine where you will login from for setting up the swarm.&lt;/p&gt;
&lt;p&gt;Let us assume the names of the hosts are stored in a shell variable called&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostnames = (red00 red01 red02 red03 red04)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally, we want to install on these machines docker and register
them to the swarm. A variety of tools exist to simplify this process,
such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parallel shell &lt;a href=&#34;https://github.com/vallard/psh&#34;&gt;https://github.com/vallard/psh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cloudmesh parallel (TODO: find the link)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now we use this simple shell program to install docker on each of
the hosts in the hostnames&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;hostnames&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;red00 red01 red02 red03 red04&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; host in &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hostnames&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[@]&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt;
      ssh pi@&lt;span style=&#34;color:#000&#34;&gt;$host&lt;/span&gt; curl -sSL https://get.docker.com &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this script in a file called &lt;code&gt;docker-install.sh&lt;/code&gt; and set the executable rights with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod u+x docker-install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we execute it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will sequentially install docker on each host. This is not very
efficient and only works for a small number of hosts.&lt;/p&gt;
&lt;h2 id=&#34;registering-the-pi-to-the-swarm&#34;&gt;Registering the Pi to the Swarm&lt;/h2&gt;
&lt;p&gt;Next we need to run on one of the nodes the management node for the
swarm to which all others servers register as workers. Although we
could run on this node als a worker, we will just run the manager on
it as we want to avoid overloading it and make sure it operates
smoothly.&lt;/p&gt;
&lt;p&gt;We select the first host in our hostlist for it called &lt;code&gt;red00&lt;/code&gt; Let us
assume the host has the ipaddress &lt;code&gt;&amp;lt;manager-ip-address&amp;gt;&lt;/code&gt;. We can log
into this computer and execute the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo docker swarm init --advertise-addr &amp;lt;manager-ip-address&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will print out a token that we can use on the workers to
register with our swarm. The token will look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SWMTKN-abc...xyz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us use the term &lt;code&gt;&amp;lt;token&amp;gt;&lt;/code&gt; to indicate the token. To register a
worker a two step process is used.&lt;/p&gt;
&lt;p&gt;If you ever forget the token, you simply can use the following command
on the manager&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker swarm join-token worker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will print out the command that you will have to execute on a worker.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo docker swarm join --token SWMTKN-abc...manager...xyz &amp;lt;manager-ip-address&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To see the list of nodes, you can use the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;I $ sudo docker node ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker-cheat-sheet&#34;&gt;Docker Cheat Sheet&lt;/h2&gt;
&lt;p&gt;The following table is copied from the
&lt;a href=&#34;https://github.com/docker/labs/blob/master/developer-tools/java/chapters/appa-common-commands.adoc&#34;&gt;docker manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.&lt;div class=&#34;smalltable&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Image&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Build an image&lt;/td&gt;
&lt;td&gt;docker image build &amp;ndash;rm=true .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install an image&lt;/td&gt;
&lt;td&gt;docker image pull ${IMAGE}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List of installed images&lt;/td&gt;
&lt;td&gt;docker image ls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List of installed images (detailed listing)&lt;/td&gt;
&lt;td&gt;docker image ls &amp;ndash;no-trunc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove an image&lt;/td&gt;
&lt;td&gt;docker image rm ${IMAGE_ID}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove unused images&lt;/td&gt;
&lt;td&gt;docker image prune&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove all images&lt;/td&gt;
&lt;td&gt;docker image rm $(docker image ls -aq)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Containers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Run a container&lt;/td&gt;
&lt;td&gt;docker container run&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List of running containers&lt;/td&gt;
&lt;td&gt;docker container ls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List of all containers&lt;/td&gt;
&lt;td&gt;docker container ls -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stop a container&lt;/td&gt;
&lt;td&gt;docker container stop ${CID}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stop all running containers&lt;/td&gt;
&lt;td&gt;docker container stop $(docker container ls -q)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List all exited containers with status 1&lt;/td&gt;
&lt;td&gt;docker container ls -a &amp;ndash;filter &amp;ldquo;exited=1&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove a container&lt;/td&gt;
&lt;td&gt;docker container rm ${CID}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove container by a regular expression&lt;/td&gt;
&lt;td&gt;docker container ls -a &lt;code&gt;|&lt;/code&gt; grep gregor &lt;code&gt;|&lt;/code&gt; awk &amp;lsquo;{print $1}&amp;rsquo; &lt;code&gt;|&lt;/code&gt; xargs docker container rm -f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove all exited containers&lt;/td&gt;
&lt;td&gt;docker container rm -f $(docker container ls -a &lt;code&gt;|&lt;/code&gt; grep Exit &lt;code&gt;|&lt;/code&gt; awk &amp;lsquo;{ print $1 }&#39;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove all containers&lt;/td&gt;
&lt;td&gt;docker container rm $(docker container ls -aq)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Find IP address of the container&lt;/td&gt;
&lt;td&gt;docker container inspect &amp;ndash;format &amp;lsquo;{{ .NetworkSettings.IPAddress }}&amp;rsquo; ${CID}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attach to a container&lt;/td&gt;
&lt;td&gt;docker container attach ${CID}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Open a shell in to a container&lt;/td&gt;
&lt;td&gt;docker container exec -it ${CID} bash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get container id for an image by a regular expression&lt;/td&gt;
&lt;td&gt;docker container ls&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Swarm.1&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Your task is is to identify technologies to execute the Installation
in parallel. Suitable technologies include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;psh&lt;/li&gt;
&lt;li&gt;ansible&lt;/li&gt;
&lt;li&gt;puppet&lt;/li&gt;
&lt;li&gt;python threads&lt;/li&gt;
&lt;li&gt;cloudmesh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We like that the class is split up in groups and each group develops this
solution. Naturally you can test this first with not installing docker, but
with a simple command such as &lt;code&gt;uname -a&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Swarm.2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Develop a python cloudmesh command called&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cms swarm config hostnames.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where the yaml file looks something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;manager&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;ip00&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;&amp;lt;ip01&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;&amp;lt;ip02&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;&amp;lt;ip03&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly create other convenient functions such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cms swarm kill&lt;/code&gt;, which kills the swarm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cms swarm ls&lt;/code&gt;, which gives details about the swarm&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Easy Plug</title>
      <link>/docs/old/iot/easyplug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/easyplug/</guid>
      <description>
        
        
        &lt;p&gt;Copied from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.keyestudio.com/index.php/Ks0099_keyestudio_EASY_plug_Control_Board&#34;&gt;http://wiki.keyestudio.com/index.php/Ks0099_keyestudio_EASY_plug_Control_Board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keyestudio Easy-plug control board is a microcontroller board based on
the ATmega328P-PU. It has 14 digital input/outputs (of which 6 can be
used as PWM outputs), 6 analog inputs, a 16 MHz quartz crystal, a USB
connection, a power jack, an ICSP header and a reset button. It
contains everything needed to support the microcontroller; simply
connect it to a computer with a USB cable or power it with a AC-to-DC
adapter or battery to get started.You can tinker with your UNO without
worrying too much about doing something wrong, worst case scenario you
can replace the chip for a few dollars and start over again.  For
convenience of wire connection, we simplify pins GND and VCC into each
plug, so you only need one wire to connect a module, no need to
separately connect the VCC and GND. The pins on the original UNO are
all redesigned into plug interface. On the board, you can find ports
D2-D13, A0 to A5, an IIC port and a COM port. All in one simple plug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/easyplug.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;specifications&#34;&gt;Specifications&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Microcontroller core&lt;/th&gt;
&lt;th&gt;ATmega328P-PU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Working voltage&lt;/td&gt;
&lt;td&gt;+5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;External input voltage&lt;/td&gt;
&lt;td&gt;$+7V - +12V$ (suggested)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;External input voltage  (externum)&lt;/td&gt;
&lt;td&gt;$+6V \leq Vin \leq +20V$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Digital signal I/O interface&lt;/td&gt;
&lt;td&gt;14 (of which 6 provide PWM output)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Analog signal input interface&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DCI/O interface current&lt;/td&gt;
&lt;td&gt;20 mA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FlashMemory&lt;/td&gt;
&lt;td&gt;32KB (ATmega328) of which 0.5 KB used by bootloader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRAM static storage capacity&lt;/td&gt;
&lt;td&gt;2KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EEPROM storage capacity&lt;/td&gt;
&lt;td&gt;1 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EEPROM storage capacity&lt;/td&gt;
&lt;td&gt;16 MHz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;connect&#34;&gt;Connect&lt;/h2&gt;
&lt;p&gt;Tools -&amp;gt; Arduino/Genuine Arduino&lt;/p&gt;
&lt;p&gt;port oon OSX will lock something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dev/cu.usbmodem1461&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;test-code&#34;&gt;Test code&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;int command;
int port;

int pin_from = 5;
int pin_to = 13;

void Light(int pin){
  digitalWrite(pin,HIGH);
  delay(500);
  digitalWrite(pin,LOW);
}

void setup() {
  Serial.begin(9600);
  int i;
  for (i = pin_from; i &amp;lt;= pin_to; i++){
    pinMode(i,OUTPUT);
  }
}


void loop() {
 command=Serial.read();
  if(command==&#39;a&#39;) {
    int i;
    for (i = pin_from; i &amp;lt;= pin_to; i++){
      Light(i);
      Serial.print(&amp;quot;Led &amp;quot;);
      Serial.println(i);
      delay(100);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kit-list&#34;&gt;Kit List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.keyestudio.com/keyestudio-easy-plug-learning-kit-for-arduino-super-makers.html&#34;&gt;http://www.keyestudio.com/keyestudio-easy-plug-learning-kit-for-arduino-super-makers.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/easyplugkit.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Part&lt;/th&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug controller Board&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acrylic Board + Copper bush set&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug cable&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB cable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Piranha LED Module&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Line Tracking Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Infrared obstacle avoidance sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Photo Interrupter Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug PIR Motion Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DS18B20 Temperature Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug IR Receiver Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug IR Transmitter Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Single Relay Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug ADXL345 Three Axis Acceleration Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DHT11 Temperature and Humidity Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug DS3231 Clock Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Analog Gas Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Analog Alcohol Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug MQ135 Air Quality Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug BMP180 Barometric Pressure Sensor&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug Bluetooth Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug 1602 I2C Module&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASY plug I2C 8x8 LED Matrix&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;command-language&#34;&gt;Command Language&lt;/h2&gt;
&lt;p&gt;on PORT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches PORT on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;off PORT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches port off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches all ports on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;off all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switches all ports off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goes serially through ports and switches them on and off&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;String command;


int pin_from = 5;
int pin_to = 13;

String getValue(String data, char separator, int index)
{
  // copied from internet
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i &amp;lt;= maxIndex &amp;amp;&amp;amp; found &amp;lt;= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found &amp;gt; index ? data.substring(strIndex[0], strIndex[1]) : &amp;quot;&amp;quot;;
}

void Light(int pin, int action){
  if (action ==  1) {
    digitalWrite(pin,HIGH);
  } else {
    digitalWrite(pin,LOW);
  }
}

void wait_for_input() {
  while (Serial.available()==0) { }
}

void setup() {
  Serial.begin(9600);
  int i;
  for (i = pin_from; i &amp;lt;= pin_to; i++){
    pinMode(i,OUTPUT);
  }
}


void loop() {

  Serial.print(&amp;quot;command:&amp;quot;);
  wait_for_input();
  command=Serial.readString();
  Serial.println (command);

   if (command==&amp;quot;dance&amp;quot;) {
      for (int i = pin_from; i &amp;lt;= pin_to; i++) {
        Light(i,1);
        delay(100);
        Light(i,0);
        Serial.print(&amp;quot;Led &amp;quot;);
        Serial.println(i);
        delay(100);
      }
    } else {

      int action;
      String action_name = getValue(command, &#39; &#39;, 0);
      String port_name = getValue(command, &#39; &#39;, 1);

      action = action_name == &amp;quot;on&amp;quot;;

      if (port_name == &amp;quot;all&amp;quot;) {
        for (int i = pin_from; i &amp;lt;= pin_to; i++){
          Light(i,action);
          Serial.print(&amp;quot;Led &amp;quot;);
          Serial.println(i);
        }
      } else {
        int port = port_name.toInt();

        Serial.println(action);
        Serial.println(port);
        Light(port, action);
     }
  }
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: ESP8266</title>
      <link>/docs/old/iot/esp8266/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/esp8266/</guid>
      <description>
        
        
        &lt;p&gt;When working with a external hardware such as the NodeMCU you will find
a lot of information on the internet about it. It is a bit difficult at
times to assess what you need to program it. You are exposed to many
choices. A NodeMCU typically comes with Lua. However you have many other
choices. Such choices include multiple programming languages such as
Lua, MicroPython, Arduino/C, Go and others.&lt;/p&gt;
&lt;p&gt;As all of them are slightly different you need to identify which works
best for you. In addition you need to install images, programs and
libraries that support your specific language choice.&lt;/p&gt;
&lt;p&gt;For our first experiments we will be using MicroPython. This choice is
motivated by the fact that Python is a well established and easy to
learn programming language. Recently many educational institutions are
offering Python as an introductory programming language making this
choice even mor compelling&lt;/p&gt;
&lt;p&gt;To simplify the setup and use of the esp8266 for MicroPython we
developed an easy to use commandline tool that allows users to set up
their computer and interact more easily with the board. We believe that
the interface is so simple that it can also be used in STEM activities
and not just in the university or by advanced hobbyists.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;In this section we discuss the various ways on how to set up the esp8266
&lt;code&gt;cloudmesh.robot&lt;/code&gt; development environment. You have several options to
install it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Option A: OSX with scripts hosted on github (recommended)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option B: OSX from source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option C: Explore your own&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While we provide here a detailed option for OSX, you are free to explore
other operating systems. We know that it can for example be installed on
Ubuntu 16.04. We have not tested any of this on a Windows machine.&lt;/p&gt;
&lt;p&gt;We like to get feedback and Installation instructions.&lt;/p&gt;
&lt;h2 id=&#34;option-a-osx-install-from-a-script&#34;&gt;Option A: OSX install from a Script&lt;/h2&gt;
&lt;p&gt;For OSX we have created two scripts that you will need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cloudmesh.github.io/get/robot/osx/system/&#34;&gt;system.sh&lt;/a&gt;, that
installs pip, ansible, homebrew, xcode, virtualenv, readline, wget,
lua, picocom, mosquito, aquamacs, pycharm, numpy, matplotlib,
libusb, USB drivers for selkected esp8266 (ch34x chip)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cloudmesh.github.io/get/robot/osx/user&#34;&gt;user.sh&lt;/a&gt;, that
installs matplotlib, virtualenv, and the cloudmesh source in
~/github&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend that you review these scripts carefully before you use them
and check if they fit your needs. If they do not, please just download t
hem and adapt them to your needs. The &lt;strong&gt;system&lt;/strong&gt; script must be ran on
an &lt;strong&gt;Administrator&lt;/strong&gt; account as it requires sudo privileges. The
&lt;strong&gt;user&lt;/strong&gt; script must be ran on a &lt;strong&gt;User&lt;/strong&gt; account. We do not recommend
to run the IoT software in an administrative account due to security
best practices. To execute the &lt;strong&gt;system&lt;/strong&gt; script, type in the
&lt;em&gt;Administrator account&lt;/em&gt; terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -fsSL http://cloudmesh.github.io/get/robot/osx/system &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As earlier versions of pip may have some issues, this script will also
update pip and setuptools to a newer version&lt;/p&gt;
&lt;p&gt;To execute the &lt;strong&gt;user&lt;/strong&gt; script, type in the User account terminal&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -fsSL http://cloudmesh.github.io/get/robot/osx/user &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Together these scripts allow you to install in a simple way development
tools for our IoT activities.&lt;/p&gt;
&lt;p&gt;The following steps are to be executed in the user environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;em&gt;the scripts do not update pip and setuptools, which may be
required due to a bug in setuptools prior to version 34 for setuptools.
You may have to repeat the update on any pyenv environment that you use.
How to do thi sis documented in a later section.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To simplify use, we recommend that you make the following additions to
your &lt;code&gt;~/.bash_profile&lt;/code&gt; file so that python 3 is automatically activated,
but does not interfere with the system installed python. Use the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ emacs ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or your favourite editor to edit the file and add the following lines at
the end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#######################################################################&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# PYENV&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;######################################################################&lt;/span&gt;
open_emacs&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# open -na Aquamacs $*&lt;/span&gt;
    open -a Aquamacs &lt;span style=&#34;color:#000&#34;&gt;$*&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;open_emacs

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;########################################################&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# PYENV&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;########################################################&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PYENV_VIRTUALENV_DISABLE_PROMPT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv init -&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
__pyenv_version_ps1&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ret&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$?&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv version-name&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[[&lt;/span&gt; ! -z &lt;span style=&#34;color:#000&#34;&gt;$output&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]]&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$output&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$ret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;\$(__pyenv_version_ps1) &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ENV3&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;pyenv activate ENV3&amp;#34;&lt;/span&gt;
ENV3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you start a new terminal you can edit files via aquamacs by typing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ e FILENAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where FILENAME is the name of the file you like to edit. However the
file must exists, which you can simply do with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;touch FILENAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the following lines at the end of the file&lt;/p&gt;
&lt;p&gt;To learn more about how to you automate the setup of an OSX machine, you
may be inspired by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ricbra/dotfiles/blob/master/bin/setup_osx&#34;&gt;https://github.com/ricbra/dotfiles/blob/master/bin/setup_osx&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible&#34;&gt;https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setting-up-git&#34;&gt;Setting Up Git&lt;/h3&gt;
&lt;p&gt;Sooner or later you will be using git. We recommend that you set your
identity on all computers that you will be using. To do this adapt the
following example according to your github.com identity that you have.
IF you do not, its time to greater one at github.com and follow the
directions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global user.name &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Gregor von Laszewski&amp;#34;&lt;/span&gt;
$ git config --global user.email laszewski@gmail.com
$ git config --global core.editor emacs
$ git config --global push.default matching
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;option-b-setup-from-pip&#34;&gt;Option B: setup from pip&lt;/h2&gt;
&lt;p&gt;We have removed the pip setup instructions as they do not include
installing the drivers.&lt;/p&gt;
&lt;h2 id=&#34;option-b-install-cloudmesh-robot-from-source&#34;&gt;Option B: Install Cloudmesh Robot from source&lt;/h2&gt;
&lt;p&gt;Developers that already have a development environment (e.g. xcode is
installed) can install cloudmesh robot also from the terminal while
downloading the source. You will need to first obtain the source and
compile it with the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir github
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; github
$ git clone https://github.com/cloudmesh/cloudmesh.common.git
$ git clone https://github.com/cloudmesh/cloudmesh.cmd5.git
$ git clone https://github.com/cloudmesh/cloudmesh.robot.git
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; cloudmesh.robot
$ make &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test out if the command has been installed, type&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot welcome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything works you should see an ASCII image of R2D2 and C3PO.
Next, we still have to install some additional programs before you can
use other commands.&lt;/p&gt;
&lt;p&gt;Once you have installed cloudmesh robots you well be able to install a
number of tools automatically with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot osx install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install services and tools including xcode, homebrew, macdown,
pycharm, and aquamacs. If you have some these tools already installed
it will skip the Installation process for a particular tool. Please note
that some of the tools require root access and thus you must be able to
have access to sudo to run them from our tool. In addition you will need
to install the OSX driver for the USB interface to the esp8266. This is
achieved with (only to be done if you follow the install from source
option)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot osx driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now please change your account to be again a standard account.&lt;/p&gt;
&lt;p&gt;Now you &lt;strong&gt;MUST REBOOT&lt;/strong&gt; the machine. Without rebooting you will not be
able to use the USB drivers.&lt;/p&gt;
&lt;h2 id=&#34;option-c-a-possible-setup-for-linux&#34;&gt;Option C: A possible setup for Linux&lt;/h2&gt;
&lt;p&gt;On a linux computer we recommend that you install emacs, cmake and
configure your git. Replace the user name and e-mail with the once that
you used to register your account in git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir github
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; github
$ git clone https://github.com/cloudmesh/cloudmesh.robot.git
$ ssh-keygen
$ sudo apt-get install -y emacs
$ sudo apt-get install -y cmake
$ sudo apt-get install -y libqt4-dev
$ git config --global user.name &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Gregor von Laszewski&amp;#34;&lt;/span&gt;
$ git config --global user.email laszewski@gmail.com
$ git config --global core.editor emacs
$ git config --global push.default matching
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This setup is highly incomplete and does not include the setup of the
USB drivers. Please help us completing the documentation.&lt;/p&gt;
&lt;h3 id=&#34;option-c-a-possible-setup-for-windows&#34;&gt;Option C: A possible setup for Windows&lt;/h3&gt;
&lt;p&gt;We do not have tried to set this up on Windows or a virtualbox running
Linux under windows. If you have tried it, please let us know. If you
have difficulties just use a raspberry PI and skip the IoT projects&lt;/p&gt;
&lt;h3 id=&#34;option-c-installation-of-the-cloudmeshrobot-interface-via-pip&#34;&gt;Option C: Installation of the cloudmesh.robot Interface via Pip&lt;/h3&gt;
&lt;p&gt;.. warning:: this option does not include installing the USB drivers.
You have to install them first. See examples on how to do that in our
install scripts. Generally what we do in our user.sh script is the same
way, but also includes the setup of python 3.6.1.&lt;/p&gt;
&lt;p&gt;To more easily interface with the robot we have developed a convenient
program that is installed as part of a command tool called cloudmesh.&lt;/p&gt;
&lt;h3 id=&#34;install-cloudmesh-robot-with-pip-not-working&#34;&gt;Install Cloudmesh Robot with Pip (not working)&lt;/h3&gt;
&lt;p&gt;Note that pip may not include the newest version of cloudmesh.robot and
we recommend you use the source install instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip install cloudmesh.robot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install a program &lt;code&gt;cms&lt;/code&gt; on your computer that allows you to
easily communicate with the robot.&lt;/p&gt;
&lt;h2 id=&#34;using-cloudmesh-robot&#34;&gt;Using cloudmesh robot&lt;/h2&gt;
&lt;p&gt;Once you have successfully installed the drivers and the commands you
can look at the manual page of the robot command with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot &lt;span style=&#34;color:#204a87&#34;&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will see a manual page like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage:
   robot welcome
   robot osx install
   robot osx driver
   robot image fetch
   robot probe [--format=FORMAT]
   robot flash erase [--dryrun]
   robot flash python [--dryrun]
   robot test
   robot run PROGRAM
   robot credentials set SSID USERNAME PASSWORD
   robot credentials put
   robot credentials list
   robot login
   robot set PORT NOT IMPLEMENTED
   robot ls [PATH]
   robot put [-o] SOURCE [DESTINATION]
   robot get PATH
   robot rm PATH
   robot rmdir PATH
   robot dance FILE IPS
   robot inventory list [--cat] [--path=PATH] [ID]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testing-the-board&#34;&gt;Testing the board&lt;/h3&gt;
&lt;p&gt;Before you can use you ESP8266, you must have the appropriate drivers
installed on your computer. Click on &lt;a href=&#34;https://github.com/cloudmesh/cloudmesh.robot/blob/7859b395fd15e4d6ced679b05893c9a91957c956/documentation/source/espdrivers.md&#34;&gt;this
link&lt;/a&gt;
and follow the instructions on how to install these drivers.&lt;/p&gt;
&lt;p&gt;Next is to connect a esp8266 with a USB cable to the computer. The
ESP8266 should look similar to this.&lt;/p&gt;
&lt;p&gt;After you connected it, press the reset button. Before doing anything on
the board, we must test it. Once you have plugged it in, execute the
following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot probe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command takes about ten seconds to execute. The ESP8266&amp;rsquo;s led
should flash irregularly as it is probed. When the probe is finished, an
image similar to the following should appear in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    +-----------+---------------------------+
    | Attribute | Value                     |
    +-----------+---------------------------+
    | chipid    | b&#39; 0x00d0f9ec&#39;            |
    | mac       | b&#39; 00:10:FA:6E:38:4A&#39;     |
    | tty       | /dev/tty.wchusbserial1410 |
    +-----------+---------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please note that you should only have one board attached to your
computer.&lt;/p&gt;
&lt;h4 id=&#34;flashing-the-image-onto-the-robot-board&#34;&gt;Flashing the image onto the robot board&lt;/h4&gt;
&lt;p&gt;Next we need to flash the image on the robot board. Naturally we need to
fetch the image first from the internet. We do this with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot image fetch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will fetch an image that contains MicroPython into your local
directory.&lt;/p&gt;
&lt;p&gt;Next we need to &lt;em&gt;flash&lt;/em&gt; the image on the board.&lt;/p&gt;
&lt;p&gt;Before you begin, make sure that the ESP8266 is connected to your
computer. The board may come with a pre-installed image such as Lua or
some custom image from the vendor. In order to write programs in python,
we need to the chips to run micropython. To get micropython on our
ESP8266&amp;rsquo;s, a number of steps are required.&lt;/p&gt;
&lt;h4 id=&#34;erase-the-chip&#34;&gt;Erase the chip&lt;/h4&gt;
&lt;p&gt;First we need to erase the chip.&lt;/p&gt;
&lt;p&gt;Run the following command in your terminal terminal, and then &lt;strong&gt;stop.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash erase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your terminal should respond with the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/dev/tty.SLAB_USBtoUART
Please press the right buttons
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;continue&lt;/span&gt;? &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Y/n&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before taking any further steps, press both buttons on the ESP8266 at
the same time. Once you have done this, type &lt;code&gt;Y&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;. The
process should take under ten seconds to complete.&lt;/p&gt;
&lt;h4 id=&#34;putting-python-on-the-chip&#34;&gt;Putting Python on the chip&lt;/h4&gt;
&lt;p&gt;Before proceeding, you must once again press both of the buttons on the
ESP8266. Once this is done, you are ready to flash the chip with python
with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;testing-if-it-works&#34;&gt;Testing if it works&lt;/h4&gt;
&lt;p&gt;To test running a python program execute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be careful as it overwrites the file &lt;code&gt;test.py&lt;/code&gt;. If the ESP8266 is set up
properly, it should return this in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Count to 3
1
2
3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;execute-an-arbitrary-program&#34;&gt;Execute an arbitrary program&lt;/h4&gt;
&lt;p&gt;Lets assume you have placed a program in the file &lt;code&gt;prg.py&lt;/code&gt; with the
command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot put prg.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must reboot the ESP8266 before using a new program. This can be done
manually by pressing the reset button on the chip, or in terminal with
the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the chip is reset, you can run &lt;code&gt;prg.py&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot run prg.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;interactive-python-shell-on-the-board&#34;&gt;Interactive Python shell on the board&lt;/h4&gt;
&lt;p&gt;To get into the interactive python shell on the board you need to reset
the ESP8266 and run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cleaning-an-reinstalling-a-development-version&#34;&gt;Cleaning an reinstalling a development version&lt;/h4&gt;
&lt;p&gt;IN case you are a developer and you need to modify the source code, we
found that it is sometimes necessary to clean your development directory
and libraries. The easiest way to do this is to go to the repository
that you like to reinstall. Let us assume it is &lt;em&gt;cloudmesh.robot&lt;/em&gt;. Than
the following commands will clean the repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; cloudmesh.robot
$ pip uninstall cloudmesh.robot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do the pip uninstall as many times till you see an error that no more
cloudmesh.robot versions can be found. Than execute&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ make clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this you can reinstall it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python setup.py install&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the -e flag is optional, but allows you to change the code without the
need of recompiling. A very useful feature in python.&lt;/p&gt;
&lt;h4 id=&#34;nodemcu-esp12-dev-kit-pin-definition&#34;&gt;NodeMCU ESP12 Dev Kit Pin Definition&lt;/h4&gt;
&lt;p&gt;For V1.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/nodemcu.png&#34; alt=&#34;nodemcu&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;p&gt;The GPIO numbers of teh NodeMCU, do not correspond with the actual
numbers used in micropython&amp;rsquo;s pin library. The numbers are as follows:&lt;/p&gt;
&lt;p&gt;Pin/GPIO   NodeMCU&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;15         D8&lt;/p&gt;
&lt;h4 id=&#34;led&#34;&gt;LED&lt;/h4&gt;
&lt;h5 id=&#34;program&#34;&gt;Program&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OUT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;high&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;low&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;


&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OUT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;high&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;low&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;esp8266_bb&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;png&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;){&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;50%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;led&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;esp8266_schem&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;png&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;){&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;50%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;##### Real Time Clock&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;library&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;urtc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;py&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;


&lt;span style=&#34;color:#4e9a06&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bash&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;wget&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;raw&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;githubusercontent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;adafruit&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Adafruit&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uRTC&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;urtc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Place it on the esp8266&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot put urtc.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Connect the board the following pins&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SDA to pin 5 = D1
SCL to pin 4 = D2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Login to the board&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute the following code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;i2c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;I2C&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sda&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;scl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;machine&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;i2c&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;87&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;104&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;urtc&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DS3231&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DS3231&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i2c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;               &lt;span style=&#34;color:#000&#34;&gt;DateTimeTuple&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;year&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;month&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;day&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;                                                &lt;span style=&#34;color:#000&#34;&gt;weekday&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hour&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;minute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;                                                &lt;span style=&#34;color:#000&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;53&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;millisecond&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assignment: Create an object oriented class and fill out the details
while using code from &lt;code&gt;urtc.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Clock&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sda&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;scl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__str__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Clock&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ https://github.com/adafruit/Adafruit-uRTC/blob/master/urtc.py
$ git clone https://github.com/adafruit/Adafruit-uRTC.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;alternative-boards&#34;&gt;Alternative boards&lt;/h3&gt;
&lt;h4 id=&#34;huzzah-feather-esp8266&#34;&gt;HUZZAH Feather esp8266&lt;/h4&gt;
&lt;p&gt;Many different 8266 based alternative boards exist. One of these boards
is the HUZZAH Feather. IT behaves the same as the other boards, but ay
be using different drivers and USB ports. The &lt;em&gt;cms robot&lt;/em&gt; command line
tool is clever enough to identify automatically if it is attached and
uses the appropriate settings. More documentation about this board can
be found at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/adafruit-feather-huzzah-esp8266/using-nodemcu-lua&#34;&gt;doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This site has also many other examples and you can search for them with
keywords such as feather, esp8266, micropython.&lt;/p&gt;
&lt;p&gt;An example on how to use the LED on the &lt;em&gt;feather&lt;/em&gt; is documented at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/micropython-basics-blink-a-led/blink-led&#34;&gt;Feather HUZZAH
ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To place micropython on the feather you can plug in the to the usb port.
The good thing about this board is that you do not need to press any
buttons as it detects the upload nicely. If not make sure to reset it or
for flashing press both buttons. You can do the following:&lt;/p&gt;
&lt;p&gt;Probe the board with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot probe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Erasing the feather is simple as it has a build in mechanism to detect if
it is going to be erased. Hence no reset button needs to be pressed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot flash erase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get the python image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot fetch python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flashing is conducted with 460800 baud, it will take about 15 seconds.
After flashing you should try to login:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cms robot login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the boudrate to 115200:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    CTRL-A CTRL-B&amp;gt;

    *** baud:
    ```

type in:

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;115200 &amp;lt;ENTER&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Make sure that echo is switched to OFF:

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;CTRL-A CTRL-C
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;toggles it. Now you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try typing in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    print(&amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;appendix&#34;&gt;Appendix&lt;/h3&gt;
&lt;h3 id=&#34;installing-esp8266-usb-drivers&#34;&gt;Installing ESP8266 USB drivers&lt;/h3&gt;
&lt;p&gt;We provide here a section to explain which drivers we have tested on
various esp8266. Please note that if you have different versions you may
need different drivers. On OSX we found that we get good results with
the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew tap mengbo/ch340g-ch34g-ch34x-mac-os-x-driver https://github.com/mengbo/ch340g-ch34g-ch34x-mac-os-x-driver
$ brew cask install wch-ch34x-usb-serial-driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start a new terminal after the driver has finished installing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget http://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip
$ unzip Mac_OSX_VCP_Driver.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Click on the driver install file contained inside the zip file and the
driver should start installing. Once the driver has finished installing,
make sure to start a new terminal.&lt;/p&gt;
&lt;p&gt;Please remember that you need to close all terminals, as well as reboot
the computer to use the drivers. They will typically not work if you
have not rebooted.&lt;/p&gt;
&lt;p&gt;For other boards that also use the CH340G chip the following page may
help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html&#34;&gt;http://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Exercise</title>
      <link>/docs/old/pi/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/exercise/</guid>
      <description>
        
        
        &lt;h2 id=&#34;single-raspberry-pi-temperature&#34;&gt;Single Raspberry Pi Temperature&lt;/h2&gt;
&lt;p&gt;You have been presented in Section
&lt;a href=&#34;#cluster-case-with-cooling-5-pi&#34;&gt;Cluster Case With Cooling (5 Pi)&lt;/a&gt;
with a table that
compares temperatures. Your task is to identify issues with the
experiment and the table. Furthermore we like you to rerun a
temperature experiment in the entire class.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get a PI3 model B, an HDMI cable, a power supply, a case. Such a
configuration is listed in the IoT section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Buy or manufacture a case of your choice. You can use a 3d-printer
if you have one available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conduct a temperature experiment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Discussion of these assignment is to be executed openly in class. Points
will be issued only once the class agrees upon an experiment.&lt;/p&gt;
&lt;p&gt;This exercise is not only to learn about the behavior of the Pi, but
also about how to coordinate experiments with a large number of
students.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Pi.Single.1&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;What temperature measurement is missing from the table.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Single.2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;How would you create an experiment under &lt;em&gt;load&lt;/em&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Single.3&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;How would you create an experiment to which all students in
different classes could contribute their values? Can the cloud be
used?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Single.4&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Collect the information from all class members using cloud services.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Single.5&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Identify how to use the VPN server so you can use your Laptop
instead of a TV or computer monitor. Write a section&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;small-pi-cluster&#34;&gt;Small Pi Cluster&lt;/h2&gt;
&lt;p&gt;In this set of exercises we will be building a small Raspberry Pi
cluster. All of you will have to do exercise Pi.Cluster.Build as well
as one of the tasks related to Swarm, kubernetes or Spark.&lt;/p&gt;
&lt;p&gt;It is important that you write down all steps very carefully as you are
expected to use the steps to develop an automated deployment. For your
cluster. Your section will be tested by other groups and easy of
installation completeness, and correctness will be evaluated. Teams that
find issues and improve deployment sections will receive points. TA&amp;rsquo;s
will also replicate these steps to identify a fair evaluation without
bias.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Pi.Cluster.Build&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Build groups of up to 5 people. Make a plan on what needs to be done
to build the cluster and develop a schedule.  Include in this plan (a)
obtaining the material the hardware build, (b) the installation of the
operating system (c) the testing of the system (d) familiarizing with
the OS.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Cluster.DockerSwarm&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Install a docker Swarm cluster on your PI. Develop a section in
markdown and mind plagiarism. Contribute your section to this
document to get acknowledged and credit. Work with others in class to
coordinate a single section.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Cluster.Kubernetes&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Install a kubernetes cluster on your PI. Develop a section in
markdown and mind plagiarism. Contribute your section to this
document to get acknowledged and credit. Work with others in class to
coordinate a single section.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.Cluster.Spark&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Install a spark cluster on your PI. Develop a section in markdown
and mind plagiarism. Contribute your section to this document to get
acknowledged and credit. Work with others in class to coordinate a
single section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;cluster-case&#34;&gt;Cluster Case&lt;/h2&gt;
&lt;p&gt;In this exercise you will be designing a cluster case so you can put
the Pi&amp;rsquo;s in a professional looking case that also protects the
equipment.&lt;/p&gt;
&lt;p&gt;It will be up to you to decide upon the form factor of the case.
Please consult with the appropriate sections as you will need to fit
in not only the Pi&amp;rsquo;s but also the parts.&lt;/p&gt;
&lt;p&gt;Please use OpenSCAD as basis. You may also try FreeCAD.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;PI.case.ClusterHat&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Design a case for the Cluster Hat&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PI.case.5&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Design a case&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;PI.case.n&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Please reuse the Pi.Case.5 as basis, e.g. it is a shelf in which we
place the cases. Make sure to organize power and allow for easy
access to the cases and the pis within the case.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;cluster-case-lego&#34;&gt;Cluster Case Lego&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Pi.lego 1&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;count the connectors and make a more accurate calculation&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.lego 2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;design a frame in which the Pi&amp;rsquo;s can be placed in groups of 5.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Pi.lego.3&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;design a cluster case for the raspberry PI with LDD
&lt;a href=&#34;https://www.lego.com/en-us/ldd&#34;&gt;https://www.lego.com/en-us/ldd&lt;/a&gt;. You do not have to buy the pieces,
but just provide the design.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Fortan</title>
      <link>/docs/old/pi/fortran/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/fortran/</guid>
      <description>
        
        
        &lt;p&gt;Although this section is not about parallel programming, you may find
still that many scientific programs are written in fortran. For some
smaller fortran programs it is even possible to run them on a
Raspberry pi. Naturally you will need to install a fortran compiler,
which you can do with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo apt-get install gfortran
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test it out store the following program into &lt;code&gt;hello.f90&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fortran&#34; data-lang=&#34;fortran&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;program &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;end program &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can compile it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ gfortran -o hello hello.f90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ hello
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: GrovePi Modules</title>
      <link>/docs/old/iot/grovepi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/grovepi/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.instructables.com/id/Basic-Electronics&#34;&gt;Electronics&lt;/a&gt;: An
introduction to the basic principals of electronics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.sparkfun.com/tutorials/voltage-current-resistance-and-ohms-law&#34;&gt;Voltage&lt;/a&gt;:
An introduction to the physics of electricity.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://info-ee.eps.surrey.ac.uk/Teaching/Unix/index.html&#34;&gt;Unix&lt;/a&gt;:
An introduction to the Unix os.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd/GrovePi/tree/master/Software/Python&#34;&gt;grove
examples&lt;/a&gt;:
A list of Dexter Industries example code for GrovePi modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/tree/master/cloudmesh/pi&#34;&gt;GrovePi module
classes&lt;/a&gt;:
A repository for the GrovePi module classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;led&#34;&gt;LED&lt;/h2&gt;
&lt;p&gt;An LED is the simplest possible module for a raspberry pi, as it is
responsive only to the provided power. For an LED to emit light, it must
be exposed to a voltage greater than a certain threshold value. Above
this voltage, the conductivity of the diode increases exponentially and
its brightness increases likewise. If the current through the LED
becomes too high, the LED will burn out. The following link leads to a
tutorial from Dexter Industries for the LED module.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dexterindustries.com/GrovePi/projects-for-the-raspberry-pi/raspberry-pi-led-tutorial/&#34;&gt;Dexter LED
tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connect the LED to a digital port (see @fig:grove-led). The following code describes an LED
class. Since it is connected to a digital output, the voltage has only
two states, on and off. The default port for the LED class is D3. The
code for the &lt;code&gt;LED&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/led.py&#34;&gt;LED
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/led.jpg&#34; alt=&#34;LED&#34;&gt;{#fig:grove-led}&lt;/p&gt;
&lt;h2 id=&#34;buzzer&#34;&gt;Buzzer&lt;/h2&gt;
&lt;p&gt;The buzzer is shown in @fig:grove-buzzer.  Connect the buzzer to a
digital port. The default port for the Buzzer class is D3. You will
notice that the Buzzer class and the LED class are
interchangeable. This is because they work on the same digital
principal. Their two values are on and off. The code for the &lt;code&gt;Buzzer&lt;/code&gt;
class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/buzzer.py&#34;&gt;Buzzer
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/buzzer.jpg&#34; alt=&#34;Buzzer&#34;&gt;{#fig:grove-buzzer}&lt;/p&gt;
&lt;h2 id=&#34;relay&#34;&gt;Relay&lt;/h2&gt;
&lt;p&gt;The relay is shown in @fig:grove-relay.  The relay acts as a switch
in a circuit. When the value on the relay is 1, it allows current to
flow through it. When the value is 0, the relay breaks the circuit and
the current stops. Connect the relay to a digital port. The default
digital port is D4. The &lt;code&gt;Relay&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/relay.py&#34;&gt;Relay
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/relay.jpg&#34; alt=&#34;Relay&#34;&gt;{#fig:grove-relay}&lt;/p&gt;
&lt;h2 id=&#34;light-sensor&#34;&gt;Light Sensor&lt;/h2&gt;
&lt;p&gt;The light sensor is shown in @fig:grove-light-sensor.  The light
sensor measures light intensity and returns a value between 0
and 1023. Connect the light sensor to an analog port. The default port
is A0. The analog port allows the light sensor to return a range of
values. The &lt;code&gt;LightSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/light.py&#34;&gt;LightSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/light.jpg&#34; alt=&#34;Light Sensor&#34;&gt;{#fig:grove-light-sensor}&lt;/p&gt;
&lt;h2 id=&#34;rotary-angle-sensor&#34;&gt;Rotary Angle Sensor&lt;/h2&gt;
&lt;p&gt;The rotary angle sensor is shown in @fig:grove-rotary-angle-sensor.
The rotary angle sensor measures the angle to which it is turned.
Connect the sensor to an analog port. Port A0 is the default. The
&lt;code&gt;RotarySensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/rotary.py&#34;&gt;RotarySensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/rotary.jpg&#34; alt=&#34;Rotary Angle Sensor&#34;&gt;{#fig:grove-rotary-angle-sensor}&lt;/p&gt;
&lt;h2 id=&#34;barometer&#34;&gt;Barometer&lt;/h2&gt;
&lt;p&gt;The barometer is shown in @fig:grove-barometer.  Connect the
barometer to an I2C port. In addition to pressure, the GrovePi
barometer measures temperature in Fahrenheit and Celsius. The
&lt;code&gt;Barometer&lt;/code&gt; class can be found here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/barometer.py&#34;&gt;Barometer
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/barometer.jpg&#34; alt=&#34;Barometer&#34;&gt;{#fig:grove-barometer}&lt;/p&gt;
&lt;h2 id=&#34;distance-sensor&#34;&gt;Distance Sensor&lt;/h2&gt;
&lt;p&gt;The distance sensor is shown in @fig:grove-distance-sensor.  Connect
the distance sensor to a digital port. The grovepi module has a
built-in function to read the distance from the distance sensor, but
it is improperly calibrated, so this DistanceSensor class has a
calibration based on experimental data. The &lt;code&gt;DistanceSensor&lt;/code&gt; class can
be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/distance.py&#34;&gt;DistanceSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/distance.jpg&#34; alt=&#34;Distance Sensor&#34;&gt;{#fig:grove-distance-sensor}&lt;/p&gt;
&lt;h2 id=&#34;temperature-sensor&#34;&gt;Temperature Sensor&lt;/h2&gt;
&lt;p&gt;The temperature sensor is shown in @fig:grove-temperature-sensor.
The temperature sensor measures both temperature and humidity. Connect
the temperature sensor to a digital port. D7 is the default port. The
&lt;code&gt;TemperatureSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/temperature.py&#34;&gt;TemperatureSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/temperature.jpg&#34; alt=&#34;Temperature Sensor&#34;&gt;{#fig:grove-temperature-sensor}&lt;/p&gt;
&lt;h2 id=&#34;heartbeat-sensor&#34;&gt;Heartbeat Sensor&lt;/h2&gt;
&lt;p&gt;the heartbeat sensor is shown in @fig:grove-heartbeat.  Connect the
heartbeat sensor to an I2C port. The heartbeat sensor returns the
heart rate of the wearer. The &lt;code&gt;HeartbeatSensor&lt;/code&gt; class can be found
here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/heartbeat.py&#34;&gt;HeartbeatSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/heartbeat.jpg&#34; alt=&#34;Heartbeat Sensor&#34;&gt;{#fig:grove-heartbeat}&lt;/p&gt;
&lt;h2 id=&#34;joystick&#34;&gt;Joystick&lt;/h2&gt;
&lt;p&gt;The joystick is shown in @fig:grove-joystick.  Connect the joystick
to an analog port. A0 is the default port. The joystick has an x, y,
and click status based on the current state of the module. The
&lt;code&gt;Joystick&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/joystick.py&#34;&gt;Joystick
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/joystick.jpg&#34; alt=&#34;Joystick&#34;&gt;{#fig:grove-joystick}&lt;/p&gt;
&lt;h2 id=&#34;lcd-screen&#34;&gt;LCD Screen&lt;/h2&gt;
&lt;p&gt;The LCD screen is shown in @fig:grove-lcd.  The LCD screen can be
used to display text and colors. In order to use it, plug it into one
of the I2C ports. The &lt;code&gt;LCD&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/lcd.py&#34;&gt;LCD
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/lcd.jpg&#34; alt=&#34;LCD Screen&#34;&gt;{#fig:grove-lcd}&lt;/p&gt;
&lt;h2 id=&#34;moisture-sensor&#34;&gt;Moisture Sensor&lt;/h2&gt;
&lt;p&gt;The moisture sensor is shown in @fig:grove-moisture-sensor.  Connect
the moisture sensor to an analog port. The default port is A0.  The
&lt;code&gt;MoistureSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/moisture.py&#34;&gt;MoistureSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/moisture.jpg&#34; alt=&#34;Moisture Sensor&#34;&gt;{#fig:grove-moisture-sensor}&lt;/p&gt;
&lt;p&gt;An example of the implementation of the moisture sensor from Dexter
Industries can be found
&lt;a href=&#34;https://github.com/DexterInd/GrovePi/blob/master/Projects/plant_monitor/plant_project.py&#34;&gt;here&lt;/a&gt;.
The program is meant to measure the environmental conditions that affect
plant growth.&lt;/p&gt;
&lt;h2 id=&#34;water-sensor&#34;&gt;Water Sensor&lt;/h2&gt;
&lt;p&gt;The water sensor is shown in @fig:grove-water-sensor.  The water
sensor measures the amount of water in the environment of the
sensor. Connect the sensor to a digital point. D2 is the default port.
The &lt;code&gt;WaterSensor&lt;/code&gt; class can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/master/cloudmesh/pi/water.py&#34;&gt;WaterSensor
Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/water.jpg&#34; alt=&#34;Water Sensor&#34;&gt;{#fig:grove-water-sensor}&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Hardware for IoT Projects</title>
      <link>/docs/old/iot/hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/hardware/</guid>
      <description>
        
        
        &lt;p&gt;When teaching programming you may find yourself in a situation that
things can be done on your computer, but you may not want to install
programs that help you to learn programming on your computer. However,
we have a solution (or several) for you. We will have some fun with
hardware for IoT that at the same time can be used to teach you some
very elementary skills in programming. However, if you would rather use
your computer you certainly can do this too.&lt;/p&gt;
&lt;p&gt;We see the following arguments for using IoT hardware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You will have fun with inexpensive hardware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will get hands on experience with IOT devices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will learn how to program in python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can keep your current computer unchanged&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will get experience with two platforms esp8266 and Raspberry PI
3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can customise your choices by conducting some fun projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have the opportunity to find alternative hardware choices such
as the WiPy or the ESP32. You may find cheaper or better
alternatives if you buy kits when they are available. And learn in
getting an overview about such devices and kits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Ordering from overseas suppliers may take significant time, so
make sure to plan ahead. Prices given here are done to provide an
estimate, they may vary.&lt;/p&gt;
&lt;h2 id=&#34;raspberry-pi-3&#34;&gt;Raspberry Pi 3&lt;/h2&gt;
&lt;p&gt;The raspberry PI 3 is a very good development platform. With its base
price of $35 it is quite a bargain. You will need some additional
components to make sure you can use it. Please be reminded to never
connect or power the raspberry with your computers USB port. It draws
some significant amperage and we do not want you to destroy your
computer. We recommend that you buy a certified power adapter. The price
is so cheap that you could even create your own mini cluster as a
project. We do not recommend any older versions of Raspberry as they are
less powerful and do not contain built-in Bluetooth or WiFi.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Configuration:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$37.50 &lt;a href=&#34;https://www.amazon.com/Raspberry-Model-A1-2GHz-64-bit-quad-core/dp/B01CD5VC92/ref=sr_1_1?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1499251061&amp;amp;sr=1-1&amp;amp;keywords=raspberry+pi+3&#34;&gt;Pi
3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$7.69
&lt;a href=&#34;https://www.amazon.com/Eleduino-Raspberry-Model-Acrylic-Enclosure/dp/B01CQRROLW/ref=sr_1_7?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251106&amp;amp;sr=1-7&amp;amp;keywords=raspberry+pi+3+case&#34;&gt;Case&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$7.99 &lt;a href=&#34;https://www.amazon.com/Enokay-Supply-Raspberry-Charger-Adapter/dp/B01MZX466R/ref=sr_1_3?ie=UTF8&amp;amp;qid=1498443576&amp;amp;sr=8-3&amp;amp;keywords=raspberry+pi+power+adapter+micro+usb+switch&#34;&gt;Power
Adapter&lt;/a&gt;
This is an aftermarket power adapter. Lots uof us use this one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$6.99 &lt;a href=&#34;https://www.amazon.com/AmazonBasics-High-Speed-HDMI-Cable-Standard/dp/B014I8SSD0/ref=sr_1_3?ie=UTF8&amp;amp;qid=1499253502&amp;amp;sr=8-3&amp;amp;keywords=hdmi+cable&#34;&gt;HDMI
cable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitor/TV with hdmi&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SD Card, 8GB minimum, 32GB maximum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Advantages:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Full Linux like OS based on debian&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good environment for learning Linux and Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reasonable interfaces to IoT sensors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;excellent camera support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;excellent choice of expansion packages including Grove Sensors that
make it easy to attach sensors and actuators. An example package is
the &lt;a href=&#34;https://www.amazon.com/GrovePi-Starter-Kit-Dexter-Industries/dp/B00TXTZ5SQ/ref=pd_lpo_vtph_147_bs_tr_img_1?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=45QX6XSNZAG1NT8NES79&#34;&gt;Grove Starter
Kit&lt;/a&gt;
for about $90&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Disadvantages:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We tried the Windows IoT package and were not impressed by it. This
is not an issue of the Raspberry, but the Windows IoT platform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;esp8266-robot-car-kit&#34;&gt;ESP8266 Robot Car Kit&lt;/h2&gt;
&lt;p&gt;The ESP8266 has many variants. Some of which are difficult to interface
with. However, this does not apply for the ESP8266 NodeMCU. This board
is originally flashed with &lt;em&gt;Lua&lt;/em&gt;, however it can easily be reflashed
with MicroPython. In addition it is often offered as part of a platform
to develop a robot car. There are arguably better kits available, but
the price of $24 for the entire kit is hard to beat. Unfortunately the
version of python, as well as the limited memory make the esp8266 not a
full fledged platform for python programming and you will quickly see
its limitations. Interfacing with it, however, as an IoT device will
gain you a lot of insights.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Configuration:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$14.99 &lt;a href=&#34;https://www.amazon.com/KOOKYE-ESP8266-NodeMcu-ESP-12E-Expansion/dp/B01C6MR62E/ref=sr_1_1?ie=UTF8&amp;amp;qid=1499251895&amp;amp;sr=8-1&amp;amp;keywords=esp8266+robot+car&#34;&gt;esp8266 &amp;amp;
shield&lt;/a&gt;
or &lt;a href=&#34;https://www.amazon.com/Makerfocus-ESP8266-ESP-12E-Development-Expansion/dp/B01MU4XQUN/ref=sr_1_2?ie=UTF8&amp;amp;qid=1499252002&amp;amp;sr=8-2&amp;amp;keywords=esp8266+motor+shield&#34;&gt;esp8266 &amp;amp;
shield&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$12.59
&lt;a href=&#34;https://www.amazon.com/Emgreat-Chassis-Encoder-wheels-Battery/dp/B00GLO5SMY/ref=pd_rhf_se_s_cp_10?_encoding=UTF8&amp;amp;pd_rd_i=B00GLO5SMY&amp;amp;pd_rd_r=77XYGK6BE54FGDTGQ0AC&amp;amp;pd_rd_w=FNQFl&amp;amp;pd_rd_wg=wKMdb&amp;amp;psc=1&amp;amp;refRID=77XYGK6BE54FGDTGQ0AC&#34;&gt;Chasis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 * AA Rechargable Batteries &amp;amp; charger&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optionally you may want to get additional sensors such as wheel Encoders&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Wheel-Encoder-Kit-Robot-Car/dp/B00NPWGEIM/ref=sr_1_4?s=toys-and-games&amp;amp;ie=UTF8&amp;amp;qid=1499254488&amp;amp;sr=1-4&amp;amp;keywords=speed+sensor+robot+car+wheel&#34;&gt;Wheel
Encoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Advantages:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Very low price for what it can do&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have macOS software available that makes it easy to setup (Other
tutorials for other platforms are available on the internet, you can
contribute by creating documentation we distribute in class for
points)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sensor-kit&#34;&gt;Sensor Kit&lt;/h2&gt;
&lt;p&gt;It is fun to attach sensors to your IoT board. There are many kits
available and we encourage you to do comparisons. One such kit is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$29.99 &lt;a href=&#34;https://www.amazon.com/Elegoo-Upgraded-Modules-Tutorial-Arduino/dp/B01MG49ZQ5/ref=sr_1_7?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251441&amp;amp;sr=1-7&amp;amp;keywords=elegoo&#34;&gt;Elegoo 37
Sensors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However it does not include a breadboard like other kits. Hence we
recommend that you get a breadboard as it makes experimenting easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$5.68 &lt;a href=&#34;https://www.amazon.com/Elegoo-Premium-Female-tie-points-breadboard/dp/B06XB8TZVC/ref=sr_1_23?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251600&amp;amp;sr=1-23&amp;amp;keywords=elegoo&#34;&gt;small bread board and
wires&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fish-kit&#34;&gt;Fish Kit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$29.99
&lt;a href=&#34;https://www.amazon.com/Swimmer-Inflatable-Flying-Replacement-Balloon/dp/B00658LN3E/ref=pd_bxgy_21_img_2?_encoding=UTF8&amp;amp;pd_rd_i=B00658LN3E&amp;amp;pd_rd_r=F71N2YCYE6Z0BCCEPQJC&amp;amp;pd_rd_w=AwYab&amp;amp;pd_rd_wg=rHTnv&amp;amp;psc=1&amp;amp;refRID=F71N2YCYE6Z0BCCEPQJC&#34;&gt;shark&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cheaper balloons leak&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before assembly and putting gas in, make sure components work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gas will last typically for one week&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$39.99 gas can be purchased in party store&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 g9 servo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;soldering (for cable, so cheap one will do)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;esp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;double sided scotch tape&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hot glue gun&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;paper clips&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alternative-components&#34;&gt;Alternative components&lt;/h2&gt;
&lt;h3 id=&#34;esp8266-alternatives&#34;&gt;Esp8266 Alternatives&lt;/h3&gt;
&lt;p&gt;Two models are good. Adafruit has some added features, but may need
soldering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$8.79
&lt;a href=&#34;https://www.amazon.com/HiLetgo-Version-NodeMCU-Internet-Development/dp/B010O1G1ES/ref=sr_1_3?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251149&amp;amp;sr=1-3&amp;amp;keywords=esp8266&#34;&gt;NodeMCU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$16.95 &lt;a href=&#34;https://www.adafruit.com/product/2821&#34;&gt;Adafruit Feather&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;car-parts-alternatives&#34;&gt;Car Parts Alternatives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$14.59 &lt;a href=&#34;https://www.amazon.com/Ardokit-Chassis-Encoder-Battery-Arduino/dp/B00K5OWHXO/ref=sr_1_3?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251712&amp;amp;sr=1-3&amp;amp;keywords=robot+car&#34;&gt;Car
Chasis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$22.88 &lt;a href=&#34;https://www.amazon.com/VKmaker-Avoidance-tracking-Chassis-Ultrasonic/dp/B01CXVA6IO/ref=sr_1_6?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1499251770&amp;amp;sr=1-6&amp;amp;keywords=robot+car&#34;&gt;Car Chasis and
Arduino&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simple-sensors&#34;&gt;Simple sensors&lt;/h3&gt;
&lt;p&gt;Simple sensors can be attached to the boards with cables (that you need
to purchase separately). Examples include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Elegoo-Sensor-Module-Arduino-MEGA/dp/B009OVGKTQ/ref=sr_1_5?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1500678010&amp;amp;sr=1-5&amp;amp;keywords=grove+sensor&#34;&gt;Elegoo 37 sensor
kit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Breadboard-Wires-Aoyoho-Multicolored-Jumper/dp/B01GK2Q4ZQ/ref=sr_1_1?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1500678142&amp;amp;sr=1-1&amp;amp;keywords=bread+board+cab%3Be&#34;&gt;Breadboard
Cable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;grove-sensors&#34;&gt;Grove Sensors&lt;/h3&gt;
&lt;p&gt;Grove sensors have ready-made cables that make them easy to attach to
the Raspberry PI. However, they are more expensive. You still need a
Raspberry PI. No soldering iron and no breadboards are required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Starter-Kit-for-Arduino-p-1855.html&#34;&gt;Grove Starter
Set&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/category/Grove-c-1003.html&#34;&gt;Seed Studio Grove
Sensors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Grove-Base-Shield-for-NodeMCU-p-2513.html&#34;&gt;Grove Shield for
NodeMCU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.switchdoc.com/2016/02/tutorial-intro-to-grove-connectors-for-arduinoraspberry-pi-projects/&#34;&gt;Grove
Cable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alternative-hardware-and-sensors&#34;&gt;Alternative Hardware and Sensors&lt;/h2&gt;
&lt;p&gt;In this section we will list a number of alternative hardware products
that we are exploring. If you have used them, please help us improving
these sections.&lt;/p&gt;
&lt;h3 id=&#34;small-footprint-battery-power&#34;&gt;Small Footprint Battery Power&lt;/h3&gt;
&lt;p&gt;The following board provides to the Raspberry Pi a lithium battery power
pack expansion board. It is powered by two 18650 Li-ion batteries
providing steady. A 4-LED indicator indicates the level of charge. The
board costs $16.99.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sunfounder.com/plus-power-module.html&#34;&gt;https://www.sunfounder.com/plus-power-module.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Head Node Setup</title>
      <link>/docs/old/pi/kubernetes/526/head/head_node_readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/kubernetes/526/head/head_node_readme/</guid>
      <description>
        
        
        &lt;p&gt;Your head node will give you access to your compute nodes.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The setup script will install dnsmasq for DNS/DHCP server and Cluster SSH. It will also configure the iptables to allow the compute nodes to access the internet through the head node.&lt;/p&gt;
&lt;p&gt;Run setup script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo sh setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run Cluster SSH:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cssh -l pi rpcluster
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This opens a new SSH window with username &lt;em&gt;pi&lt;/em&gt; for each hostname in rpcluster (defined in &lt;strong&gt;/etc/clusters&lt;/strong&gt;). Click on the gray box to type commands into each node.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Introduction</title>
      <link>/docs/old/iot/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/introduction/</guid>
      <description>
        
        
        &lt;p&gt;Internet of Things is one of the driving forces in the modernisation
of today&amp;rsquo;s world. It is based on connecting &lt;em&gt;things&lt;/em&gt; to the internet
to create a more aware world that can be interfaced with. This not
only includes us humans, but any &lt;em&gt;thing&lt;/em&gt; that can interact with other
things.  It is clear that such a vision of interconnected devices will
result in billions of devices to communicate with each other. Some of
them may only communicate small number of items, while others will
communicate a large amount. Analysis of this data is dependent on the
capability of the &lt;em&gt;thing&lt;/em&gt;. If it is to small the analysis can be
conducted on a remote server or cloud while information to act are fed
back from the device.  In other cases the device may be completely
autonomous and does not require any interaction. Yet in other cases
the collaborative information gathered from such devices is used to
derive decisions and actions.&lt;/p&gt;
&lt;p&gt;Within this section we are trying to provide you with a small glimpse
into how IoT devices function and can be utilized on small projects.
Ideally if the class has all such a device we could even attempt to
build a cloud based service that collects and redistributes the data.&lt;/p&gt;
&lt;p&gt;To keep things simple we are not providing a general introduction in
IoT. For that we offer other classes. However, we will introduce you to
two different devices. These are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;esp8266&lt;/li&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reasons we chose them is that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are cheap.&lt;/li&gt;
&lt;li&gt;We can program both in python allowing us to use a single
programming language for all projects and assignments, and&lt;/li&gt;
&lt;li&gt;They are sufficiently powerful and we can conduct real projects with
them beyond toy projects.&lt;/li&gt;
&lt;li&gt;The devices, especially the Raspberry PI can be used to also learn
Linux in case you do not have access to a linux computer. Please
note however the raspberry will have memory and space limitations
that you need to deal with.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Projects that you can do to test the devices are&lt;/p&gt;
&lt;p&gt;esp8266 (easy-moderate, small memory):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a LED blinker&lt;/li&gt;
&lt;li&gt;a dendrite :o2:&lt;/li&gt;
&lt;li&gt;a robot fish :o2:&lt;/li&gt;
&lt;li&gt;a fish swarm :o2:&lt;/li&gt;
&lt;li&gt;a robot swarm :o2:&lt;/li&gt;
&lt;li&gt;an activity of your desire&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raspberry Pi (easy-moderate, 32GB space limitation):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a LED blinker&lt;/li&gt;
&lt;li&gt;a robot car&lt;/li&gt;
&lt;li&gt;a robot car with camera&lt;/li&gt;
&lt;li&gt;a temperature service&lt;/li&gt;
&lt;li&gt;different clusters&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;-!&amp;ndash;
Crazyflie 2.0 (difficult):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;programming a drone&lt;/li&gt;
&lt;li&gt;programming a drone swarm
-&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Indiana University&lt;/em&gt;: Please note that for those at IU we do have a
Lab in which you can use some of the devices pointed out here. You can
arrange for accessing the infrastructure.&lt;/p&gt;
&lt;p&gt;In case you want to work on a swarm, we do have positioning sensors
that simplify that task.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Due to the small cost involed in these devices you can buy them
also simply yourself.&lt;/p&gt;
&lt;p&gt;We provide throughout the book lists of hardware that you will need
for the various projects.&lt;/p&gt;
&lt;p&gt;In general we think that these platforms provide a wonderful
introduction into IoT. Such platforms were
just a decade ago not powerful enough or too expensive. However today
the provide a serious platform for developers. Sensors are available
easily as most Android comparable sensors can be used.&lt;/p&gt;
&lt;p&gt;Before we jump right into programming the devices, we like to point
out that we did not chose to use Arduinos much, as their price advantage is
no longer valid. They also are mostly using C and as we focus in our
material on python we decided to not spend much time on it.&lt;/p&gt;
&lt;p&gt;We also find that esp8266 and Raspberry can interface
with most sensors. Having the ability to easily use WiFi however is
our primary reason for using them. Furthermore being able to attach a
camera to the Raspberry is just superb. Image analysis is one of
the drivers for big data.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes</title>
      <link>/docs/old/pi/clusters/pi-kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;In this section we will discuss how to set up a Kubernetes cluster on a
number of Raspberry Pis.&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; all the simple setup with sd cards, ssh, keys, and so on should be moved to the NOW cluster section. This way we can require simply a NOW and start without duplication on the real Kubernetes install.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; we have two sections of Kubernetes contributed by two students. What we need is to merge them and save the usable things. We need to identify if the setup is significantly different before we can do this.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; so before you can work on the Kubernetes section you need to make sure the NOW section is up to date.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources-needed&#34;&gt;Resources Needed&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt; section we explained how to set up a network
of Pis. Here we assume that we start from such a network. We recommend that the
cluster will have at least one master and three worker nodes. The test should
not use too many resources otherwise the system may be unnecessarily slow. In
particular we should have one dedicated master. We use three nodes to support
testing the distribution of containers. (It may work with two, but we have not
tested it). Please give us feedback on this and let us know what works for you.
We will integrate your feedback.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-kubernetes-cluster-setup&#34;&gt;Overview of Kubernetes Cluster Setup&lt;/h2&gt;
&lt;p&gt;A Kubernetes cluster is made of one master and several worker nodes. Each node
must have the standard Kubernetes setup completed and the master must also have
additional setup. Once the master and worker nodes are setup then the worker
nodes can join the network created by the master node. For the Raspberry Pi we
support two modes of setting up the master and workers. The first method is to
use the scripts that we provide to do the required installations. The second
method is to perform each step by hand. We will begin by explaining how to use
the scripts to setup your cluster quickly.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-cluster-setup-with-scripts&#34;&gt;Kubernetes Cluster Setup with Scripts&lt;/h2&gt;
&lt;p&gt;These steps have been verified with the latest build of Raspbian
Stretch which is
&lt;a href=&#34;https://downloads.raspberrypi.org/raspbian_lite_latest&#34;&gt;2018-11-13-raspbian-stretch-lite&lt;/a&gt;.
If you have installed Raspbian Stretch with Desktop or Raspbian Stretch with
Desktop and Recommended Software then some of these steps will not be required,
but repeating them will not be a problem.&lt;/p&gt;
&lt;p&gt;The required scripts are stored in the
&lt;a href=&#34;https://github.com/cloudmesh-community/pi&#34;&gt;Cloudmesh Community Pi&lt;/a&gt; repository
and must be copied to each Raspberry Pi in order to run. This guide assumes that
each Pi has internet access which is required to download the necessary tools.
The first steps to setup the Pi tools is listed on the
&lt;a href=&#34;https://github.com/cloudmesh-community/pi/blob/master/README.md&#34;&gt;README.md&lt;/a&gt;
for the Pi tools repository. We will repeat those steps here for convenience.&lt;/p&gt;
&lt;h3 id=&#34;pi-cluster-tools-setup&#34;&gt;Pi Tools Prerequisites&lt;/h3&gt;
&lt;p&gt;To use the Cloudmesh Pi tools you need &lt;code&gt;git&lt;/code&gt; to download the tools from the
github repository. You must also update the Pi&amp;rsquo;s list of software, install
&lt;code&gt;git&lt;/code&gt;, and then download or clone the &lt;code&gt;git&lt;/code&gt; repository. Run these steps at the
Pi command prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get update&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sudo apt-get install -y git
$ git clone https://github.com/cloudmesh-community/pi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When that successfully completes you will have a copy of the Pi tools on your Pi
and you can now run them.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-shared-setup&#34;&gt;Kubernetes Shared Setup&lt;/h3&gt;
&lt;p&gt;Every Kubernetes node, whether master or worker, needs to complete the following
setup steps. The Pi scripts are stored in the &lt;code&gt;bin&lt;/code&gt; directory. Every
Kubernetes Pi master and worker must run the &lt;code&gt;kubernetes-setup.sh&lt;/code&gt; script which
will download and install Docker and Kubernetes and make the necessary system
changes to support both. When this script completes the Pi must be rebooted to
properly configure its memory system for Kubernetes. Execute the following
commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo pi/bin/kubernetes-setup.sh
$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are connected to the Pi over &lt;code&gt;ssh&lt;/code&gt; your session may hang at this point.
You can either wait for &lt;code&gt;ssh&lt;/code&gt; to timeout or kill the session by typing a tilde
then a period. The tilde on a new line is a special command to &lt;code&gt;ssh&lt;/code&gt; and the
period means to disconnect the session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point the worker is ready to connect to the Kubernetes master node.
The command to connect to the master node is &lt;code&gt;kubeadm join&lt;/code&gt; but we need to
finish setting up the master node in order to get the token necessary to
authenticate with it.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-master-setup&#34;&gt;Kubernetes Master Setup&lt;/h3&gt;
&lt;p&gt;To setup the Kubernetes master node you should first complete the
&lt;a href=&#34;#kubernetes-shared-setup&#34;&gt;Kubernetes Shared Setup&lt;/a&gt;. After the Pi reboots you
can run the master setup script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo pi/bin/kubernetes-master-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The master setup script will run &lt;code&gt;kubeadm init&lt;/code&gt; which can take a long time and
will occasionally timeout on the Raspberry Pi without completing. This does not
indicate a failure of the Pi setup. If the command finishes with the error&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unfortunately, an error has occurred:
        timed out waiting for the condition
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then it is possible to restart the setup and it will usually complete
successfully the second time. To do this (only if the master setup failed) run
&lt;code&gt;kubeadm reset&lt;/code&gt; and be sure to answer &lt;code&gt;y&lt;/code&gt; to the prompts. Then run the master
setup script again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm reset
$ sudo pi/bin/kubernetes-master-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the master setup successfully completes you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes master has initialized successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and there will be further instructions on how to setup the master. These steps
have already been performed by the setup scripts so you do not need to do them.
The output will also list the required &lt;code&gt;kubeadm join&lt;/code&gt; command that can be issued
on each worker node that wishes to join this Kubernetes master node. In
addition, the scripts have stored the join command, the master IP address, the
join token, and the CA Hash in a YAML file &lt;code&gt;kubeadm-settings.yml&lt;/code&gt; in the current
directory. If you need to add nodes in the future, you may refer to this file
for the required parameters.&lt;/p&gt;
&lt;h2 id=&#34;pi-kubernetes-join-workers&#34;&gt;Join Workers to Master&lt;/h2&gt;
&lt;p&gt;Now login to each of the workers and issue the &lt;code&gt;kubeadm join&lt;/code&gt; command from the
master node. If you have not successfully completed the master node setup,
please see &lt;a href=&#34;#kubernetes-master-setup&#34;&gt;Kubernetes Master Setup&lt;/a&gt; for the required
steps.&lt;/p&gt;
&lt;p&gt;As of this writing there is a version incompatibility between the latest
Kubernetes and the latest Docker. Kubernetes has not yet verified Docker version
18.09 which is installed by the default Docker install script. If you use our
provided setup script then the version of Docker will be automatically
downgraded to 18.06.1 which is verified by Kubernetes. You can follow the steps
to downgrade your Docker version given in &lt;a href=&#34;#pi-install-docker&#34;&gt;Install Docker&lt;/a&gt; or
you can skip the version check by specifying
&lt;code&gt;--ignore-preflight-errors=SystemVerification&lt;/code&gt; on the command line. An example
&lt;code&gt;kubeadm join&lt;/code&gt; command would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm join 10.0.0.101:6443 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --token vstt3y.faa67q2dp383xhgv &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --discovery-token-ca-cert-hash &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    sha256:7fa06185f14b89234235aa9f03ef60835ade825e2553cd97a52b5894566edeb5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the worker nodes have joined the cluster, you can login to the master node
and see their status with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
blue00   Ready    master   4h56m   v1.12.2
blue01   Ready    &amp;lt;none&amp;gt;   4h44m   v1.12.2
blue02   Ready    &amp;lt;none&amp;gt;   4h46m   v1.12.2
blue03   Ready    &amp;lt;none&amp;gt;   4h42m   v1.12.2
blue04   Ready    &amp;lt;none&amp;gt;   4h1m    v1.12.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the workers are joining the cluster they will initially be in a &lt;code&gt;NotReady&lt;/code&gt;
state for a while as they complete their setup. This is the normal expected
behavior and each node should reach the &lt;code&gt;Ready&lt;/code&gt; state within a few minutes. To
continue experimenting with your Kubernetes cluster, please see the
&lt;a href=&#34;#kubernetes-first-steps&#34;&gt;Kubernetes First Steps&lt;/a&gt; section.&lt;/p&gt;
&lt;h2 id=&#34;manual-kubernetes-cluster-setup&#34;&gt;Manual Kubernetes Cluster Setup&lt;/h2&gt;
&lt;p&gt;If you do not want to use our setup scripts or would like to change some steps
in the installation you can use the following steps to manually setup a
Kubernetes cluster on several Pis. First, each node in the cluster must have
Docker and Kubernetes installed along with some system configurations. Then the
master should be launched and each worker node connected to the master. Please
follow these instructions carefully and you should have a working Kubernetes
cluster.&lt;/p&gt;
&lt;h3 id=&#34;pi-install-docker&#34;&gt;Install docker&lt;/h3&gt;
&lt;p&gt;Kubernetes depends on a containerization platform to run applications. The
standard platform used with Kubernetes is Docker, although other container
platforms are also support. We will use Docker on the Pi. Install Docker with
the convenience script at &lt;code&gt;get.docker.com&lt;/code&gt;. You may also download the script
manually and see what operations it performs. The basic steps in the script are
to detect your operation system and computer architecture, setup the proper
Docker package repositories and keys for your system, and finally install the
Docker packages and dependencies. The current version of Docker 18.09 has not
been verified by Kubernetes, so after installation we will downgrade this
package to 18.06 in the following steps. Once the installation finishes we
recommend running the following &lt;code&gt;usermod&lt;/code&gt; command to run Docker as a non-root
user. This is an optional but recommended step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -sSL get.docker.com &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo sh
$ sudo usermod -aG docker pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The current version of Docker 18.09 installed by the convenience script has not
been verified by Kubernetes v1.12.2 yet so it will give an error and Kubernetes
will fail to start. You can fix this by giving the
&lt;code&gt;--ignore-preflight-errors=SystemVerification&lt;/code&gt; flag to &lt;code&gt;kubeadm init&lt;/code&gt; and
&lt;code&gt;kubeadm join&lt;/code&gt;. However, a better solution is to downgrade the Docker version
installed. The Docker install script will also setup the proper &lt;code&gt;apt-get&lt;/code&gt;
repositories that host previous versions of Docker. To downgrade, first stop
the &lt;code&gt;docker.service&lt;/code&gt; that is running, then downgrade the package and restart the
service. The Docker service should restart automatically after the downgrade, so
restarting the service with &lt;code&gt;systemctl&lt;/code&gt; is just done in case of a problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo systemctl stop docker.service
$ sudo apt-get install -qy --allow-downgrades &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  docker-ce&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;18.06.1~ce~3-0~raspbian
$ sudo systemctl start docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-kubernetes&#34;&gt;Install Kubernetes&lt;/h3&gt;
&lt;p&gt;After installing Docker we must also install Kubernetes. The Kubernetes package
sources and GPG keys need to be added to the &lt;code&gt;apt-get&lt;/code&gt; package manager first,
then we must update the &lt;code&gt;apt-get&lt;/code&gt; package list with the new sources before we
can finally install the Kubernetes services and administration package
&lt;code&gt;kubeadm&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo apt-key add -
$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;deb http://apt.kubernetes.io/ kubernetes-xenial main&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo tee /etc/apt/sources.list.d/kubernetes.list
$ sudo apt-get update -q&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sudo apt-get install -qy kubeadm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once Kubernetes and Docker are correctly installed there are some system
configuration changes necessary for Kubernetes.&lt;/p&gt;
&lt;h3 id=&#34;pi-kubernetes-system-config&#34;&gt;System configuration&lt;/h3&gt;
&lt;p&gt;Kubernetes is not compatible with SWAP memory and as of version 1.8 it will
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading&#34;&gt;fail if swap is enabled on a node&lt;/a&gt;,
therefore we need to disable swap memory on Raspbian. It is possible that
disabling swap on the Pi could cause other issues, especially due to the low
memory on the Raspberry Pi, but it is accepted practice for running any
Kubernetes cluster to disable swap. There is a flag &lt;code&gt;--fail-swap-on=false&lt;/code&gt; that
can be passed to &lt;code&gt;kubeadm&lt;/code&gt; to skip the check for swap but we have not tested
with this setting.  To disable swap execute the following commands on the Pi:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dphys-swapfile swapoff &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo dphys-swapfile uninstall &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo update-rc.d dphys-swapfile remove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now not see any entries in this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo swapon --summary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next some kernel cgroup settings need to be changed for Kubernetes. This is a
boot-time option that can only be changed by altering the options passed to the
Linux kernel during boot. These options are stored in the file
&lt;code&gt;/boot/cmdline.txt&lt;/code&gt; on the Raspberry Pi. This file only contains a single line
that specifies the kernel options. The following three options must be added to
the end of the line &lt;code&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&lt;/code&gt;.
You may edit the file in a text editor if you are confident that you can make
the change correctly or simply run the following lines at the command prompt.
They will first backup the current file, then then append the new options and
finally write the entire string back to the original file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo cp /boot/cmdline.txt /boot/cmdline.bak.txt
$ &lt;span style=&#34;color:#000&#34;&gt;new_options&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;head -n1 /boot/cmdline.txt&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt; \
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&amp;#34;&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$new_options&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo tee /boot/cmdline.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kubernetes also expects certain kernel modules to be loaded. It will enable
these kernel modules during setup but we can also specify them to always be
loaded on boot which removes the warning messages. To enable the required kernel
modules, execute the following lines which will append these modules to the list
of enabled kernel modules stored in &lt;code&gt;/etc/modules&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt; EOF | sudo tee -a /etc/modules
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;ip_vs
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;ip_vs_sh
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;ip_vs_rr
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;ip_vs_wrr
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;nf_conntrack_ipv4
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since these changes only take place at boot time, you &lt;em&gt;must reboot&lt;/em&gt; before
continuing with the rest of the section. If you do not reboot then Kubernetes
will refuse to run and issue an error.&lt;/p&gt;
&lt;h3 id=&#34;setup-kubernetes-cluster&#34;&gt;Setup Kubernetes Cluster&lt;/h3&gt;
&lt;p&gt;After the Pi reboots and you reconnect to it there are a few steps to perform on
the master Kubernetes node to prepare it for the worker nodes to connect to.
First we recommend pulling (downloading) the Kubernetes images so that this step
is separate from initializing the cluster. You can issue the following command
and note that it will take several minutes depending on your network connection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm config images pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that is complete we can now initialize the Kubernetes master. You need to
know the IP address of the master node and you should choose a CIDR for the pod
network. Note that in this case we are setting the join token to have a
time-to-live of 0 which means it will never expire. This is reasonable for
initial setup and testing but in any permanent system the token should be
allowed to expire in a few hours or days to prevent unauthorized nodes from
joining the cluster should the token accidentally be leaked. The following
command will setup the master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#000&#34;&gt;POD_CIDR&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.244.0.0/16
$ &lt;span style=&#34;color:#000&#34;&gt;APISERVER_IP&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10.0.0.101
$ sudo kubeadm init --token-ttl&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --pod-network-cidr&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$POD_CIDR&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --apiserver-advertise-address&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$APISERVER_IP&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the master setup completes successfully then you should see output similar
to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &amp;quot;kubectl apply -f [podnetwork].yaml&amp;quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 10.0.0.101:6443 --token vstt3y.faa67q2dp383xhgv --discovery-token-ca-cert-hash sha256:7fa06185f14b89234235aa9f03ef60835ade825e2553cd97a52b5894566edeb5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should follow these instructions, running these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir -p &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/.kube&amp;#34;&lt;/span&gt;
$ sudo cp -i /etc/kubernetes/admin.conf &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/.kube/config&amp;#34;&lt;/span&gt;
$ sudo chown &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -u&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;id -g&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/.kube/config&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;kubeadm join&lt;/code&gt; command should be copied and stored for later use. If you
lose the details you can view the existing tokens with &lt;code&gt;kubeadm token list&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm token list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you can find the sha256 hash of the CA Cert with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  openssl rsa -pubin -outform DER 2&amp;gt;/dev/null &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sha256sum &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  cut -d&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The original token is for development use and so we set it to have an unlimited
time-to-live. This is not recommended for a production system, however, a
shorter TTL of a few hours or days should be specified and a new token should be
generated when the previous one has expired. A new token can be created with the
following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm token create --print-join-command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will not retrieve the original token but will generate a new one. These
tokens should be carefully managed as they allow a node to join the Kubernetes
cluster which is a potentially unsafe operation for untrusted nodes.&lt;/p&gt;
&lt;p&gt;The final step is setting up the networking. These instructions use
&lt;a href=&#34;https://www.weave.works/oss/net/&#34;&gt;Weave Net&lt;/a&gt; to enable the Kubernetes network
architecture. Another recommended solution to use with the Raspberry Pi is
&lt;a href=&#34;https://github.com/coreos/flannel&#34;&gt;Flannel&lt;/a&gt;. Here is the command to setup Weave
Net on the Kubernetes cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  kubectl apply -f \
 &amp;quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#39;\n&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After waiting a minute or so, you should see the following output from this
command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ sudo kubectl get pods --namespace=kube-system
NAME                             READY   STATUS    RESTARTS   AGE
coredns-576cbf47c7-hn55k         1/1     Running   0          4m51s
coredns-576cbf47c7-nvmm4         1/1     Running   0          4m51s
etcd-blue00                      1/1     Running   0          3m55s
kube-apiserver-blue00            1/1     Running   0          4m7s
kube-controller-manager-blue00   1/1     Running   0          4m5s
kube-proxy-9xwdn                 1/1     Running   0          4m51s
kube-scheduler-blue00            1/1     Running   0          4m
weave-net-xj4tc                  2/2     Running   0          73s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that the master is running and networking is enabled, you can run the
&lt;code&gt;kubeadm join&lt;/code&gt; command on each Pi in the cluster and issue the identical command
for them to join the master. Please see the section &lt;a href=&#34;#pi-kubernetes-join-workers&#34;&gt;Join Workers to
Master&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-first-steps&#34;&gt;Kubernetes First Steps&lt;/h2&gt;
&lt;p&gt;Now that you have the Kubernetes cluster running you can deploy pods on the
cluster. For production use of Kubernetes it is recommended to use a Controller
which will manage the details of deploying pods to nodes and ensuring
replication and self-healing. Please see the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#pods-and-controllers&#34;&gt;Kubernetes Pod Overview&lt;/a&gt;
section of the Kubernetes documentation for information on creating
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;,
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&#34;&gt;StatefulSets&lt;/a&gt;
or
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34;&gt;DaemonSets&lt;/a&gt;
on your cluster. For our simple use case we will create a few pods by hand.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-pods&#34;&gt;Kubernetes Pods&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/cloudmesh-community/pi&#34;&gt;Cloudmesh Community Pi&lt;/a&gt;
repository has several pod definition files that you can use directly or
customize to your particular use case for experimenting with the Kubernetes
cluster. If you used our install scripts you should already have these on your
Kubernetes master. If you did the setup by hand you can get the repository by
installing &lt;code&gt;git&lt;/code&gt; and then cloning it onto the Pi using the instructions in the
&lt;a href=&#34;#pi-cluster-tools-setup&#34;&gt;Pi Tools Prerequisites&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;As an initial test you can create the markdown renderer deployment on your
cluster with the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; pi/kubernetes
$ sudo kubectl create -f markdownrender.yml
service/markdownrender created
deployment.apps/markdownrender created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the markdownrender.yml file you will see that it defines a
Service and a Deployment and it maps port 8080 from the Service to the external
port 31118. The Deployment specifies that it should have one replica of the
application which runs a Docker container from Docker Hub titled
&lt;a href=&#34;https://hub.docker.com/r/functions/markdownrender/&#34;&gt;functions/markdownrender:latest-armhf&lt;/a&gt;.
This container supplies a simple service to translate a markdown document into
an HTML document. You can test it with the following commands to see it working:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -4 http://localhost:31118 -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;# test&amp;#34;&lt;/span&gt;
$ curl -4 http://localhost:31118 --data-binary @../README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 31118 port will also be accessible to any computer that can reach the
Kubernetes master (unless firewall rules dictate otherwise) so you can also test
this from your own computer if it is on the same network as the Kubernetes
master. For example you could run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -4 http://blue00:31118 -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;# test&amp;#34;&lt;/span&gt;
$ curl -s &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  https://raw.githubusercontent.com/cloudmesh-community/pi/master/README.md &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  curl -4 http://blue00:31118 --data-binary @-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see the status of your pods by using &lt;code&gt;kubectl get pods&lt;/code&gt; on the master.
Adding the &lt;code&gt;-o wide&lt;/code&gt; parameter will also output the node and node ip of the node
that the pod is deployed to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl get pods -o wide
NAME                              READY   STATUS    RESTARTS   AGE   IP
NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-67bsg   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          20m   10.44.0.1
blue01   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo kubectl get pods -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{.items[*].spec.nodeName}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;removing-a-node-from-a-cluster&#34;&gt;Removing a node from a cluster&lt;/h3&gt;
&lt;p&gt;To remove a Kubernetes node from a cluster, you must first drain the node which
will evict every pod in the node and cordon it off so that no new pods will be
scheduled in it. For cluster setup each node will be running the Weave daemon so
it is necessary to specify &lt;code&gt;--ignore-daemonsets&lt;/code&gt; to drain the node. The drain
command should complete without errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl drain --ignore-daemonsets &amp;lt;node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there are pods scheduled to the node then you should wait until those pods
complete and are shutdown and removed from the node. You can observe the node
state using &lt;code&gt;kubectl get nodes&lt;/code&gt; and &lt;code&gt;kubectl get pods&lt;/code&gt;. You could see a sequence
of events such as this when draining a node that has a deployed pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl drain blue01 --ignore-daemonsets
node/blue01 cordoned
WARNING: Ignoring DaemonSet-managed pods: kube-proxy-2zplz, weave-net-r7b85
pod/markdownrender-7d8d6f74d6-67bsg evicted
$ sudo kubectl get pods -o wide
NAME                              READY   STATUS              RESTARTS   AGE   IP       NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-lqk58   0/1     ContainerCreating   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          14s   &amp;lt;none&amp;gt;   blue03   &amp;lt;none&amp;gt;
$ sudo kubectl get pods -o wide
NAME                              READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE
markdownrender-7d8d6f74d6-lqk58   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          24s   10.39.0.1   blue03   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the node has no pods scheduled to it you can remove it from the cluster
permanently by issuing the &lt;code&gt;delete&lt;/code&gt; command on the master. The node should be in
the &lt;code&gt;Ready,SchedulingDisabled&lt;/code&gt; status. For example, in this output the node
&lt;code&gt;blue04&lt;/code&gt; has been drained and is ready to be deleted from the cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo kubectl get nodes
NAME     STATUS                     ROLES    AGE     VERSION
blue00   Ready                      master   40h     v1.12.2
blue01   Ready                      &amp;lt;none&amp;gt;   40h     v1.12.2
blue02   Ready                      &amp;lt;none&amp;gt;   40h     v1.12.2
blue03   NotReady                   &amp;lt;none&amp;gt;   40h     v1.12.2
blue04   Ready,SchedulingDisabled   &amp;lt;none&amp;gt;   4m10s   v1.12.2
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubectl delete node &amp;lt;node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is complete you can login to the node itself and reset it so that it
can join another cluster or be used for other purposes. The &lt;code&gt;kubeadm reset&lt;/code&gt;
command will accomplish this. At this point Kubernetes should be shut down on
the Pi and you should not see any entries in the &lt;code&gt;systemctl&lt;/code&gt; table for
&lt;code&gt;kubernetes&lt;/code&gt; or &lt;code&gt;kubelet&lt;/code&gt; and you should not see any running Docker images that
are related to Kubernetes. This can be confirmed with the following commands run
&lt;em&gt;on the node&lt;/em&gt; not on the master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo kubeadm reset
$ sudo systemctl list-units &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep -E &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;kubernetes|kubelet&amp;#39;&lt;/span&gt;
$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that Kubernetes required swap to be disabled and it may need to be
re-enabled if you are planning to use the Raspberry Pi for other uses. There is
some debate about whether swap on a Pi is actually a good idea in general,
however, since the SD Card is rather slow and doesn&amp;rsquo;t handle repeated reads and
writes well. If you have a USB hard drive this could be a good solution to
increasing swap. The memory and cpuset cgroups were also enabled for Kubernetes
by modifying the &lt;code&gt;/boot/cmdline.txt&lt;/code&gt; kernel options file. Leaving these enabled
will not cause problems for other uses but they can be easily turned off by
removing the lines that were added in the
&lt;a href=&#34;#pi-kubernetes-system-config&#34;&gt;System configuration&lt;/a&gt; section.
Here are the required commands to re-enable swap.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dphys-swapfile install &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo dphys-swapfile swapon &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  sudo update-rc.d dphys-swapfile defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Swap will be enabled immediately and the changes will persist after reboot.&lt;/p&gt;
&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/adm_kub_config.yaml&#34;&gt;kubernetes/526/bin/adm_kub_config.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/config_kub.sh&#34;&gt;kubernetes/526/bin/config_kub.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/copy_dk_kub_install_script_to_nodes.sh&#34;&gt;kubernetes/526/bin/copy_dk_kub_install_script_to_nodes.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/tree/master/chapters/pi/kubernetes/526/bin/docker_kubernites_install.sh&#34;&gt;kubernetes/526/bin/docker_kubernites_install.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/install_docker.sh&#34;&gt;docker_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/dhcp_setup.sh&#34;&gt;dhcp_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;417/bin/join&#34;&gt;join&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kube_head_setup.sh&#34;&gt;kube_head_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kube_worker_setup.sh&#34;&gt;kube_worker_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/kubeadm_conf.yaml&#34;&gt;kubeadm_conf.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/bin/opt_setup.sh&#34;&gt;opt_setup.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975&#34;&gt;https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/solutions/real-time/kubernetes-redis-bigquery&#34;&gt;https://cloud.google.com/solutions/real-time/kubernetes-redis-bigquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubecloud.io/setup-a-kubernetes-1-9-0-raspberry-pi-cluster-on-raspbian-using-kubeadm-f8b3b85bc2d1&#34;&gt;https://kubecloud.io/setup-a-kubernetes-1-9-0-raspberry-pi-cluster-on-raspbian-using-kubeadm-f8b3b85bc2d1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hanselman.com/blog/HowToBuildAKubernetesClusterWithARMRaspberryPiThenRunNETCoreOnOpenFaas.aspx&#34;&gt;https://www.hanselman.com/blog/HowToBuildAKubernetesClusterWithARMRaspberryPiThenRunNETCoreOnOpenFaas.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marcussmallman.io/2018/02/18/diy-rasberry-pi-kubernetes-cluster/&#34;&gt;https://marcussmallman.io/2018/02/18/diy-rasberry-pi-kubernetes-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/&#34;&gt;https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sicara.com/build-own-cloud-kubernetes-raspberry-pi-9e5a98741b49&#34;&gt;https://blog.sicara.com/build-own-cloud-kubernetes-raspberry-pi-9e5a98741b49&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes Cluster in Raspberry Pi - automation</title>
      <link>/docs/old/pi/kubernetes/417/bin/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/kubernetes/417/bin/readme/</guid>
      <description>
        
        
        &lt;p&gt;This section of the tutorial is targeting to automate the Kubernetes cluster setup in
Raspberry pi.&lt;/p&gt;
&lt;h2 id=&#34;opt_setupsh&#34;&gt;opt_setup.sh&lt;/h2&gt;
&lt;p&gt;This is an optional setup if its required to download the cloudmesh code from 417 repo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh opt_setup.sh&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dhcp_setupsh&#34;&gt;dhcp_setup.sh&lt;/h2&gt;
&lt;p&gt;This Script will help setting up the dhcp static ip.&lt;/p&gt;
&lt;p&gt;Please note that the shell script will execute the recommended reboot after the static IP assignment.&lt;/p&gt;
&lt;p&gt;It needs four params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hostname&lt;/li&gt;
&lt;li&gt;desired static ip&lt;/li&gt;
&lt;li&gt;router ip&lt;/li&gt;
&lt;li&gt;dns server ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sh dhcp_setup.sh &amp;lt;hostname&amp;gt; &amp;lt;nodeIP&amp;gt; &amp;lt;routerIP&amp;gt; &amp;lt;dnsIP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker_setupsh&#34;&gt;docker_setup.sh&lt;/h2&gt;
&lt;p&gt;Now Install docker and turn off the swap memory.
This shell will reboot the node per recommendation of the references.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh docker_setup.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The previous shell scripts are common in both worker and head.&lt;/p&gt;
&lt;h2 id=&#34;kube_head_setupsh&#34;&gt;kube_head_setup.sh&lt;/h2&gt;
&lt;p&gt;To be executed only on the master.
This will initiate kubectl master and setup networking[debugging now]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh kube_head_setup.sh&lt;/code&gt;
Please save the join token for the workers&lt;/p&gt;
&lt;h1 id=&#34;kube_worker_setupsh&#34;&gt;kube_worker_setup.sh&lt;/h1&gt;
&lt;p&gt;To be executed in the worker nodes&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh kube_worker_setup.sh&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Message Massing Interface Cluster</title>
      <link>/docs/old/pi/mpi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/mpi/</guid>
      <description>
        
        
        &lt;p&gt;For more information on this topic see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/installing-mpi-python-raspberry-pi-cluster-runs-docker&#34;&gt;https://thenewstack.io/installing-mpi-python-raspberry-pi-cluster-runs-docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackster.io/darthbison/raspberry-pi-cluster-with-mpi-4602cb&#34;&gt;https://www.hackster.io/darthbison/raspberry-pi-cluster-with-mpi-4602cb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meccanismocomplesso.org/en/cluster-e-programmazione-in-parallelo-con-mpi-e-raspberry-pi&#34;&gt;https://www.meccanismocomplesso.org/en/cluster-e-programmazione-in-parallelo-con-mpi-e-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Motherboard LED</title>
      <link>/docs/old/pi/motherboard-led/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/motherboard-led/</guid>
      <description>
        
        
        &lt;p&gt;The Raspberry pi contains an LED that can also be used to provide us
with some information as to the status of the PI. It is usually used
for reporting the power status.&lt;/p&gt;
&lt;p&gt;The green LED can be made blinking as follows in root&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 1 &amp;gt; /sys/class/leds/led0/brightness
echo 0 &amp;gt; /sys/class/leds/led0/brightness
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally this ac be done via a remote command if your ssh keys are
uploaded and your originating computer is added to the
authorized_keys. Now you can can control them via ssh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh pi@red03 &amp;quot;echo 1 &amp;gt; led; sudo cp led /sys/class/leds/led0/brightness&amp;quot;
ssh pi@red03 &amp;quot;echo 0 &amp;gt; led; sudo cp led /sys/class/leds/led0/brightness&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is extremely useful as it allows us to check if we the OS is
available and we can access the PI.&lt;/p&gt;
&lt;p&gt;One strategy is to for example switch the light of, once it is booted,
so we can see which board may be in trouble.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Network of Pis (NOW)</title>
      <link>/docs/old/pi/clusters/pi-now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-now/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The purpose of setting up a cluster of Raspberry Pi computers is to be able to
experiment with different server and cluster technologies on a small scale. To
this end we want to be able to use a network configuration that mirrors a large
scale cloud configuration. This section will explain how to setup several
Raspberry Pis in a cluster configuration to run experiments on them.&lt;/p&gt;
&lt;h2 id=&#34;pi-now-configs&#34;&gt;Network of Pis Configurations&lt;/h2&gt;
&lt;p&gt;There are several possible configurations for a network of Pis. One possibility
is to connect each of the Pis to your local network so that you can
directly connect to each of the Pis in the cluster from your laptop. This
option can be easy to setup but it may have problems scaling up to several
hundred Raspberry Pis. The second option is to use one of the Pi computers as a
master or router and for the other Pis in the cluster to access the Internet
through this master Pi&amp;rsquo;s connection. Note that in most situations each Pi will
need to be able to access the Internet to download packages and interact with
public services. In the second option, however, the worker Pis will be separated
from the main network by the master Pi and it may not be possible to directly
access them, for example, over &lt;code&gt;ssh&lt;/code&gt; from your laptop.&lt;/p&gt;
&lt;p&gt;In the first option we can directly connect each Raspberry Pi to your local
network using either the Ethernet adapter on the Pi or using the Wireless
adapter on the Pi. If using the Ethernet adapter and intermediary router or
switch can also be used to connect the Pis to the local network. The network can
be visualized in @fig:pi-cluster-network-direct. To setup this kind of cluster
please follow the instructions in
&lt;a href=&#34;#pi-direct-network-cluster&#34;&gt;Direct Network Cluster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi-cluster-network-direct.png&#34; alt=&#34;Direct Network Cluster&#34;&gt;{#fig:pi-cluster-network-direct}&lt;/p&gt;
&lt;p&gt;In the second option we will need to configure the master Pi to have two network
interfaces enabled. One of the interfaces will connect to the local network and
have direct internet access and will accessible to the other computers on the
network. The second interface will be attached to the private network that the
worker Pis are connected to and will serve as the DHCP server and router for
that private network. Since the Raspberry Pi comes with an Ethernet adapter and
a wireless network adapter, you can use the built-in Ethernet adapter on all of
the Pis to connect to a switch and form a private network this way. The master
Pi can then connect to your local network using its wireless adapter. Another
possibility is to use a USB Ethernet adapter (purchased from this list of
&lt;a href=&#34;https://elinux.org/RPi_USB_Ethernet_adapters&#34;&gt;Raspberry Pi compatible USB Ethernet adapters&lt;/a&gt;)
on the master Pi so that it can have a stable, wired connection to both
networks. In either case the network setup is illustrated in
@fig:pi-cluster-network-private. The steps to setup this kind of private
network cluster can be found in
&lt;a href=&#34;#pi-private-network-cluster&#34;&gt;Private Network Cluster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi-cluster-network-private.png&#34; alt=&#34;Private Network Cluster&#34;&gt;{#fig:pi-cluster-network-private}&lt;/p&gt;
&lt;h2 id=&#34;pi-network-hostnames&#34;&gt;Network of Pis Hostnames&lt;/h2&gt;
&lt;p&gt;When setting up a cluster of Pis it is necessary to assign a hostname to each Pi
in the cluster. These names are important because they must not be repeated
across Pi clusters and they must not conflict with other devices on the same
network. If you are setting up a small network, almost any hostname will be
fine, but for larger networks you should come up with a naming scheme to avoid
conflicts. For a small cluster you may pick a designation such as a color or
name and then assign a number to each Pi. For example, if you have three Pis you
could call them &lt;code&gt;red01&lt;/code&gt;, &lt;code&gt;red02&lt;/code&gt;, and &lt;code&gt;red03&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For a large cluster we recommend giving each cluster a unique id, for example, a
number from 1 to 100, and then giving each node in the cluster an id that is
based on the cluster that it is assigned to. For example, if each cluster is
named &lt;code&gt;clusterNN&lt;/code&gt; where &lt;code&gt;NN&lt;/code&gt; is a zero-padded number from &lt;code&gt;01&lt;/code&gt; to &lt;code&gt;99&lt;/code&gt; then we
would have clusters named &lt;code&gt;cluster01&lt;/code&gt;, &lt;code&gt;cluster02&lt;/code&gt;, &amp;hellip;,  &lt;code&gt;cluster11&lt;/code&gt;, etc. The
cluster name will not be assigned to any particular Pi. Each Pi will be given a
name that is based on the cluster it is assigned to. If each of your clusters
are made of 5 Pis then you can number your individual Pis with the following
formula:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node number = (cluster number - 1) * 5 + pi number in cluster
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our &lt;code&gt;cluster01&lt;/code&gt; cluster would then have the Pis &lt;code&gt;node001&lt;/code&gt; to &lt;code&gt;node005&lt;/code&gt; and
&lt;code&gt;cluster02&lt;/code&gt; would have the Pis &lt;code&gt;node006&lt;/code&gt; to &lt;code&gt;node010&lt;/code&gt;. Our &lt;code&gt;cluster11&lt;/code&gt; would
have nodes &lt;code&gt;node051&lt;/code&gt; to &lt;code&gt;node055&lt;/code&gt;. We assume the lowest numbered node in each
cluster is the master node. If you have more than 999 Pis or clusters with more
than 5 Pis per cluster then you will have to adjust the naming scheme
accordingly.&lt;/p&gt;
&lt;h2 id=&#34;pi-cluster-prep&#34;&gt;Pi Cluster Preparation&lt;/h2&gt;
&lt;p&gt;To prepare to setup a Pi cluster you will need to choose whether you will be
setting up each Raspberry Pi by hand or by using the tools and scripts that we
have developed to make this task easier and less error prone. The primary tool
that will save time in setting up a Pi cluster is
&lt;a href=&#34;https://github.com/cloudmesh/cm-burn&#34;&gt;cm-burn&lt;/a&gt; which was
introduced in the section &lt;a href=&#34;#pi-cm-burn-sd-card&#34;&gt;Burn an SD Card with cm-burn&lt;/a&gt;.
The installation and setup instructions for cm-burn can be found in the
&lt;a href=&#34;https://github.com/cloudmesh/cm-burn/blob/master/README.md&#34;&gt;cm-burn README.md&lt;/a&gt;.
Once you have &lt;code&gt;cm-burn&lt;/code&gt; successfully installed you can use the instructions here
to setup your cluster. We have also developed some scripts to help setup a Pi
cluster in the
&lt;a href=&#34;https://github.com/cloudmesh-community/pi&#34;&gt;cloudmesh-community/pi&lt;/a&gt;
project. These scripts can be copied to the Pi after it is running to help
complete various setup tasks easily. Use of these scripts will be covered in the
following sections.&lt;/p&gt;
&lt;p&gt;If you choose not to use &lt;code&gt;cm-burn&lt;/code&gt; or to use our scripts we will provide the
manual setup steps for you to complete. In most cases the manual steps are the
exact same as the operations the scripts perform, so you can also check the
manual steps if you are curious about what the scripts are doing. Before
beginning the manual steps shown next, we assume you are able to burn an image to an
SD card, to login to the Pi, and to complete the locale and hostname setup at a
minimum. If you have not completed these steps, please see the following
sections for details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s-install-raspbian&#34;&gt;Install Raspbian on a SD card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-pi-setup-password&#34;&gt;Password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-pi-set-hostname&#34;&gt;Set the hostname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also recommend using ssh keys to connect to your Raspberry Pis rather than
using password authentication. Please see the &lt;a href=&#34;#pi-ssh-keygen&#34;&gt;SSH keygen&lt;/a&gt;
section for details on generating a key on your laptop.&lt;/p&gt;
&lt;p&gt;Any other required steps will be explained in the following sections.&lt;/p&gt;
&lt;h2 id=&#34;pi-direct-network-cluster&#34;&gt;Direct Network Cluster Setup&lt;/h2&gt;
&lt;p&gt;An overview of this cluster setup is included in the
&lt;a href=&#34;#pi-now-configs&#34;&gt;Network of Pis Configurations&lt;/a&gt; section. To complete this setup
you will need to select a set of hostnames for the PIs in your cluster. Please
see the &lt;a href=&#34;#pi-network-hostnames&#34;&gt;Network of Pis Hostnames&lt;/a&gt; section for our
recommendation on setting hostnames. Since each Pi in the cluster will directly
connect to the local network each Pi will have the same network setup. This
makes using this option easier for initial setup and experimentation with a
cluster of Pis. You will need to choose whether the Pis will connect to your
network through a wired Ethernet connection or through a WiFi connection. In
either case you can choose to statically assign an IP address or to let each Pi
get a dynamic IP address using DHCP. Using DHCP may be easier at first but it
can also be a problem if you do not have a monitor connected to the Pi because
you then will not know in advance the IP address that is assigned to each Pi.
Please see the section
&lt;a href=&#34;#pi-find-dhcp-ip-address&#34;&gt;Discover Pi DHCP Network Addresses&lt;/a&gt;
for details on how to find the IP address of a device assigned by DHCP.&lt;/p&gt;
&lt;h3 id=&#34;direct-network-cluster-setup-with-cm-burn&#34;&gt;Direct Network Cluster Setup with cm-burn&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;cm-burn&lt;/code&gt; tool directly supports setting up a cluster of Pis with direct
access to your local network. You can choose to use Ethernet or wireless to
connect and you can statically assign IP addresses or use DHCP. We will give
examples of each use case. First, ensure that &lt;code&gt;cm-burn&lt;/code&gt; is installed following
the directions at &lt;a href=&#34;#pi-cm-burn-sd-card&#34;&gt;Burn an SD Card with cm-burn&lt;/a&gt;. We will
assume that you have five Pis to setup with the names red01 to red05 and the IP
addresses 192.168.1.101 to 192.168.1.105 for static IPs and that your domains
submask is 255.255.255.0. Please substitute the actual values of your local
network here. We further assume that you have setup an ssh key so that you can
login to the Pi without specifying a password. Please see the
&lt;a href=&#34;#pi-ssh-keygen&#34;&gt;SSH keygen&lt;/a&gt; section for details. If you do not have an ssh key
then you can leave the &lt;code&gt;--key&lt;/code&gt; setting out of &lt;code&gt;cm-burn&lt;/code&gt; and skip the manual
sections relating to ssh keys.&lt;/p&gt;
&lt;h4 id=&#34;pi-static-ethernet-setup&#34;&gt;Static IP Ethernet Setup&lt;/h4&gt;
&lt;p&gt;Static Ethernet setup is one of the easiest options with cm-burn. This command
will burn 5 SD cards with the hostnames &lt;code&gt;red01&lt;/code&gt; to &lt;code&gt;red05&lt;/code&gt; in the 192.168.1.1
domain with IPs 192.168.1.101 to 192.168.1.105. It will copy the public ssh key
from your computer onto each of the Pis and disable password logins. After each
card is burned it can be removed and put into a Pi and booted. The Pi will
appear on your network in about one minute after booting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ips 192.168.1.&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;101-105&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; --domain 192.168.1.1 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now be able to connect to the Pi over ssh:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ssh pi@192.168.1.101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you would like to connect to the Pi using the hostname then you will need to
setup the hosts on your host OS. On macOS and Linux this can be done by editing
the &lt;code&gt;/etc/hosts&lt;/code&gt; file and adding a line at the end for each of the Pis. The
format is to start with the IP address, then have whitespace (blank spaces or
tabs) and then the hostname. The file should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
192.168.1.101     red00
192.168.1.102     red01
192.168.1.103     red02
192.168.1.104     red03
192.168.1.105     red04
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;pi-static-wifi-setup&#34;&gt;Static IP WiFi Setup&lt;/h4&gt;
&lt;p&gt;Setting up static IP addresses over Wifi is very similar to doing it over
Ethernet. The only difference is when you burn the SD card with cm-burn you will
need to specify the wireless access point&amp;rsquo;s ssid and passphrase on the command.
You can use the output of &lt;code&gt;wpa_passphrase&lt;/code&gt; as the &lt;code&gt;--psk-hash&lt;/code&gt; parameter or you
can specify the actual passphrase for the wireless network in plain text using
the &lt;code&gt;--psk&lt;/code&gt; parameter. We strongly recommend using the hashed passphrase for
some added security. For more details on the wireless setup please see the
&lt;a href=&#34;#s-wireless-at-home&#34;&gt;Wireless Network at Home&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Using the psk hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ips 192.168.1.&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;101-105&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; --domain 192.168.1.1 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ssid home_network --psk-hash 0617cac0a00f87d23cda5705f5ff97bbc562f5d1907b40f02c39912a7d595b0f &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the actual wireless passphrase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ips 192.168.1.&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;101-105&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; --domain 192.168.1.1 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ssid home_network --psk &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;my passphrase has spaces&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For other details on connecting to the Pis please see the
&lt;a href=&#34;#pi-static-ethernet-setup&#34;&gt;Static IP Ethernet Setup&lt;/a&gt; section.&lt;/p&gt;
&lt;h4 id=&#34;dhcp-ethernet-setup&#34;&gt;DHCP Ethernet Setup&lt;/h4&gt;
&lt;p&gt;To use DHCP over Ethernet the only change from static setup is to remove the
setting of the IP addresses and the domain. Since you do not specify an IP
address, cm-burn will not change the standard setup of the Pi which is to find
an address using DHCP.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the SD cards are finished you can put them into the Pi and they should boot
and join the local network over DHCP in a minute or two. To find the address
assigned to the Pi see the section
&lt;a href=&#34;#pi-find-dhcp-ip-address&#34;&gt;Discover Pi DHCP Network Addresses&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;dhcp-wifi-setup&#34;&gt;DHCP Wifi Setup&lt;/h4&gt;
&lt;p&gt;The DHCP Wifi Setup is only different from the static IP setup in that the
static IP addresses are removed from the cm-burn command. See the
&lt;a href=&#34;#pi-static-wifi-setup&#34;&gt;Static IP WiFi Setup&lt;/a&gt; for more details on setting the
wireless ssid and psk.&lt;/p&gt;
&lt;p&gt;Using the psk hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ssid home_network --psk-hash 0617cac0a00f87d23cda5705f5ff97bbc562f5d1907b40f02c39912a7d595b0f &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the actual wireless passphrase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;01-05&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ssid home_network --psk &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;my passphrase has spaces&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --key ~/.ssh/id_rsa.pub &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;direct-network-cluster-setup-by-hand&#34;&gt;Direct Network Cluster Setup by hand&lt;/h3&gt;
&lt;p&gt;To setup networking on a Pi cluster by hand you can follow these steps depending
on your needs. If you want to setup DHCP over Ethernet you do not need to do
anything. The Pi will automatically connect to DHCP over Ethernet when it is
connected to a network.&lt;/p&gt;
&lt;p&gt;To setup static IP addresses for Ethernet or wireless connections you need to
edit the &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt; file and add the following lines, substituting the
desired IP address and address of your local router:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
interface eth0

static ip_address=192.168.1.101/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1

interface wlan0

static ip_address=192.168.1.101/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The instructions for connecting a Pi to the WiFi network can be found in the
&lt;a href=&#34;#s-wireless-at-home&#34;&gt;Wireless Network at Home&lt;/a&gt; section.&lt;/p&gt;
&lt;h2 id=&#34;pi-private-network-cluster&#34;&gt;Private Network Cluster Setup&lt;/h2&gt;
&lt;p&gt;An overview the design of a private Pi cluster is included in the
&lt;a href=&#34;#pi-now-configs&#34;&gt;Network of Pis Configurations&lt;/a&gt; section. To complete this setup
you will need to select a set of hostnames for the PIs in your cluster. Please
see the &lt;a href=&#34;#pi-network-hostnames&#34;&gt;Network of Pis Hostnames&lt;/a&gt; section for our
recommendation on setting hostnames.&lt;/p&gt;
&lt;h3 id=&#34;private-network-cluster-setup-with-cm-burn-o2&#34;&gt;Private Network Cluster Setup with cm-burn :o2:&lt;/h3&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;Cm-burn does not currently support setting up the master node in a private
network cluster. When it is enhanced to support this we will add the
documentation here.&lt;/p&gt;
&lt;p&gt;To setup the worker nodes in a cluster you can simply decide whether you are
using static IP addresses or DHCP IP addresses and then use the appropriate
section about setting up a direct network. For static IPs instead of using the
domain of your local network you should use the domain of the private Pi
network. Also, you should generate an ssh key on the master Pi and use it when
setting up the worker Pis so that you can connect to them securely from the
master.&lt;/p&gt;
&lt;h3 id=&#34;private-network-cluster-setup-by-hand&#34;&gt;Private Network Cluster Setup by hand&lt;/h3&gt;
&lt;p&gt;The master node of the cluster must use one network device to talk to the local
network and another network device to talk to the other Pis on the private
network. For these steps we will assume that &lt;code&gt;wlan0&lt;/code&gt; is on the local network and
that &lt;code&gt;eth0&lt;/code&gt; is on the private Pi network. These could be switched or replaced
with a USB Ethernet connection with no change to the steps. We assume for these
steps that you have already connected &lt;code&gt;wlan0&lt;/code&gt; to your local network and these
steps will then complete setting up &lt;code&gt;eth0&lt;/code&gt; as the bridge device to the private
Pi network.&lt;/p&gt;
&lt;p&gt;We need the &lt;code&gt;dnsmasq&lt;/code&gt; service as a simple DNS server and the convenience package
&lt;code&gt;iptables-persistent&lt;/code&gt; for making changes to iptables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ apt-get update
$ apt-get install -qy dnsmasq iptables-persistent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To setup our &lt;code&gt;wlan0&lt;/code&gt; as the &lt;em&gt;favored&lt;/em&gt; interface for the Pi to communicate over
the Internet we need to set its metric lower than the &lt;code&gt;eth0&lt;/code&gt; interface. Normally
the Pi will prefer to use the &lt;code&gt;eth0&lt;/code&gt; interface since it is usually faster. This
change can be made in &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt;. This file also where we setup static
IP addresses. If you are not using a static IP address for &lt;code&gt;wlan0&lt;/code&gt; then you
will not have the lines beneath &lt;code&gt;interface wlan0&lt;/code&gt; to set the static IP address.
We will setup our private Pi network to have the IP address range 192.168.50.1
to 192.168.50.255 which means it is 192.168.50.1/24 or, equivalently, uses the
255.255.255.0 subnet mask. You can freely change this and you must choose a
network that does not match the local network. Change &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt; to
match this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface eth0
metric 300

static ip_address=192.168.50.1/24
static routers=192.168.50.1
static domain_name_servers=192.168.50.1

interface wlan0
metric 200

static ip_address=192.168.1.107/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next you need to update &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt; to include the following lines to
enable giving out DHCP addresses on the &lt;code&gt;eth0&lt;/code&gt; network and to give out addresses
in the proper range:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface=eth0
dhcp-range=eth0, 192.168.50.2,192.168.50.250,24h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then need to enable NAT Forwarding by uncommenting (or adding) the following
line in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv4.ip_forward=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The final step is to setup and save our iptables configuration to do the actual
forwarding of packets. Run these commands to set this up properly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
$ sudo iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPT
$ sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT
$ sudo iptables-save &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo tee /etc/iptables/rules.v4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point you can restart the services and everything should be working:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo service dhcpcd restart
$ sudo service dnsmasq restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To find out what IP address has been assigned to each Pi you can use the
&lt;a href=&#34;#pi-find-dhcp-ip-address&#34;&gt;Discover Pi DHCP Network Addresses&lt;/a&gt; section or you
can manually look in the &lt;code&gt;/var/lib/misc/dnsmasq.leases&lt;/code&gt; which will list each
lease and the MAC Address of the device it is leased to.&lt;/p&gt;
&lt;h2 id=&#34;pi-find-dhcp-ip-address&#34;&gt;Discover Pi DHCP Network Addresses&lt;/h2&gt;
&lt;p&gt;If you setup your Pis using DHCP on your local network then you may not know the
IP address that has been dynamically assigned to each Pi. If you have statically
assigned IP addresses to each Pi then you will need to make node of these
assignments and add the hostname mapping to each device that needs to be aware
of the hostnames.&lt;/p&gt;
&lt;p&gt;If you have physical access to each Pi and a compatible monitor and keyboard
then you can login to each of them in sequence and then run &lt;code&gt;ifconfig&lt;/code&gt; to
determine which IP address has been assigned to each of them. If you have access
to the DHCP server that assigns IP address (for example, in your home network)
you can also usually access that device through a web browser to find out which
IP address has been assigned to each device on the network. If you have properly
configured the hostname on each Pi then it should be registered with that name
on your DHCP server.&lt;/p&gt;
&lt;p&gt;It is not trivial to detect all of the devices on a local network. In addition,
if you use static networking then the devices will typically not register or
report their hostnames. However, if you are using DHCP and you have properly
configured the hostname on each Pi, then the following method should work.&lt;/p&gt;
&lt;p&gt;To begin you need the &lt;code&gt;nmap&lt;/code&gt; tool installed on your system. It can be installed
on Linux (on a Pi, for example) using the standard package installation tools
such as &lt;code&gt;sudo apt-get install nmap&lt;/code&gt;. If you are using Windows or macOS, please
see the &lt;a href=&#34;https://nmap.org/book/install.html&#34;&gt;Nmap installation instructions&lt;/a&gt; or
use Homebrew on macOS as &lt;code&gt;brew install nmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To find the Pis you must be on the same network as they are. If you are using
the &lt;a href=&#34;#pi-direct-network-cluster&#34;&gt;Direct Network Cluster&lt;/a&gt; setup then the Pis will
all be on the same network as your laptop. If you are using the
&lt;a href=&#34;#pi-private-network-cluster&#34;&gt;Private Network Cluster&lt;/a&gt; setup
then only the master Pi will be on your local network. If you want to discover
the IP address of the Pis on the private network then you should first login to
the master Pi node and then execute the following commands.&lt;/p&gt;
&lt;p&gt;This works on a Pi substitute your network address range for &lt;code&gt;192.168.1.0/24&lt;/code&gt;.
The first command &lt;code&gt;nmap -sn&lt;/code&gt; will search your local network IP address range
for any devices attached to the network. This process is to find out which
devices are reachable from the host. As a result of the &lt;code&gt;nmap&lt;/code&gt; process, the
host&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&#34;&gt;ARP table&lt;/a&gt;
will be updated with a record of every device (up to the arp cache size limit
but this is probably larger than you will need) on the local network. You can
then use the &lt;code&gt;arp -a&lt;/code&gt; command to list the devices that were found. &lt;code&gt;arp&lt;/code&gt; will
show all devices on any network reachable from this computer, so if you are
running this on the master Pi then it will show devices on both the local
network and the private Pi network. You can filter the &lt;code&gt;arp&lt;/code&gt; results by hostname
or IP address range if you would like using &lt;code&gt;grep&lt;/code&gt;. Note: if you see a lot of
results from &lt;code&gt;arp&lt;/code&gt; listed as &lt;code&gt;(incomplete)&lt;/code&gt; that is OK it means there is
probably not a device at that IP address but the OS is still waiting for a
response. Every OS has a different timeout for responses and any incomplete
entries should eventually disappear.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional: if you want to you can clear the arp cache first&lt;/span&gt;
$ sudo arp -a -d
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Search for devices on the local network&lt;/span&gt;
$ nmap -sn 192.168.1.0/24
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# will list devices in arp cache and lookup hostname&lt;/span&gt;
$ arp -a
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# only show results with hostnames starting with &amp;#34;red&amp;#34;&lt;/span&gt;
$ arp -a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;^red&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# only show results with IP addresses on the specified network&lt;/span&gt;
$ arp -a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;192.168.1.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the following example output from &lt;code&gt;arp -a&lt;/code&gt;, the entry for &lt;code&gt;blue02&lt;/code&gt; is a
Raspberry Pi set to DHCP. The entry for &lt;code&gt;cred&lt;/code&gt; is my laptop. The entry listed
first with the IP &lt;code&gt;10.0.0.103&lt;/code&gt; is a Pi set to a static IP address and the
&lt;code&gt;10.0.0.17&lt;/code&gt; is another device on my network. Even though &lt;code&gt;arp&lt;/code&gt; lists the fully
qualified domain name, you can directly access a host with just the first part
of the name as long as you are also on the same local network (which you must be
or &lt;code&gt;nmap&lt;/code&gt; and &lt;code&gt;arp&lt;/code&gt; would not list the address).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? (10.0.0.103) at b8:43:eb:6e:cf:b7 [ether] on wlan0
? (10.0.0.17) at 10:29:92:53:9e:1b [ether] on wlan0
cred.hsd1.in.comcast.net (10.0.0.90) at e0:f8:8e:2d:34:79 [ether] on wlan0
blue02.hsd1.in.comcast.net (10.0.0.21) at b8:27:b3:73:8d:a3 [ether] on wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are trying to determine whether your DHCP server contains an entry for a
particular device you can use the &lt;code&gt;dig&lt;/code&gt; tool to determine this. &lt;code&gt;dig&lt;/code&gt; is not
installed by default on a Pi but can be installed with
&lt;code&gt;sudo apt-get install dnsutils&lt;/code&gt; and you can lookup a host on any nameserver or
you can specify your local router with the &lt;code&gt;@&lt;/code&gt; symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# lookup red01 on all nameservers&lt;/span&gt;
$ dig red01
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# lookup red01 on the local router DNS&lt;/span&gt;
$ dig red01 @192.168.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &lt;code&gt;dig&lt;/code&gt; is successful you should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; ANSWER SECTION:
red01.                 0       IN      A       192.168.1.43
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pi-ssh-keygen&#34;&gt;SSH keygen&lt;/h2&gt;
&lt;p&gt;An ssh key is a secure means to verify your identity to another computer. Ssh
keys can be used to login to a remote computer without needing a password. This
enhances security because an attacker cannot attempt to crack the password.
However, the private keys that are stored on the client computer are a potential
weakness and must be carefully protected to ensure that they are not
compromised. If you would like more information on SSH keys the
&lt;a href=&#34;https://help.github.com/articles/connecting-to-github-with-ssh/&#34;&gt;GitHub SSH guide&lt;/a&gt;
is highly recommended.&lt;/p&gt;
&lt;p&gt;To generate a new ssh key on macOS or Linux use the &lt;code&gt;ssh-keygen&lt;/code&gt; program. The
same procedure can be followed on Windows by using Git Bash. It will save your
key by default in your home folder in &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; and the public key in
&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;. It is more secure if you supply a passphrase. If you do
supply a passphrase then it must be entered any time you want to use the key. If
you do not supply a passphrase then the private key can be used by anyone and if
someone has a copy of it they can impersonate you and gain access to any
computer that you have access to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also a command to copy your ssh public key to other computers if you
have password access to them already. This can be useful to do when setting up
the private Pi cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ssh-copy-id &amp;lt;hostname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configure-cluster-ssh&#34;&gt;Configure Cluster SSH&lt;/h2&gt;
&lt;p&gt;This was moved from the Kubernetes section.&lt;/p&gt;
&lt;p&gt;Install Dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ apt-get install -qy clusterssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For hostnames rp1-4 (final node names will be: rp0, rp1, rp2, rp3, rp4).&lt;/p&gt;
&lt;p&gt;To update Cluster SSH configuration, add the following to &lt;strong&gt;/etc/clusters&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rpcluster rp1 rp2 rp3 rp4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can run commands to all clusters by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cssh rpcluster
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;parallel-shell&#34;&gt;Parallel Shell&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;cloudmesh-parallel&#34;&gt;Cloudmesh Parallel&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;other-parallel-execution&#34;&gt;Other Parallel Execution&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rittmanmead.com/blog/2014/12/linux-cluster-sysadmin-parallel-command-execution-with-pdsh/&#34;&gt;https://www.rittmanmead.com/blog/2014/12/linux-cluster-sysadmin-parallel-command-execution-with-pdsh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linux.com/news/parallel-ssh-execution-and-single-shell-control-them-all&#34;&gt;https://www.linux.com/news/parallel-ssh-execution-and-single-shell-control-them-all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tecmint.com/using-dsh-distributed-shell-to-run-linux-commands-across-multiple-machines/&#34;&gt;https://www.tecmint.com/using-dsh-distributed-shell-to-run-linux-commands-across-multiple-machines/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vallard/psh&#34;&gt;https://github.com/vallard/psh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/karrick/psh/blob/master/psh&#34;&gt;https://github.com/karrick/psh/blob/master/psh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pi Cluster Form Factor</title>
      <link>/docs/old/pi/case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/case/</guid>
      <description>
        
        
        &lt;p&gt;In this chapter we will discuss a number of opportunities to build small
scale compute and cloud cluster resources using Raspberry Pi&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;This includes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nas-1-pi&#34;&gt;NAS server with one Raspberry Pi 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clusterhat-4-zero-1-pi&#34;&gt;Cluster using 1 Raspberry Pi as master and 4 Raspberry Zeros as
workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Cluster-Case-With-Cooling-5-Pi&#34;&gt;Case With Cooling for 5 Pi)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-octapi&#34;&gt;Build an Octapi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitscope-case-40-pi&#34;&gt;Cluster with 40 Raspberry Pi&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitscope-cluster-144-pi&#34;&gt;Cluster with 144 Raspberry Pi&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#build-your-own-5-node-pi-cluster&#34;&gt;Build Your Own 5 Node Pi Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nas-1-pi&#34;&gt;NAS (1 Pi)&lt;/h2&gt;
&lt;p&gt;Although a NAS is not really a compute cluster the Pi has used many
times to build a Network Attached Storage (NAS) server. In this
configuration a HDD is attached to the Raspberry and the network
features of the Raspberry is used to access the disk drive via software
installed on the PI that make this easily possible. Many tutorials
exists on the Web that help setting op such a device.&lt;/p&gt;
&lt;p&gt;We like to hear from you if you have successfully developed such a NAS
and provide us with such links. Links that may help include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmypi.com/NASpi.php&#34;&gt;https://hackmypi.com/NASpi.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clusterhat-4-zero--1-pi&#34;&gt;ClusterHat (4 Zero + 1 Pi)&lt;/h2&gt;
&lt;p&gt;The smallest cluster we came across is actually a hybrid cluster in
which 4 Pi zeros attached to a Raspberry Pi 3. This sis achieved via an
add on board to the Pi 3 allowing to plug in PI=i Zeros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clusterhat.com/&#34;&gt;https://clusterhat.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Cluster HAT (Hardware Attached on Top) allows to attach 4 Raspberry
Pi Zeros via to be attached to a regular Raspberry PI 3 to simulate a
small cluster.&lt;/p&gt;
&lt;p&gt;According to the Web Site it supports the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USB Gadget Mode: Ethernet and Serial Console.&lt;/li&gt;
&lt;li&gt;Onboard 4 port USB 2.0 hub.&lt;/li&gt;
&lt;li&gt;Raspberry Pi Zeros powered via Controller Pi GPIO (USB optional).&lt;/li&gt;
&lt;li&gt;Individual Raspberry Pi Zero power controlled via the Controller Pi
GPIO (I2C).&lt;/li&gt;
&lt;li&gt;Connector for Controller Serial Console (FTDI Basic).&lt;/li&gt;
&lt;li&gt;Controller Pi can be rebooted without interrupting power to Pi Zeros
(network recovers on boot).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../images/ClusterHAT-v2-supplied-sm.jpg&#34; alt=&#34;Figure: Clusterhat for PI Zero&amp;rsquo;s&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although this setup seems rather appealing, the issue is with obtaining
Pi Zeros for the regional price of $5. Typically users can only by one
for that price and must pay shipping. To by more one has to buy a kit
for about $20. However, for that amount of money it may just be worth
while to get Pi 3&amp;rsquo;s instead of zero&amp;rsquo;s. Nevertheless the form factor is
rather appealing.&lt;/p&gt;
&lt;p&gt;Additional information can be found at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/magpi/clusterhat-review-cluster-hat-kit/&#34;&gt;https://www.raspberrypi.org/magpi/clusterhat-review-cluster-hat-kit/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;temp-cluster&#34;&gt;Cluster Case With Cooling (5 Pi&amp;rsquo;s)&lt;/h2&gt;
&lt;p&gt;Many instructions on the Web exist describing how to build clusters with
3 or more Pi&amp;rsquo;s. One of the considerations that we have to think about is
that we may run rather demanding applications on such clusters causing
heat issues. To eliminate them we must provide proper cooling. In some
cluster projects cooling is not adequately addressed. Hence we like to
provide an example that discusses in detail how to add a fan and what
the fan has for an impact on the temperature.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/IMG16_6273_sweb.jpg&#34; alt=&#34;Closed case for 5 Pi&amp;rsquo;s with case&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://climbers.net/sbc/add-fan-raspberry-pi/&#34;&gt;http://climbers.net/sbc/add-fan-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://climbers.net/sbc/diy-raspberry-pi-3-cluster/&#34;&gt;http://climbers.net/sbc/diy-raspberry-pi-3-cluster/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the previous Web page we find the following information as shown in
the following table. From the data in the table it is clear that we
need to keep the Pi from throttling while being in a case by adding a
fan as obvious from experiment No. 2.&lt;/p&gt;
&lt;p&gt;Table: Temperature comparison of fan impact&lt;/p&gt;
&lt;div class=&#34;smalltable&#34;&gt;
&lt;p&gt;No.   Case   Fan   Direction   RPM      Idle    100% Load   Performance&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1     no     no    -           -        41.0C   75.5C       OK (barely)
2     yes    no    -           -        45.0C   82.5C       throttles
3     yes    5V    in          unknown   37.9C   74.5C       OK (barely)
4     yes    7V    in          800      35.6C   69.5C       OK
5     yes    12V   in          1400     32.5C   61.1C       OK
6     yes    7V    out         800      34.5C   66.4C       OK&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Interesting is also the design of the case that uses snaps instead of
screws to affix the walls to each other. The case layout can be found at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://climbers.net/sbc/diy-raspberry-pi-3-cluster-2017/&#34;&gt;http://climbers.net/sbc/diy-raspberry-pi-3-cluster-2017/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;s-octapi&#34;&gt;Octapi (8 Pi&amp;rsquo;s)&lt;/h2&gt;
&lt;p&gt;A set of instructions on building an is available at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.raspberrypi.org/en/projects/build-an-octapi&#34;&gt;https://projects.raspberrypi.org/en/projects/build-an-octapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../images/octapi-system.png&#34; alt=&#34;Octapi&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;bitscope-case-40-pis&#34;&gt;Bitscope Case (40 Pi&amp;rsquo;s)&lt;/h2&gt;
&lt;p&gt;A company from Australia called BitScope Designs offers a number of
cases that leverage their Pi Blade boards allowing up to four Pis to be
put together and sharing the same power supply. The blades are shown
in the next Figure. The rack to place 10 of them is shown in the
Figure after that.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/04.jpg&#34; alt=&#34;Figure: BitScope blade for 4 Pi&amp;rsquo;s.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/br40a.png&#34; alt=&#34;Figure: 40 Pi Blade rack.&#34;&gt;&lt;/p&gt;
&lt;p&gt;The cost of the blade rack is $ 795.45 + $60.00 shipping + import tax.
This may originally sound expensive when compared to a single case,
however as we can store 40 Pis in them and they can share the
power-supply and reduce cabling we think this case is quite interesting
overall due to its price-point of $20 per Pi.&lt;/p&gt;
&lt;h2 id=&#34;bitscope-cluster-144-pis&#34;&gt;BitScope Cluster (144 Pi&amp;rsquo;s)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=78H-4KqVvrg&#34;&gt;https://www.youtube.com/watch?v=78H-4KqVvrg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Together with LANL a new cluster module that holds 144 Pis is developed.
This system is targeted to be placed into a rack to create a large Pi
cluster. The cost for such a module is about $15K.&lt;/p&gt;
&lt;p&gt;The next Figure shows the module.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/cluster-module.png&#34; alt=&#34;BitScope 144 cluster module.&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;p&gt;The next figure shows how multiple modules can be placed into a
single rack.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/rack-overview.png&#34; alt=&#34;Rack placement of multiple BitScope 144 clustermodules.&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;p&gt;Additional information about this form factor can be found at the
following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cluster.bitscope.com/solutions&#34;&gt;https://cluster.bitscope.com/solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pcper.com/news/General-Tech/BitScope-Unveils-Raspberry-Pi-Cluster-2880-CPU-Cores-LANL-HPC-RD&#34;&gt;https://www.pcper.com/news/General-Tech/BitScope-Unveils-Raspberry-Pi-Cluster-2880-CPU-Cores-LANL-HPC-RD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://my.bitscope.com/store/&#34;&gt;http://my.bitscope.com/store/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://my.bitscope.com/store/?p=view%5C&amp;amp;i=item+7&#34;&gt;http://my.bitscope.com/store/?p=view\&amp;amp;i=item+7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.newark.com/bitscope/bb04b/quattro-pi-board-raspberry-pi/dp/95Y0643&#34;&gt;http://www.newark.com/bitscope/bb04b/quattro-pi-board-raspberry-pi/dp/95Y0643&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linuxgizmos.com/rpi-expansion-boards-support-up-to-40-pi-clusters/&#34;&gt;http://linuxgizmos.com/rpi-expansion-boards-support-up-to-40-pi-clusters/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oracle-cluster-1060-pis&#34;&gt;Oracle Cluster (1060 Pi&amp;rsquo;s)&lt;/h2&gt;
&lt;p&gt;Oracle has displayed at Oracle World 2019 a 1060 node Raspberry Pi Cluster.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/oracle-pi-1060.jpg&#34; alt=&#34;Oracle 1060 Pi Cluster source&#34;&gt;&lt;/p&gt;
&lt;p&gt;More images are available at this
(link)[https://imgur.com/gallery/wx1hZ5D]. the supercomputer features
scores of racks with 21 Raspberry Pi 3 B+ boards each. The system is
used to demonstrate Oracle Autonomous Linux
&lt;a href=&#34;https://www.tomshardware.com/news/oracle-raspberry-pi-supercomputer,40412.html&#34;&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;build-your-own-5-node-pi-cluster&#34;&gt;Build Your Own 5 Node Pi Cluster&lt;/h2&gt;
&lt;p&gt;To experiment with building an elementary cluster one does not need to
have a big budget. Such clusters are often dedicated to research tasks
and are bound into security protocols that do not allow direct access.
Instead it is possible to build such a cluster based on Raspberry Pi&amp;rsquo;s
yourself if you are willing to spend the money or if you have access to
Pi&amp;rsquo;s that you may loan from your department.&lt;/p&gt;
&lt;p&gt;Table &lt;a href=&#34;#T:parts&#34;&gt;Parts&lt;/a&gt; lists one such possible parts list
that will allow you to build a cluster for up to 5 nodes. However make
sure to buy at least 3 Raspberry Pi&amp;rsquo;s with the appropriate memory. At
minimum we recommend you get the 32GB SD card. We do not recommend any
smaller as otherwise you will run out of memory. Additionally, you can
add memory and disks on the USB ports. If you attach a HDD, make sure it
has an external power supply and do not drive it from the USB power as
otherwise the PI becomes unstable. A fan is at this time not yet
included.&lt;/p&gt;
&lt;p&gt;Naturally it is possible to modify the parts list and adapt. If you find
better parts let us know. We have not included any case and you are
welcome to share your suggestions with the class. For a case we are
looking also for a good solution for a fan.&lt;/p&gt;
&lt;p&gt;We suggest that when you build the cluster to do it on a table with a
large white paper or board, or a tablecloth and take pictures of the
various stages of the build so we can include it in this document.&lt;/p&gt;
&lt;p&gt;Initially we just put Raspbian as Operating system on the SD cards and
test out each PI. To do so you will naturally need an SD card writer
that you can hook up to your computer if it does not have one. As you
will have to potentially do this more than once it is not recommended to
buy an SD card with the OS on it. Buy the SD card writer instead so you
can redo the flashing of the card when needed. In addition to the SD
card you need a USB mouse and keyboard and a monitor or TV with HDMI
port.&lt;/p&gt;
&lt;p&gt;Locate setup instructions and write a section in markdown that we will
include here once it is finished. The section is to be managed on
github.&lt;/p&gt;
&lt;p&gt;.&lt;div name=&#34;T:parts&#34; class=&#34;smalltable&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$29.99&lt;/td&gt;
&lt;td&gt;Anker 60W 6-Port USB Wall Charger, PowerPort 6 for iPhone 7 / 6s / Plus, iPad Pro / Air 2 / mini, Galaxy S7 / S6 / Edge / Plus, Note 5 / 4, LG, Nexus, HTC and More&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Anker-6-Port-Charger-PowerPort-iPhone/dp/B00P933OJC/ref=pd_sim_107_70?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=B1S6V5G0CTJ9NH5G0CRT&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$8.90&lt;/td&gt;
&lt;td&gt;Cat 6 Ethernet Cable 1 ft White (6 Pack) - Flat Internet Network Cable - Jadaol Cat 6 Computer Cable short - Cat6 Ethernet Patch Lan Cable With&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Cat-Ethernet-Cable-White-Pack/dp/B01IQWGI0O/ref=sr_1_1?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1513699717&amp;amp;sr=1-1&amp;amp;keywords=Cat+6+Ethernet+Cable+1+ft+White+%28+6+Pack+%29+%E2%80%93+Flat+Internet+Network+Cable+%E2%80%93+Jadaol+Cat+6+Computer+Cable+short+-+Cat6+Ethernet+Patch+Lan+Cable+With%E2%80%A6&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$19.99 &lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;D-link 8-Port Unmanaged Gigabit Switch (GO-SW-8G)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/D-link-8-Port-Unmanaged-Gigabit-GO-SW-8G/dp/B008PC1MSO&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$10.49&lt;/td&gt;
&lt;td&gt;SanDisk Ultra 32GB microSDHC UHS-I Card with Adapter, Grey/Red, Standard Packaging (SDSQUNC-032G-GN6MA)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/SanDisk-microSDHC-Standard-Packaging-SDSQUNC-032G-GN6MA/dp/B010Q57T02/ref=sr_1_10?s=pc&amp;amp;rps=1&amp;amp;ie=UTF8&amp;amp;qid=1498443283&amp;amp;sr=1-10&amp;amp;refinements=p_85:2470955011,p_n_feature_two_browse-bin:6518304011,p_n_feature_keywords_two_browse-bin:5947557011&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$8.59&lt;/td&gt;
&lt;td&gt;Short USB Cable, OKRAY 10 Pack Colorful Micro USB 2.0 Charging Data Sync Cable Cord for Samsung, Android Phone and Tablet, Nexus, HTC, Nokia, LG, Sony, Many Digital Cameras-0.66ft (7.87 Inch)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/OKRAY-Colorful-Charging-Samsung-Cameras-0-66ft/dp/B00R5GZJR6/ref=sr_1_6?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1498447476&amp;amp;sr=1-6&amp;amp;keywords=micro+usb+cable+1ft&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$7.69&lt;/td&gt;
&lt;td&gt;50 Pcs M2 x 20mm + 5mm Hex Hexagonal Threaded Spacer Support&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/20mm-Hexagonal-Threaded-Spacer-Support/dp/B00FH8AB8Q/ref=sr_1_9?s=industrial&amp;amp;ie=UTF8&amp;amp;qid=1513700337&amp;amp;sr=1-9&amp;amp;keywords=hex+spacers+m2+20mm&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$7.99&lt;/td&gt;
&lt;td&gt;Easycargo 15 pcs Raspberry Pi Heatsink Aluminum + Copper + 3M 8810 thermal conductive adhesive tape for cooling cooler Raspberry Pi 3, Pi 2, Pi Model B+&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Easycargo-Raspberry-Heatsink-Aluminum-conductive/dp/B07217N5LS/ref=sr_1_3?s=industrial&amp;amp;ie=UTF8&amp;amp;qid=1513700498&amp;amp;sr=1-3&amp;amp;keywords=raspberry+pi+3&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$34.49&lt;/td&gt;
&lt;td&gt;Raspberry Pi 3 Model B Motherboard (you need at least 3 of them)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Raspberry-Pi-RASPBERRYPI3-MODB-1GB-Model-Motherboard/dp/B01CD5VC92&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$59.99  &lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;1TB drive&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://wdlabs.wd.com/products/wd-pidrive-berryboot-edition/&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$15.19&lt;/td&gt;
&lt;td&gt;64GB flash&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.wdc.com/products/wdlabs/wd-pidrive-foundation-edition.html#WD3750LMCW&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$6.99&lt;/td&gt;
&lt;td&gt;HDMI Cable, Rankie 2-Pack 6FT Latest Standard HDMI 2.0 HDTV Cable - Supports Ethernet, 3D, 4K and Audio Return (Black) - R1108&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Cable-Rankie-2-Pack-Latest-Standard/dp/B00Z07XQ4A/ref=sr_1_6?s=wireless&amp;amp;ie=UTF8&amp;amp;qid=1513782649&amp;amp;sr=1-6&amp;amp;keywords=hdmi+cable+6ft&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$12.99&lt;/td&gt;
&lt;td&gt;AUKEY USB C Adapter, USB C to USB 3.0 Adapter Aluminum 2 Pack for Samsung Note 8 S8 S8+, Google Pixel 2 XL, MacBook Pro, Nexus 6P 5X, LG G5 V20 (Gray)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/AUKEY-Adapter-MacBook-Chromebook-Pixelbook/dp/B072JLRSZ2?th=1&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$19.19&lt;/td&gt;
&lt;td&gt;For Raspberry Pi 3 2 TFT LCD Display, kuman 3.5 Inch 480x320 TFT Touch Screen Monitor for Raspberry Pi Model B B+ A+ A Module SPI Interface with Touch Pen SC06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.amazon.com/Raspberry-Display-kuman-480x320-Interface/dp/B01CNJVG8K/ref=sr_1_1?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1513783748&amp;amp;sr=1-1&amp;amp;keywords=pi+3+lcd+screen+3.5in&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; items were replaced with similar
&lt;sup&gt;2&lt;/sup&gt; item was not available&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;assembling-the-pi-cluster-o2&#34;&gt;Assembling the Pi Cluster :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;TODO: replace the images with one that has white background&lt;/p&gt;
&lt;div class=&#34;smalltable&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Figure&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../images/heat-sync-top.jpg&#34; alt=&#34;Figure 1&#34;&gt;&lt;/td&gt;
&lt;td&gt;First, aluminum and copper heat syncs need to be attached to each Pi. The two aluminum heat syncs are attached to the Broadcom chip and the SMSC Ethernet controller located on the top of the Pi. The blades of the heat syncs are parallel to the longer side of the Pi as shown in black aluminum fanned heat syncs are attached to the top of the pi as shown.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../images/heat-sync-bottom.jpg&#34; alt=&#34;Figure 2&#34;&gt;&lt;/td&gt;
&lt;td&gt;Flat copper heat sync is attached to the bottom of the pi as shown.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../images/pi-cluster-no-wires.jpg&#34; alt=&#34;Figure 3&#34;&gt;&lt;/td&gt;
&lt;td&gt;After attaching the heat syncs, threaded hexagonal spacer supports are used to connect the Pis together. A fully-assembled 5-node Pi cluster is shown.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../images/complete-pi-cluster.jpg&#34; alt=&#34;Figure 4&#34;&gt;&lt;/td&gt;
&lt;td&gt;Each node of the cluster is then attached to the switch using an Ethernet cables and to the power supply using a USB cables. The fully wired cluster is shown.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;virtual-raspberry-cluster-o2&#34;&gt;Virtual Raspberry Cluster :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;It should also be possible to create a virtual raspberry PI cluster
while for example using virtual box. This requires two steps. First the
deployment of a virtualized Raspberry PI. The following information may
be useful for this&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dbakevlar.com/2015/08/emulating-a-raspberry-pi-on-virtualbox/&#34;&gt;http://dbakevlar.com/2015/08/emulating-a-raspberry-pi-on-virtualbox/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step includes the deployment of multiple VMs emulating
Raspberry&amp;rsquo;s. Naturally each should have its own name so you can
distinguish them. Instead of just using the GUI, it would be important
to find out how to start them from a command line as a shell script as
well as tear them down.&lt;/p&gt;
&lt;p&gt;Next you will need to make sure you can communicate from the Pi&amp;rsquo;s to each
other. This is naturally the same as on a real cluster&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;TODO: provide a section&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be chosen as part of your project, but you need to develop a
cloudmesh command for managing the cluster. This includes starting and
stopping as well as check-pointing the cluster from a cloudmesh command.
Furthermore you need to benchmark it and identify how to do this and
contrast this to other clusters that you may start or have access to.
Please get in contact with Gregor. This project is reserved for online
students, as residential students will have access to real Raspberry PI
hardware.&lt;/p&gt;
&lt;p&gt;Please note that this project may have to use QEMU.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pi Clusters on the Internet</title>
      <link>/docs/old/pi/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/links/</guid>
      <description>
        
        
        &lt;p&gt;There is a large number of projects related to creating Pi clusters on
the internet. They vary in size and software installed on
them. Naturally a Pi cluster is a useful training and development
environment for research organizations and thus many bigger projects
are located at universities as well as government labs. However, we
also have many projects done by enthusiasts.&lt;/p&gt;
&lt;p&gt;We distinguish two different efforts. First, we often find projects
that target the creation of cases for such clusters and second, we
find projects that develop software fort these clusters.  This section
will provide an overview of these activities and provide links to
these activities.&lt;/p&gt;
&lt;h2 id=&#34;cluster-cases&#34;&gt;Cluster Cases&lt;/h2&gt;
&lt;h3 id=&#34;lego&#34;&gt;Lego&lt;/h3&gt;
&lt;p&gt;When looking at the placement of the wholes on the Raspberry Pi, the
width between the wholes on the small side seems to be exactly 7 Lego
Technic beam wholes apart. This has the advantage that one could
build a quick frame form Lego pieces such as a&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 * 11 ($0.22) piece &lt;a href=&#34;https://www.brickowl.com/catalog/lego-beam-11-32525-64290&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 * two piece * 4 * 4 ($0.192) &lt;a href=&#34;https://www.brickowl.com/catalog/lego-beam-2-43857&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A number of connector pins
&lt;a href=&#34;https://www.brickowl.com/catalog/lego-technic-pin-with-lengthwise-friction-ridges-and-center-slots-2780&#34;&gt;[link]&lt;/a&gt;
&lt;a href=&#34;https://www.brickowl.com/catalog/lego-long-pin-with-friction-6558&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cost is about $0.25 per piece = $2.74 per pi.&lt;/p&gt;
&lt;p&gt;So if we are having 100 pis we end up with $274. However
we also need still to get screw and Lego connectors which we at this
time have not counted and included in this calculation.&lt;/p&gt;
&lt;p&gt;Naturally Lego&amp;rsquo;s have been explored by others&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/search?q=raspberry+pi+case+lego+technic&amp;amp;rlz=1C5CHFA_enUS727US727&amp;amp;tbm=isch&amp;amp;tbo=u&amp;amp;source=univ&amp;amp;sa=X&amp;amp;ved=0ahUKEwjYwYbni6vbAhWJy4MKHaiiCmYQsAQIMw&amp;amp;biw=1648&amp;amp;bih=883&#34;&gt;Images on google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;University of Southampton:
&lt;a href=&#34;https://www.theregister.co.uk/2012/09/12/raspberry_pi_supercomputer/&#34;&gt;[link]&lt;/a&gt;
Instructions are no longer at the original link&lt;/li&gt;
&lt;li&gt;Lego Technic:
&lt;a href=&#34;https://www.reddit.com/r/raspberry_pi/comments/39kwjc/pidra_my_7_headed_rpi_cluster_with_99_lego/&#34;&gt;[link]&lt;/a&gt;,
&lt;a href=&#34;https://imgur.com/a/rYybo&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lego Technic &lt;a href=&#34;https://www.flickr.com/photos/fotero/7954299054/&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Old style Lego &lt;a href=&#34;https://www.uweziegenhagen.de/?p=3155&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other ideas using Lego&amp;rsquo;s include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compact case: Single board No screws &lt;a href=&#34;https://www.youtube.com/watch?v=UYY72a6wWqs&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zero 3D print Thingverse &lt;a href=&#34;https://www.thingiverse.com/thing:1427245&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;B+ 3D Pi case &lt;a href=&#34;https://www.thingiverse.com/thing:1007347&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other interesting but not cluster related links include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lego hat &lt;a href=&#34;https://www.elektor.de/lego-rpi-board-159010-91&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brick Pi &lt;a href=&#34;https://www.dexterindustries.com/shop/brickpi-advanced-for-raspberry-pi/&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;beast-by-resionio&#34;&gt;Beast by resion.io&lt;/h3&gt;
&lt;p&gt;This company has provided some larger designs for Raspberry Pi clusters
and tries to create a modular system to put a number of Pis on plates
that than can be connected.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Beast 3 &lt;a href=&#34;https://www.youtube.com/watch?v=A5VsfcnfeR0&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Beast 2 &lt;a href=&#34;https://resin.io/blog/the-evolution-of-the-beast-continues/?utm_content=buffer11bf2&amp;amp;utm_medium=social&amp;amp;utm_source=facebook.com&amp;amp;utm_campaign=buffer&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Beast 2 Tile &lt;a href=&#34;https://resin.io/blog/good-better-beast-week-2/&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clusters&#34;&gt;Clusters&lt;/h2&gt;
&lt;p&gt;Additional links which could be useful include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDSC Raspberry Pi2 MPI and Tiled Wall Viz Cluster &lt;a href=&#34;https://github.com/sdsc/sandbox-cluster-guide&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Six Common Errors When Building a Raspberry Pi Cluster &lt;a href=&#34;https://thenewstack.io/6-common-errors-when-building-a-raspberry-pi-cluster/&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 Most Popular Raspberry Pi Cluster Supercomputer Projects &lt;a href=&#34;http://www.mindkits.co.nz/blog/5-Most-Popular-Raspberry-Pi-Cluster-Supercomputer-Projects&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;10 amazing Raspberry Pi clusters &lt;a href=&#34;https://www.networkworld.com/article/3156748/computers/10-amazing-raspberry-pi-clusters.html&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build an OctaPi &lt;a href=&#34;https://projects.raspberrypi.org/en/projects/build-an-octapi&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An older document on how to create an MPI cluster is located at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pi 2 MPI cluster, Boise State &lt;a href=&#34;http://coen.boisestate.edu/ece/files/2013/05/Creating.a.Raspberry.Pi-Based.Beowulf.Cluster_v2.pdf&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;swarm&#34;&gt;Swarm&lt;/h3&gt;
&lt;p&gt;How to set up docker swarm is documented here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pi Docker Cluster &lt;a href=&#34;https://medium.com/@bossjones/how-i-setup-a-raspberry-pi-3-cluster-using-the-new-docker-swarm-mode-in-29-minutes-aa0e4f3b1768&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pi Software Collection</title>
      <link>/docs/old/pi/software2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/software2/</guid>
      <description>
        
        
        &lt;p&gt;Please improve the sections.&lt;/p&gt;
&lt;h2 id=&#34;web-programming&#34;&gt;Web Programming&lt;/h2&gt;
&lt;h3 id=&#34;coder&#34;&gt;Coder&lt;/h3&gt;
&lt;p&gt;Targeted at the very beginner to Web programming, we will not use this
here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://googlecreativelab.github.io/coder&#34;&gt;https://googlecreativelab.github.io/coder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;provide a section&lt;/p&gt;
&lt;h2 id=&#34;computing&#34;&gt;Computing&lt;/h2&gt;
&lt;h3 id=&#34;python-on-the-raspberry-pi-constructionimagesconstructionpng-fa18-516-03&#34;&gt;Python on the Raspberry Pi &lt;img src=&#34;../images/construction.png&#34; alt=&#34;Construction&#34;&gt; fa18-516-03&lt;/h3&gt;
&lt;p&gt;Python packages are typically installed using the &lt;code&gt;pip&lt;/code&gt; tool. &lt;code&gt;pip&lt;/code&gt; will
automatically detect if you are running a compatible OS and platform and will
download a &lt;a href=&#34;https://pythonwheels.com/&#34;&gt;Python wheel&lt;/a&gt; for a given package which
is a pre-compiled binary package that is compatible with your system. Since the
Pi is running an ARM processor (not Intel or AMD compatible) most of the wheels
hosted on PyPi (the standard Python package directory server) are not
compatible. However, there are Pi-compatible wheels hosted on
&lt;a href=&#34;https://pythonwheels.com/&#34;&gt;https://pythonwheels.com/&lt;/a&gt;. The pip package in the latest version of Raspbian is
updated to look in piwheels as an additional package index. If you have an older
version of Raspbian installed you can get the update by running
&lt;code&gt;sudo apt upgrade&lt;/code&gt; to update your system. There is a
&lt;a href=&#34;https://www.piwheels.hostedpi.com/faq.html&#34;&gt;piwheels FAQ&lt;/a&gt; that you may consult
if you have any questions or issues.&lt;/p&gt;
&lt;h3 id=&#34;numpy&#34;&gt;Numpy&lt;/h3&gt;
&lt;p&gt;Refer to other section in book and describe what is different&lt;/p&gt;
&lt;p&gt;provide a section&lt;/p&gt;
&lt;h3 id=&#34;scipy&#34;&gt;Scipy&lt;/h3&gt;
&lt;p&gt;Refer to other section in book and describe what is different&lt;/p&gt;
&lt;p&gt;provide a section&lt;/p&gt;
&lt;h3 id=&#34;image-processing&#34;&gt;Image Processing&lt;/h3&gt;
&lt;p&gt;Refer to other section in book and describe what is different&lt;/p&gt;
&lt;p&gt;provide a section&lt;/p&gt;
&lt;h2 id=&#34;system&#34;&gt;System&lt;/h2&gt;
&lt;h3 id=&#34;dhcp-server&#34;&gt;DHCP Server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.noveldevices.co.uk/rp-dhcp-server&#34;&gt;http://www.noveldevices.co.uk/rp-dhcp-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hostname&#34;&gt;hostname&lt;/h3&gt;
&lt;p&gt;Please see the section &lt;a href=&#34;#s-pi-set-hostname&#34;&gt;Set the hostname&lt;/a&gt; to set the
hostname on the Pi.&lt;/p&gt;
&lt;h3 id=&#34;gather-the-mac-addresses&#34;&gt;Gather the MAC addresses&lt;/h3&gt;
&lt;p&gt;The MAC address is the hardware address of an Ethernet network device. The MAC
address is set by the manufacturer and does not change when you join a different
network like an IP address can. You can get the MAC address for the Ethernet
interface &lt;code&gt;eth0&lt;/code&gt; or the wireless interface &lt;code&gt;wlan0&lt;/code&gt; on the Pi by using the
&lt;code&gt;ifconfig&lt;/code&gt; command and looking for the line that begins with &lt;code&gt;ether&lt;/code&gt;. The
following command will directly output the MAC address for the interface that
you specify. You can run &lt;code&gt;ifconfig&lt;/code&gt; with no parameters to see a list of all the
interfaces.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ ifconfig eth0 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/ether/ {print $2}&amp;#39;&lt;/span&gt;
b8:27:eb:9c:b8:6e
pi$ ifconfig wlan0 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/ether/ {print $2}&amp;#39;&lt;/span&gt;
b8:27:eb:ce:ef:3b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;enable-ssh&#34;&gt;Enable SSH&lt;/h3&gt;
&lt;p&gt;Not tested&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mv /boot/boot_enable_ssh.rc /boot/boot.rc
sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.noveldevices.co.uk/rp-ssh&#34;&gt;http://www.noveldevices.co.uk/rp-ssh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;Not sure if this is needed:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;quot; You may find that you can connect to your Pi with SSH but the session
hangs after a successful logon. This is usually caused because of a
network QoS mismatch that affects certain switches and routers but you
can correct this by editing the two files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/ssh/ssh_config
/etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and adding&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IPQoS 0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to each file as the last record.  &amp;quot; THis is quoted and needs the citation&lt;/p&gt;
&lt;p&gt;Develop a a python script to do that&lt;/p&gt;
&lt;h3 id=&#34;usb-stick&#34;&gt;USB stick&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cat /var/log/messages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;find sda*&lt;/p&gt;
&lt;p&gt;Make sure to find the right name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo fdisk /dev/&amp;lt;device-name&amp;gt;
sudo mkfs -t vfat /dev/&amp;lt;device-name&amp;gt;
mkdir ~/&amp;lt;mount-point&amp;gt;
sudo mount /dev/&amp;lt;device-name&amp;gt; ~/&amp;lt;mount-point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;dhcp-server-on-00&#34;&gt;DHCP server on 00&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install isc-dhcp-server
sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change it to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iface eth0 inet static
address &amp;lt;the-IP-address-of-your-Pi-that-will-be-the-DHCP-server&amp;gt;
netmask &amp;lt;the-subnet-mask-of-your-LAN&amp;gt;
gateway &amp;lt;the-IP-address-of-your-LAN-gateway&amp;gt;
sudo nano /etc/dhcp/dhcpd.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;uncomment the info so the server can start&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subnet &amp;lt;starting-IP-address-of-your-network&amp;gt; netmask &amp;lt;starting-IP-address-of-your-network&amp;gt; {

     range &amp;lt;first-IP-address-of-your-DHCP-address-range&amp;gt; &amp;lt;last-IP-address-of-your-DHCP-address-range&amp;gt;;

     option routers &amp;lt;the-IP-address-of-your-gateway-or-router&amp;gt;;

     option broadcast-address &amp;lt;the-broadcast-IP-address-for-your-network&amp;gt;;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;edit /etc/default/isc-dhcp-server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DHCPD_CONF=/etc/dhcp/dhcpd.conf
DHCPD_PID=/var/run/dhcpd.pid
INTERFACES=&amp;quot;eth0&amp;quot;

sudo service isc-dhcp-server restart
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;temperature&#34;&gt;Temperature&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cat /sys/class/thermal/thermal_zone0/temp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;grafana&#34;&gt;grafana&lt;/h3&gt;
&lt;p&gt;Could be helpful to monitor cluster/clusters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;https://github.com/grafana/grafana&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/weaveworks/grafanalib&#34;&gt;https://github.com/weaveworks/grafanalib&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more, just search. We have not tested them example with
yaml&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jakubplichta/grafana-dashboard-builder&#34;&gt;https://github.com/jakubplichta/grafana-dashboard-builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Light scheme&lt;/p&gt;
&lt;p&gt;in /etc/grafana/grafana.ini uncomment line and set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;default_theme = light
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Preparing the SD card</title>
      <link>/docs/old/pi/clusters/pi-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-setup/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;TODO: We should at this time assume we have an OS.&lt;/p&gt;
&lt;p&gt;Download the latest Raspbian Jessie Lite image from&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.raspberrypi.org/downloads/raspbian/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note that Raspbian Jessie Lite image contains the only the bare
minimum amount of packages.&lt;/p&gt;
&lt;h2 id=&#34;download-etcher-o2&#34;&gt;Download Etcher :o2:&lt;/h2&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcher.io/&#34;&gt;https://etcher.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now follow the instructions in Etcher to flash Raspbian image on the
SD card.  Before ejecting the SD card do the following.&lt;/p&gt;
&lt;h2 id=&#34;enable-ssh-on-the-sd-card-o2&#34;&gt;Enable SSH on the SD Card :o2:&lt;/h2&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;To prevent Raspberry Pis from being hacked the RPi foundation have now
disabled SSH on the default image. So, create a text file in /boot/
called ssh - it can be empty file or you can type anything you want
inside it.&lt;/p&gt;
&lt;p&gt;Please note that you have renamed the ssh.txt to ssh i.e. without
extension.&lt;/p&gt;
&lt;p&gt;Now insert the SD card, networking and power etc.&lt;/p&gt;
&lt;h2 id=&#34;starting-pi-o2&#34;&gt;Starting Pi :o2:&lt;/h2&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;Once you boot up the Raspberry Pi, Connect using SSH&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The password is raspberry.&lt;/p&gt;
&lt;p&gt;For security reasons, please change the default password of the user
pi using the passwd command.&lt;/p&gt;
&lt;p&gt;Note: If you want to change the hostname of the Pi, Use an editor and
change the hostname Raspberry Pi in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    * /etc/hosts
    * /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Projects</title>
      <link>/docs/old/iot/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/projects/</guid>
      <description>
        
        
        &lt;p&gt;Please see the introduction to the IoT section to get started.&lt;/p&gt;
&lt;p&gt;Term project suggestion combining IoT and Big Data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Recognizing street sign in a car robot with a camera&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recognizing street lines in a car robot with camera&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Driving a Robot car swarm without collisions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simulating a City with robot cars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control a robot fish with cameras&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build a distributed sensor system (with your classmates)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Drones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control a drone swarm with positioning system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Suggest your own&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PXE Booting</title>
      <link>/docs/old/pi/clusters/pxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pxe/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;TODO: Problem description&lt;/p&gt;
&lt;p&gt;TODO: provide an example architecture drawing&lt;/p&gt;
&lt;p&gt;TODO: provide the actual steps&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Network booting information can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/net_tutorial.md&#34;&gt;https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/net_tutorial.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web-docs.gsi.de/~bloeher/howto/rpi3_netboot.html&#34;&gt;http://web-docs.gsi.de/~bloeher/howto/rpi3_netboot.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI</title>
      <link>/docs/old/pi/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/board/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry PI&amp;rsquo;s&lt;/a&gt; are a convenient cheap
compute platform that allow us to explore create cloud clusters
with various software that otherwise
would not be accessible to most. The point is not to create a complex
compute platform, but to create a &lt;em&gt;testbed&lt;/em&gt; in which we can explore
configuration aspects and prepare benchmarks that are run on larger
and expensive cloud environments. In addition Raspberry Pis can be used
as a simple Linux terminal to log into other machines.&lt;/p&gt;
&lt;p&gt;We will give a small introduction to the platform next.&lt;/p&gt;
&lt;h2 id=&#34;raspberry-pi-3-b&#34;&gt;Raspberry PI 3 B&lt;/h2&gt;
&lt;p&gt;Till February 2018 the Raspberry PI 3 B was the newest model. Within
this class we have access to about 100 of them. The Raspberry PI 3 B is shown in @fig:pi3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi-3.jpg&#34; alt=&#34;Raspberry PI 3B&#34;&gt;{#fig:pi3}&lt;/p&gt;
&lt;p&gt;The board has the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quad Core 1.2GHz Broadcom BCM2837 64bit CPU&lt;/li&gt;
&lt;li&gt;1GB RAM&lt;/li&gt;
&lt;li&gt;BCM43438 wireless LAN and Bluetooth Low Energy (BLE) on board&lt;/li&gt;
&lt;li&gt;40-pin extended GPIO&lt;/li&gt;
&lt;li&gt;4 USB 2 ports&lt;/li&gt;
&lt;li&gt;4 Pole stereo output and composite video port&lt;/li&gt;
&lt;li&gt;Full size HDMI&lt;/li&gt;
&lt;li&gt;CSI camera port for connecting a Raspberry Pi camera&lt;/li&gt;
&lt;li&gt;DSI display port for connecting a Raspberry Pi touchscreen display&lt;/li&gt;
&lt;li&gt;Micro SD port for loading your operating system and storing data&lt;/li&gt;
&lt;li&gt;Switched Micro USB power source up to 2.5A&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raspberry-pi-3-b-1&#34;&gt;Raspberry PI 3 B+&lt;/h2&gt;
&lt;p&gt;We plan to purchase a number of them so we can conduct performance
experiments and leverage the faster hardware. The newest Raspberry PI 3 B+ is shown in @fig:pi3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi3bplus.jpg&#34; alt=&#34;Raspberry PI 3 B+&#34;&gt;{#fig:pi3bplus}&lt;/p&gt;
&lt;p&gt;The board has the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz&lt;/li&gt;
&lt;li&gt;1GB LPDDR2 SDRAM&lt;/li&gt;
&lt;li&gt;2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN&lt;/li&gt;
&lt;li&gt;Bluetooth 4.2, BLE&lt;/li&gt;
&lt;li&gt;Gigabit Ethernet over USB 2.0 (maximum throughput 300 Mbps)&lt;/li&gt;
&lt;li&gt;Extended 40-pin GPIO header&lt;/li&gt;
&lt;li&gt;Full-size HDMI&lt;/li&gt;
&lt;li&gt;4 USB 2.0 ports&lt;/li&gt;
&lt;li&gt;CSI camera port for connecting a Raspberry Pi camera&lt;/li&gt;
&lt;li&gt;DSI display port for connecting a Raspberry Pi touchscreen display&lt;/li&gt;
&lt;li&gt;4-pole stereo output and composite video port&lt;/li&gt;
&lt;li&gt;Micro SD port for loading your operating system and storing data&lt;/li&gt;
&lt;li&gt;5V/2.5A DC power input&lt;/li&gt;
&lt;li&gt;Power-over-Ethernet (PoE) support (requires separate PoE HAT)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raspberry-pi-zero&#34;&gt;Raspberry PI Zero&lt;/h2&gt;
&lt;p&gt;In addition to the PI 3&amp;rsquo;s another interesting platform is the PI Zero,
which is a very low cost system that can serve as IoT board. However
it is also powerful enough to run more sophisticated applications on
it. The newest Raspberry PI Zero is shown in @fig:pizero.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/Raspberry-Pi-Zero-462x322.jpg&#34; alt=&#34;Raspbery Pi Zero (source)&#34;&gt;{#fig:pizero}&lt;/p&gt;
&lt;p&gt;The board has the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1GHz single-core CPU&lt;/li&gt;
&lt;li&gt;512MB RAM&lt;/li&gt;
&lt;li&gt;Mini HDMI port&lt;/li&gt;
&lt;li&gt;Micro USB OTG port&lt;/li&gt;
&lt;li&gt;Micro USB power&lt;/li&gt;
&lt;li&gt;HAT-compatible 40-pin header&lt;/li&gt;
&lt;li&gt;Composite video and reset headers&lt;/li&gt;
&lt;li&gt;CSI camera connector (v1.3 only)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pin-layout&#34;&gt;Pin Layout&lt;/h2&gt;
&lt;p&gt;The PI 3B, 3B+ and Zero come with a number of pins that can be used to
attach sensors. It is convenient to have the pinout available for your
project. Hence we provide a pinout layout in @fig:pi-layout. Other
Pis will have a differnt pinout and you will have to locate them on
the internet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/rasp3.jpg&#34; alt=&#34;Pinout&#34;&gt;{#fig:pi-layout}&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Detailed information about it are available at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/hardware/raspberrypi/README.md&#34;&gt;https://www.raspberrypi.org/documentation/hardware/raspberrypi/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI 3</title>
      <link>/docs/old/iot/pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/pi/</guid>
      <description>
        
        
        &lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h3 id=&#34;erasing-the-sd-card&#34;&gt;Erasing the SD Card&lt;/h3&gt;
&lt;p&gt;Before you can install an OS on your sd card, you must erase it and put
it in the proper format.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Insert your sd card into your micro-sd adapter and open Disk Utility
with a spotlight search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Disk Utility, right click the name of the sd card and select
erase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name the sd card and format it as MS-DOS (FAT). Then click erase.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/diskutil.png&#34; alt=&#34;image&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it does not erase the first time, try again. It sometimes takes
multiple tries to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;installation-of-noobs&#34;&gt;Installation of NOOBS&lt;/h3&gt;
&lt;p&gt;NOOBS is an OS that includes Raspbian. The official description of
Raspbian can be found
&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;here&lt;/a&gt;. It comes
pre-packaged with many useful programming tools, and is easy to use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download Noobs &lt;a href=&#34;https://www.raspberrypi.org/downloads/noobs/&#34;&gt;here&lt;/a&gt;.
This will take around 30 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to your Finder and in Downloads, search for NOOBS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the NOOBS folder and drag its contents into the sd card in the
devices section. There should be 20 files and folders in the NOOBS
folder. The download should take about 3 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installed, eject the sd card and put it in your raspberry pi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power up your raspberry and you will see a menu like this&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images/noobs.jpg&#34; alt=&#34;Noobs&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select Raspbian and click &lt;code&gt;Install (i)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;installation-of-dexter&#34;&gt;Installation of Dexter&lt;/h3&gt;
&lt;p&gt;The version of Dexter that you want to flash onto your sd card is called
Raspbian for Robots. This is a Raspbian based os that is compatible with
the GrovePi board. It also comes with pre-installed Dexter Industries
software.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, download the most recent Dexter_Industries_jessie.zip file
from
&lt;a href=&#34;https://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the file has downloaded, uncompress it and insert your sd card
into the micro-sd adapter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open etcher and flash the uncompressed jessie image onto the sd
card.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images/etcher.png&#34; alt=&#34;Etcher&#34;&gt;{width=&amp;quot;50%&amp;quot;}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eject your sd card and insert it into your raspberry pi.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;configure&#34;&gt;Configure&lt;/h2&gt;
&lt;h3 id=&#34;prepare-os&#34;&gt;Prepare OS&lt;/h3&gt;
&lt;h2 id=&#34;update&#34;&gt;Update&lt;/h2&gt;
&lt;p&gt;The following are essential updates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install emacs
dpkg -l &amp;gt; ~/Desktop/packages.list
pip freeze &amp;gt; ~/Desktop/pip-freeze-initial.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following are necessary for the scientific libraries, but they
require lots of space. Our sd cards do not have enough space for them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential python-dev python-distlib python-setuptools python-pip python-wheel libzmq-dev libgdal-dev
sudo apt-get install xsel xclip libxml2-dev libxslt-dev python-lxml python-h5py python-numexpr python-dateutil python-six python-tz python-bs4 python-html5lib python-openpyxl python-tables python-xlrd python-xlwt cython python-sqlalchemy python-xlsxwriter python-jinja2 python-boto python-gflags python-googleapi python-httplib2 python-zmq libspatialindex-dev
sudo pip install bottleneck rtree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add to .bashrc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd
git clone git://github.com/yyuu/pyenv.git .pyenv
echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc

export PATH=&amp;quot;/home/pi/.pyenv/bin:$PATH&amp;quot;
eval &amp;quot;$(pyenv init -)&amp;quot;
eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;

curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source&lt;/p&gt;
&lt;h3 id=&#34;update-to-python-361&#34;&gt;Update to Python 3.6.1&lt;/h3&gt;
&lt;h2 id=&#34;change-python-version&#34;&gt;Change python version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux]
(&lt;a href=&#34;https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux&#34;&gt;https://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upgrade setuptools for pip install with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ pip3 install --upgrade setuptools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test your python version with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your python version alternatives&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ update-alternatives --list python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If python2.7 is not in your alternatives, add it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If python3.4 is not in your alternatives, add it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now make python3.4 to your default with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    update-alternatives --config python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select python3.4&lt;/p&gt;
&lt;h2 id=&#34;install-361&#34;&gt;install 3.6.1&lt;/h2&gt;
&lt;p&gt;To install python 3.6.1, follow steps 1 and 2. This is unnecessary for
our purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/dschep/24aa61672a2092246eaca2824400d37f&#34;&gt;better get
3.6.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-cloudmesh-pi&#34;&gt;install cloudmesh-pi&lt;/h2&gt;
&lt;p&gt;pip install cloudmesh-pi&lt;/p&gt;
&lt;p&gt;pip install cloudmesh-pi with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ git clone https://github.com/cloudmesh/cloudmesh-pi.git
    $ cd cloudmesh-pi
    $ sudo pip3 install .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;see how we do this in macOS/linux can this be done on raspberry? if not
document update from source with altinstall&lt;/p&gt;
&lt;h3 id=&#34;install-scientific-libraries&#34;&gt;Install scientific Libraries&lt;/h3&gt;
&lt;p&gt;check if they are already installed we do not have enough space to
install all of these.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-numpy python-matplotlib python-scipy python-sklearn python-pandas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;numpy&lt;br&gt;
matplotlib&lt;br&gt;
scipy&lt;br&gt;
scikitlearn&lt;/p&gt;
&lt;h3 id=&#34;cloudmesh-pi&#34;&gt;cloudmesh-pi&lt;/h3&gt;
&lt;p&gt;cloudmesh-pi is a repository for our GrovePi module classes. These
classes require Dexter software, so you need to either have Raspbian for
Robots or download the software separately.&lt;/p&gt;
&lt;p&gt;If you have Raspbian for Robots, run the following in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd
mkdir github
cd github
git clone https://github.com/cloudmesh/cloudmesh-pi.git
cd cloudmesh-pi
sudo pip install .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-vnc&#34;&gt;Install VNC&lt;/h3&gt;
&lt;p&gt;describe how to install and configure VNC&lt;/p&gt;
&lt;h2 id=&#34;sensors&#34;&gt;Sensors&lt;/h2&gt;
&lt;h3 id=&#34;grove-sensors-o2&#34;&gt;Grove Sensors :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;we already have draft&lt;/p&gt;
&lt;h3 id=&#34;non-grove-sensors-o2&#34;&gt;Non Grove Sensors :o2:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/p&gt;
&lt;p&gt;Elegoo as example&lt;/p&gt;
&lt;h2 id=&#34;notes-to-integrates&#34;&gt;Notes To integrates&lt;/h2&gt;
&lt;h3 id=&#34;connecting&#34;&gt;Connecting&lt;/h3&gt;
&lt;p&gt;Hostnames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;raspberrypi.local&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;raspberrypi.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;change&lt;/p&gt;
&lt;p&gt;recovery.cmdline&lt;/p&gt;
&lt;p&gt;forgot what these were:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;runinstaller quiet ramdisk_size=32768 root=/dev/ram0 init=/init vt.cur_default=1 elevator=deadline
silentinstall runinstaller quiet ramdisk_size=32768 root=/dev/ram0 init=/init vt.cur_default=1 elevator=deadline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Connect the cable&lt;/p&gt;
&lt;p&gt;You will see the activity LEDs flash while the OS installs. Depending on
your SD-Card this can take up to 40-60 minutes.&lt;/p&gt;
&lt;h2 id=&#34;vlc-on-macos&#34;&gt;VLC on macOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.videolan.org/vlc/index.en_GB.html&#34;&gt;http://www.videolan.org/vlc/index.en_GB.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://get.videolan.org/vlc/2.2.6/macosx/vlc-2.2.6.dmg&#34;&gt;http://get.videolan.org/vlc/2.2.6/macosx/vlc-2.2.6.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mybigideas.co.uk/RPi/RPiCamera/&#34;&gt;http://www.mybigideas.co.uk/RPi/RPiCamera/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;camera-on-pi&#34;&gt;Camera on Pi&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install vlc
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&#34;&gt;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackster.io/bestd25/pi-car-016e66&#34;&gt;https://www.hackster.io/bestd25/pi-car-016e66&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;streaming-video&#34;&gt;Streaming video&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.miguelgrinberg.com/post/stream-video-from-the-raspberry-pi-camera-to-web-browsers-even-on-ios-and-android&#34;&gt;https://blog.miguelgrinberg.com/post/stream-video-from-the-raspberry-pi-camera-to-web-browsers-even-on-ios-and-android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux-commandline&#34;&gt;Linux Commandline&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.computerworld.com/article/2598082/linux/linux-linux-command-line-cheat-sheet.html&#34;&gt;http://www.computerworld.com/article/2598082/linux/linux-linux-command-line-cheat-sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enable-spi&#34;&gt;Enable SPI&lt;/h2&gt;
&lt;p&gt;go to the configuration interfaces and enable&lt;/p&gt;
&lt;h2 id=&#34;rtimulib2&#34;&gt;RTIMUlib2&lt;/h2&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/RTIMULib/RTIMULib2.git&#34;&gt;https://github.com/RTIMULib/RTIMULib2.git&lt;/a&gt; cd RTIMULib&lt;/p&gt;
&lt;p&gt;Add the following two lines to /etc/modules&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i2c-bcm2708
i2c-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /dev/i2c-*
sudo apt-get install i2c-tools

sudo i2cdetect -y 1
         0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a file /etc/udev/rules.d/90-i2c.rules and add the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KERNEL==&amp;quot;i2c-[0-7]&amp;quot;,MODE=&amp;quot;0666&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;note: does not work&lt;/p&gt;
&lt;p&gt;instead we do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chmod 666 /dev/i2c-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set the I2C bus speed to 400KHz by adding to /boot/config.txt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dtparam=i2c1_baudrate=400000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot. In terminal change directories to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /home/pi/github/RTIMULib2/RTIMULib/IMUDrivers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emacs RTIMUDefs.h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In RTIMUDefs.h change&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MPU9250_ID 0x71
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MPU9250_ID 0x73



cd /home/pi/github/RTIMULib2/RTIMULib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terminal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
make -j4
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;compile-rtimulib-apps&#34;&gt;Compile RTIMULib Apps&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cd /home/pi/github/RTIMULib2/Linux/RTIMULibCal
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive10
make clean; make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDrive11
make clean; make -j4
sudo make install


cd /home/pi/github/RTIMULib2/Linux/RTIMULibDemo
qmake clean
make clean
qmake
make -j4
sudo make install
cd /home/pi/github/RTIMULib2/Linux/RTIMULibDemoGL
qmake clean
make clean
qmake
make -j4
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;camera&#34;&gt;Camera&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/&#34;&gt;Camera
Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

sudo apt-get install libxvidcore-dev libx264-dev

sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/.cache/pip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy into ~/.profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; echo -e &amp;quot;\n# virtualenv and virtualenvwrapper&amp;quot; &amp;gt;&amp;gt; ~/.profile
 echo &amp;quot;export WORKON_HOME=$HOME/.virtualenvs&amp;quot; &amp;gt;&amp;gt; ~/.profile
 echo &amp;quot;source /usr/local/bin/virtualenvwrapper.sh&amp;quot; &amp;gt;&amp;gt; ~/.profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source ~/.profile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvirtualenv cv -p python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;workon cv&lt;/p&gt;
&lt;p&gt;command line has (cv) in front&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install numpy

wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.1.0.zip
wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip
unzip opencv.zip
unzip opencv_contrib.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lessons-and-projects&#34;&gt;Lessons and Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-guis/worksheet/&#34;&gt;Gui&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/getting-started-with-guis/&#34;&gt;Solder&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/blog/an-image-processing-robot-for-robocup-junior/&#34;&gt;PI Camera Line
Follower&lt;/a&gt;\&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://circuitdigest.com/microcontroller-projects/web-controlled-raspberry-pi-surveillance-robot&#34;&gt;Pi car
flask&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-to-be-integrated&#34;&gt;OTHER TO BE INTEGRATED&lt;/h2&gt;
&lt;h3 id=&#34;pi-emulator-on-windows&#34;&gt;PI emulator on Windows&lt;/h3&gt;
&lt;p&gt;We have not yet tried it, but we like to hear back from you on
experiences with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/rpiqemuwindows/&#34;&gt;https://sourceforge.net/projects/rpiqemuwindows/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scratch&#34;&gt;Scratch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DexterInd/GrovePi/tree/master/Software/Scratch&#34;&gt;scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-server&#34;&gt;Web Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/learning/python-web-server-with-flask/worksheet/&#34;&gt;Web Server
Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI Hadoop Cluster</title>
      <link>/docs/old/pi/clusters/pi-hadoop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-hadoop/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; all the simple setup with sd cards, ssh, keys, and so on should be moved to the NOW cluster section. This way we can require simply a NOW and start without duplication on the real kubernetes install.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; so before you can work on the section you need to make sure the NOW section is up to date.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;See another effort documented at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benchmarking Hadoop and Spark on Mutiple Platforms
&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&#34;&gt;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry Pi IoT Thermostat with Cassandra and Apache Webserver</title>
      <link>/docs/old/pi/clusters/pi-cassandra-apache2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-cassandra-apache2/</guid>
      <description>
        
        
        &lt;p&gt;TODO: See where this fits into the Pi book&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/case.md#build-your-own-5-node-pi-cluster&#34;&gt;Assembling the Pi Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/setup-ultimate.md&#34;&gt;Set up small cluster by hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ahilgenkamp/book/blob/master/chapters/iot/sensors.md&#34;&gt;Smart Thermostat Project (not IoT connected)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setting-up-a-small-pi-cluster-by-hand&#34;&gt;Setting up a Small Pi Cluster by Hand&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;Step 1 should probably be moved to
book/chapters/pi/setup-ultimate.md.  Keeping this
here until it can be combined with the other sections on initial cluster setup.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;burning-os-image-to-sd-cards&#34;&gt;Burning OS image to SD cards&lt;/h3&gt;
&lt;p&gt;The first step in setting up the raspberry pi cluster is to burn the OS image to the SD cards.  In this example we are using &lt;a href=&#34;https://www.amazon.com/Sandisk-Ultra-Micro-UHS-I-Adapter/dp/B073JWXGNT/ref=sr_1_5?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1542828848&amp;amp;sr=1-5&amp;amp;keywords=32+gb+micro+sd+card&#34;&gt;SanDisk 32GB microSD cards.&lt;/a&gt;  If your computer does not have an SD card reader you may need to &lt;a href=&#34;https://www.amazon.com/Anker-Portable-Reader-RS-MMC-Micro/dp/B006T9B6R2/ref=sr_1_3?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1542828941&amp;amp;sr=1-3&amp;amp;keywords=sd+card+reader&#34;&gt;purchase one&lt;/a&gt; for this step.  The first part of this step is to download the required software / files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Raspbian Stretch Lite&lt;/a&gt; - The OS we will be using for the nodes in our pi cluster.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sdcard.org/downloads/formatter_4/&#34;&gt;SD Formatter&lt;/a&gt; - This will be used to ensure the SD card is formatted correctly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.balena.io/etcher/&#34;&gt;Etcher&lt;/a&gt; - Software used to burn the OS image to the SD card.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have the required software and OS image file we can set up each SD card.  In order to ensure the SD card is formatted correctly we will want to run the SD Card Formatter tool.  Ensure that you don&amp;rsquo;t have any other drives connected to you computer and carefully select the drive that corresponds to your SD card.  Then select overwrite format and click format.  This step can take a few minutes but it is good practice to ensure the correct formatting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/SD_format.png&#34; alt=&#34;SD Card Formatter&#34;&gt;{#fig:sd_format}&lt;/p&gt;
&lt;p&gt;While the SD card is formatting you will want to extract the Raspbian Lite image from the zipfle it was downloaded in.  Extract this to your desktop so that it can be used in the next step.  Once the SD card is formatted you can open Etcher.  Select the Raspbian Lite image we saved to the desktop and then check to make sure the correct SD drive is selected by Etcher.  Then click &amp;ldquo;Flash!&amp;rdquo;.  Once this is done you should have the Raspbian Lite image burned to the SD card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/etcher.png&#34; alt=&#34;Etcher&#34;&gt;{#fig:etcher}&lt;/p&gt;
&lt;p&gt;Before pluging the SD card into the Raspberry Pi we will want to add a file to the boot partition.  Open notepad or another editor and save a blank file as &amp;ldquo;ssh&amp;rdquo; with no file extension.  When the raspberry pi boots up it will see this file and enable SSH connections.  At this point we will also edit the &lt;strong&gt;config.txt&lt;/strong&gt; file.  In the file we need to uncomment this line: &lt;code&gt;hdmi_force_hotplug=1&lt;/code&gt;.  This will ensure that your monitor will work correctly should you need to plug it in to a monitor to trouble shoot during the next steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; For this example we will be connecting the cluster to a router through an ethernet connection.  However, you could also configure the parent node to connect to WiFi and then share an internet connection with the worker nodes.  This can be done by setting up a &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=132674&#34;&gt;WiFi to Ethernet bridge.&lt;/a&gt; If you will be setting up the parent node or any of the other nodes to work with WiFi you can do this by automatically by adding a file to the boot partition of the SD card (same location as the ssh file).  To do this open up a text editor and add the following code to the file [@Headless setup].  Once WiFi is enabled you will need to follow the steps included in the &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=132674&#34;&gt;WiFi to Ethernet bridge tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;country=US
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid=&amp;quot;your_real_wifi_ssid&amp;quot;
    scan_ssid=1
    psk=&amp;quot;your_real_password&amp;quot;
    key_mgmt=WPA-PSK
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the code has been added save the file as &lt;strong&gt;wpa_supplicant.conf&lt;/strong&gt; in the boot partition.&lt;/p&gt;
&lt;p&gt;Another great resource for the initial set is a &lt;a href=&#34;https://www.youtube.com/watch?v=H2rTecSO0gk&#34;&gt;youtube video&lt;/a&gt; put together by Davy Wybiral [@Youtube Cluster Setup].&lt;/p&gt;
&lt;p&gt;Once you have completed the initial setup and are connected to the network ensure you are able to SSH to the parent node and the worker nodes.  Use &lt;code&gt;ifconfig&lt;/code&gt; in the terminal to get the IP address for the nodes and you can use a tool such as &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&#34;&gt;PuTTY&lt;/a&gt; to connect.  You can also scan your network with a tool such as &lt;code&gt;nmap&lt;/code&gt; to get the ip addresses connected to your network.  &lt;strong&gt;You will need to keep track of the ip addresses of each node for use in the next steps so it is a good idea to write them down.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-1-setting-up-the-parent-node&#34;&gt;Step 1: Setting up the parent node&lt;/h2&gt;
&lt;p&gt;To get started we need to set up the parent node.  This node will be hosting a web page which allows users on the network to view and change the settings of the smart thermostat.  This node will also be part of the cassandra cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initial Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, SSH into the parent node. We are using the first Raspberry Pi in the cluster but this can be any node. The reason is that the &amp;ldquo;parent&amp;rdquo; will also host the website as well as be a part of the cassandra cluster. If you have not changed the password when initially setting up the Raspberry Pi you should change it before going any further. This can be done by selecting the change password option after running &lt;code&gt;sudo raspi-config&lt;/code&gt;.  Once the password is updated we will update the hostname. This can be done in the &amp;ldquo;Network Options&amp;rdquo; section by selecting &amp;ldquo;Hostname&amp;rdquo; @fig:raspi-config.  In this example we rename our parent node to &lt;strong&gt;PiCluster_p01&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/raspi-config.png&#34; alt=&#34;raspi-config&#34;&gt;{#fig:raspi-config}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install git:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To install git run the following command: &lt;code&gt;sudo apt-get update and sudo apt-get install git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once you have configured git you will need to clone the following repository in order to use the setup scripts and application code.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;First create a directory to store git repositories: &lt;code&gt;mkdir git-repos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;cd git-repos &amp;amp;&amp;amp; git clone https://github.com/cloudmesh-community/fa18-523-84.git&lt;/code&gt; to clone the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Optional:&lt;/strong&gt; Set up git to link with your account&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;git config --global user.email &amp;quot;you@example.com&amp;quot;&lt;/code&gt; to add your user email.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/code&gt; to add your username.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Run Shell Script:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we run the shell script we will need to update some of the files contained in the git-repo that you have cloned in the previous step. The first file is the &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/cassandra_custom.yaml&#34;&gt;cassandra_custom.yaml&lt;/a&gt; file.  The sections listed next need to be updated with the ip addresses that you noted when setting up the Pi&amp;rsquo;s.  The other settings can remain as is.  More information about configuration options can be found on the &lt;a href=&#34;https://cassandra.apache.org/doc/latest/configuration/cassandra_config_file.html&#34;&gt;apache cassandra site.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;seed_provider&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Addresses of hosts that are deemed contact points.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Cassandra nodes use this list of hosts to find each other and learn&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# the topology of the ring.  You must change this if you are running&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# multiple nodes!&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;org.apache.cassandra.locator.SimpleSeedProvider&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;parameters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# seeds is actually a comma-delimited list of addresses.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Ex: &amp;#34;&amp;lt;ip1&amp;gt;,&amp;lt;ip2&amp;gt;,&amp;lt;ip3&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;seeds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.0.0.42,10.0.0.40&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#one address should be the parent node and the other should be another node in the cluster&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;listen_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.0.0.42&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#should be the ip address of the parent node&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rpc_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.0.0.42&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#should be the ip address of the parent node&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to update the &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/FlaskApp.conf&#34;&gt;Flask_App.conf&lt;/a&gt; file.  In this file you will need to up date the ServerName with the ip address of the parent node and the ServerAdmin with your email address.  Also update the last Allow from variable for each directory to allow ip addresses from your local network.&lt;/p&gt;
&lt;p&gt;The last manual update is to edit the &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/FlaskApp/FlaskApp/__init__.py&#34;&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt; file.  You will need to update the variable at the beginning of the file with the ip address of one or both of the cassandra seed nodes that you have set up in the previous step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cassandra_contact_points = [&#39;10.0.0.42&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now run the parent_node shell script to set up the necessary dependencies for the parent node (running this step can take some time).  This step will upgrade the node, install the necessary python modules, complete the setup for cassandra and will configure the apache webserver.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ~/git-repos/fa18-523-84/project-code
chmod u+x parent_node.sh
./parent_node.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-configure-the-worker-nodes&#34;&gt;Step 2: Configure the worker nodes&lt;/h2&gt;
&lt;p&gt;To set up the worker nodes in the cluster you will need to run the &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/cluster_setup.py&#34;&gt;cluster_setup.py&lt;/a&gt; script from a machine on your network.  Before running the script you will need to update the workers dictionary at the beginning of the script.  You can also change the password that is set for each of the nodes.  If you have already setup the password for each of the nodes then you will comment these lines out of the code. When this script completes it will reboot each node.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;workers&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PiCluster_w01&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;10.0.0.36&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PiCluster_w02&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;10.0.0.37&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PiCluster_w03&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;10.0.0.41&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PiCluster_w04&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;10.0.0.40&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;workers&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;():&lt;/span&gt;
	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#print(key+&amp;#39;: &amp;#39;+value)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Connection&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connect_timeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connect_kwargs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;raspberry&amp;#39;&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;uname -s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{}: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;strip&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()))&lt;/span&gt;

	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#change password and hostname&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;INFO: changing password&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;echo pi:Weather_Center01 | sudo chpasswd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#change password to your choice&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;INFO: password changed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the setup has completed for each of the nodes you will need to ssh into each node individually to update the cassandra.yaml file with the ip address of that node.  You will just need to update the listen_address and the rpc_address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo nano ~/apache-cassandra-3.11.3/conf/cassandra.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;listen_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.0.0.42&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#should be the ip address of the node&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rpc_address&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10.0.0.42&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#should be the ip address of the node&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have updated all of the cassandra.yaml files we can start the cassandra cluster.  They should automatically join the cassandra instance running on the parent node creating a single rack datacenter.  This means that the data can be replicated across nodes preventing a single point of failure and faster read / write operations.  To start the rest of the nodes in the cluster you will first need to update the &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/cluster_start.py&#34;&gt;cluster_start.py&lt;/a&gt; script with the ip addresses of each of the nodes.  Once the script has been updated you can run it to start cassandra on each of the nodes.  Once the script has finished running SSH into the parent node and run &lt;code&gt;cd ~/apache-cassandra-3.11.3 &amp;amp;&amp;amp; bin/nodetool status&lt;/code&gt; to check the status of each node.  You should see something similar to @fig:nodetool_status.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/nodetool_status.JPG&#34; alt=&#34;nodetool_status&#34;&gt;{#fig:nodetool_status}&lt;/p&gt;
&lt;h2 id=&#34;step-3-final-configuration-and-starting-the-connected-smart-thermostat&#34;&gt;Step 3: Final Configuration and Starting the Connected Smart Thermostat&lt;/h2&gt;
&lt;p&gt;The next step is to set up the cassandra keyspace that will be used by the smart thermostat and the web interface.  The &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/project-code/cassandra_keyspace_setup.py&#34;&gt;cassandra_keyspace_setup.py&lt;/a&gt; script will set up the &amp;ldquo;smart_therm&amp;rdquo; keyspace and will create two tables in this keyspace. The therm_data table will be used to collect data from the thermostat and display the most recent readings and a trend of the temperature in a chart on the website.  The therm_status table has one record for each device key and is updated when the user enters new settings from the web app.  Before running this script be sure to update the contact points with the seed node ip addresses that were set in the cassandra.yaml file.  If you would like to confirm that the set up happened correctly you can run &lt;code&gt;cd ~/apache-cassandra-3.11.3 &amp;amp;&amp;amp; bin/cqlsh [replace with seed ip address]&lt;/code&gt;.  Once in the cqlsh shell you can enter &lt;code&gt;use smart_therm&lt;/code&gt; and &lt;code&gt;describe keyspace&lt;/code&gt; to see if the tables are set up.&lt;/p&gt;
&lt;p&gt;Now that we have finished setting up the webserver and the cassandra database we will want to start the &lt;strong&gt;smart_thermostat.py&lt;/strong&gt; script on the Raspberry Pi being used as the smart thermostat that was put together in the &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/iot/sensors.md&#34;&gt;smart thermostat project&lt;/a&gt; found in this book.  To start the connected smart thermostat make sure that your clone of the git repository is up to date.  Then run &lt;code&gt;cd ~/git-repos/fa18-523-84/paper/code&lt;/code&gt; to navigate to the directory where the code is located. Once you have moved to the directory you will need to update this file to use the ip addresses of your cassandra seed nodes.  Run &lt;code&gt;sudo nano smart_thermostat.py&lt;/code&gt; and find &lt;code&gt;cassandra_contact_points = [&#39;10.0.0.42&#39;]&lt;/code&gt; as the beginning of the file.  Now that the file has been updated run &lt;code&gt;nohup python3 smart_thermostat.py &amp;amp;&lt;/code&gt; which will run the smart thermostat code in the background.  This allows you to close the SSH connection.&lt;/p&gt;
&lt;p&gt;At this point everything should be working appropriately.  You should now be able to navigate to the ServerName address that you defined when setting up the apache webserver.  This should take you to a site that looks like what is shown in @fig:therm_website.  You can now view your settings, the current statistics and also change the settings of your smart thermostat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/therm_website2.png&#34; alt=&#34;Webpage Example&#34;&gt;{#fig:therm_website}&lt;/p&gt;
&lt;h2 id=&#34;sources&#34;&gt;Sources:&lt;/h2&gt;
&lt;p&gt;Additional sources included in the code needed for this project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS Install guide: &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&#34;&gt;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube Cluster Setup: &lt;a href=&#34;https://www.youtube.com/watch?v=H2rTecSO0gk&#34;&gt;https://www.youtube.com/watch?v=H2rTecSO0gk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Headless setup: &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=191252&#34;&gt;https://www.raspberrypi.org/forums/viewtopic.php?t=191252&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HDMI Monitor Signal issue: &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=34061&#34;&gt;https://www.raspberrypi.org/forums/viewtopic.php?t=34061&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fabric documentation: &lt;a href=&#34;http://docs.fabfile.org/en/latest/getting-started.html&#34;&gt;http://docs.fabfile.org/en/latest/getting-started.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git Setup: &lt;a href=&#34;https://www.atlassian.com/git/tutorials/install-git&#34;&gt;https://www.atlassian.com/git/tutorials/install-git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI Setup (Small Number of PIs)</title>
      <link>/docs/old/pi/setup-ultimate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/setup-ultimate/</guid>
      <description>
        
        
        &lt;p&gt;This section will be the start for the replacement for all previous setup
instructions. I think we want ultimately the section &amp;ldquo;PI Network of
Workstations&amp;rdquo; to also use this or be the final section.&lt;/p&gt;
&lt;p&gt;Once the content has either been integrated here or it is determined that the
previous file is no longer needed, we will move the other file into a deprecated
directory, and remove the file from chapter.yaml.&lt;/p&gt;
&lt;p&gt;We will also need to manage a second documentation just for CM-burn in the
cm-burn repo that just focuses on cm-burn as this is also a stand-alone
program.&lt;/p&gt;
&lt;p&gt;The duplicated sections we are aware of include:&lt;/p&gt;
&lt;p&gt;If its integrated mark the check mark. We need to be careful not to lose info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh/cm-burn/blob/master/README.md&#34;&gt;https://github.com/cloudmesh/cm-burn/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/setup.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/setup.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/setup-dev.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/setup-dev.md&lt;/a&gt;
Now only contains information for a development environment. It needs to be
renamed. Stays in this file for now.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/pi-passwordreset.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/pi-passwordreset.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/run-at-boot.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/run-at-boot.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; deleted &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/sd-card.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/sd-card.md&lt;/a&gt;
integrated in setup-ultimate&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/clusters/pi-configure-cluster.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/clusters/pi-configure-cluster.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/clusters/pi-setup.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/clusters/pi-setup.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There may even be more such documentation as part of student projects. No
student that does a PI project MUST DESCRIBE HOW THEY SET UP THE CLUSTER IN
THEIR REPORT. THEY ALL MUST IMPROVE OR USE THIS SECTION.&lt;/p&gt;
&lt;p&gt;I also see that portions of other files include or can leverage what we do in
cm-burn and thus we can replace that info or merge portions of it such as in and
than these sections need to be fixed while using our ultimate guide, e.g. make a
pointer to it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/pi-kubernetes.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/pi-kubernetes.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/526/readme-kube.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/526/readme-kube.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/pi-kubernetes.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/pi/kubernetes/417/pi-kubernetes.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you see everyone duplicated in part the steps. So what we need is a
single section that describes the cm-burn procedure, but also the
steps needed by hand for those that can not afford the $50 investment
of the mount prg.&lt;/p&gt;
&lt;p&gt;Next we propose an outline. Help improving the outline than contribute
here to this single document while not replicating sections but refer
to sections if needed. IF difference between windows osx and linux,
aslo include the differences.&lt;/p&gt;
&lt;h2 id=&#34;image-choice&#34;&gt;Image Choice&lt;/h2&gt;
&lt;p&gt;When it comes to the operating system install, we have multiple options. One of
the options you will find is the installation of what is called NOOBS. NOOBS is
actually not an operating system, but it installs an operating system. NOOBS has
the feature to install an operating system of choice on the Raspberry. It also
supports recovering from a faulty OS. A good introduction that showcases some of
the features of NOOBS is available at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/blog/introducing-noobs/&#34;&gt;https://www.raspberrypi.org/blog/introducing-noobs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also provides the necessary tools to modify the &lt;code&gt;config.txt&lt;/code&gt; file
that is used at boot time.&lt;/p&gt;
&lt;p&gt;However, as we at this time only intend to use Raspbian as the OS,
there is no need to install NOOBS. If the OS breaks, we simply burn a
new SD card. Hence the features we gain from NOOBS are not as
beneficial to us.&lt;/p&gt;
&lt;p&gt;Instead we will directly install Raspbian on our SD card and configure
it appropriately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/downloads/&#34;&gt;https://www.raspberrypi.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;simulating-a-raspberry-pi-on-a-computer&#34;&gt;Simulating a Raspberry PI on a Computer&lt;/h2&gt;
&lt;p&gt;In case you do not have a computer available, you can also install a
Raspberry Pi in a virtual machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspberry-pi-desktop/&#34;&gt;Raspberry Pi Desktop Downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.raspberrypi.org/rpd_x86_latest&#34;&gt;Raspberry Pi Desktop image direct link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can download the image and start it via
&lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;. As we work with newer PIs we
recommend that you set up under Linux virtual machine with 64 bit with Other.&lt;/p&gt;
&lt;p&gt;Once completed, you will see that it looks something like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi-desktop.png&#34; alt=&#34;Virtual Raspberry Pi&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-single-raspberry-pi&#34;&gt;Setting up a Single Raspberry PI&lt;/h2&gt;
&lt;p&gt;We discuss here the steps to set up a single Raspberry Pi while installing
Raspbian on an SD Card. For this we will use the
&lt;a href=&#34;https://www.etcher.io/&#34;&gt;Etcher&lt;/a&gt; SD card burning tool for Windows and
macOS. Other solutions such as using command line scripts are also available and
are demonstrated in the section about burning SD Cards in Linux.&lt;/p&gt;
&lt;h3 id=&#34;pi-cm-burn-sd-card&#34;&gt;Burn an SD Card with cm-burn &lt;img src=&#34;../images/construction.png&#34; alt=&#34;Construction&#34;&gt; fa18-516-03&lt;/h3&gt;
&lt;p&gt;A very convenient program to create an SD card for a Raspberry Pi is
using the program &lt;code&gt;cm-burn&lt;/code&gt;. The program is available from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cm-burn&#34;&gt;https://github.com/cloudmesh/cm-burn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can be installed with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;mkdir -p cloudmesh-community
cd cloudmesh-community
git clone https://github.com/cloudmesh/cm-burn.git
cd cm-burn
pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will now have the program &lt;code&gt;cm-burn&lt;/code&gt; available. Please note that
&lt;code&gt;cm-burn&lt;/code&gt; is provided without any warranties to work and that if you
damage your system we do not have any liability.&lt;/p&gt;
&lt;p&gt;The command sets up the Raspberry Pi directly on the SD Card without the need
for rebooting it. The downside is that you need to have an OS that can mount the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_file_system&#34;&gt;ext file system&lt;/a&gt;. The ext
file system is native to Linux but it is not currently natively supported on
Windows 10 or macOS. A third party file system driver is available from
&lt;a href=&#34;https://www.paragon-software.com/&#34;&gt;Paragon Software&lt;/a&gt;
that supports ext. The Windows version called
&lt;a href=&#34;https://www.paragon-software.com/home/linuxfs-windows/&#34;&gt;Linux File Systems for Windows&lt;/a&gt;
costs about $20 USD and the macOS version called
&lt;a href=&#34;https://www.paragon-software.com/us/home/extfs-mac/&#34;&gt;extFS for Mac&lt;/a&gt;
costs about $40 USD. Linux supports ext natively and is fully supported by
cm-burn. Detailed information on how to use cm-burn is provided at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cm-burn/blob/master/README.md&#34;&gt;https://github.com/cloudmesh/cm-burn/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use &lt;code&gt;cm-burn&lt;/code&gt; you must first download an image of the Raspberry Pi OS
Raspbian Stretch from &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;. We have
tested the software and these steps with the latest version released on
2018-11-13 and several previous versions. You can download the
&lt;a href=&#34;https://downloads.raspberrypi.org/raspbian_lite_latest&#34;&gt;latest Raspbian Stretch Lite version&lt;/a&gt;
or directly download
&lt;a href=&#34;https://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2018-11-15/2018-11-13-raspbian-stretch-lite.zip&#34;&gt;Raspbian Stretch Lite 2018-11-13&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After downloading the zip file please unzip it and create a directory in your
user folder called &lt;code&gt;.cloudmesh/images&lt;/code&gt; and place the &lt;code&gt;.img&lt;/code&gt; file in this
directory. This is the default location that &lt;code&gt;cm-burn&lt;/code&gt; uses to search for image
files to burn to the SD card.&lt;/p&gt;
&lt;p&gt;You can now burn your first SD card using the following command on Linux or
macOS (TODO: add Windows command):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cm-burn create --name red01 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --ips 192.168.1.101 --domain 192.168.1.1 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --image 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to provide an option to setup an SD card without purchasing any
software we have included the manual setup steps in this document. Please read
and follow the steps in the following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s-install-raspbian&#34;&gt;Install Raspbian on a SD card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-pi-setup-password&#34;&gt;Password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-pi-set-hostname&#34;&gt;Set the hostname&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-wireless-at-home&#34;&gt;Wireless Network at Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-wireless-at-iu&#34;&gt;Wireless Network at IU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s-pi-update-system&#34;&gt;Update the system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;s-install-raspbian&#34;&gt;Install Raspbian on a SD card&lt;/h3&gt;
&lt;p&gt;For many Raspberry Pi related projects we need to install an Operating
system on an SD card. We use &lt;strong&gt;Raspbian&lt;/strong&gt; as the OS as it is widely
supported. Other OS have recently been added to the available list of
operating systems for the PI, but we will at this time not consider
them here.&lt;/p&gt;
&lt;p&gt;To install the OS on an SD Card you will need another computer. We
describe next the process if you have either a MAC or an Linux Ubuntu
machine.  If you have other OSes and like to contribute, please add
your suggestions.&lt;/p&gt;
&lt;p&gt;The processes described in this section only work for a few SD cards and is not
suitable for burning hundreds of SD cards as we would need for a
cluster consisting out of many PI&amp;rsquo;s.&lt;/p&gt;
&lt;h4 id=&#34;download-raspbian&#34;&gt;Download Raspbian&lt;/h4&gt;
&lt;p&gt;No matter which OS you create the SD Cards on, you will need to
download the Raspbian OS.&lt;/p&gt;
&lt;p&gt;Next, you need to download the Raspbian image and place it in a
directory. As you may reuse the image multiple times, we recommend to
place it in a location you remember. Let us assume you place it in
&lt;code&gt;~/Download&lt;/code&gt; directory.
Visit the link&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.raspberrypi.org/raspbian_latest&#34;&gt;https://downloads.raspberrypi.org/raspbian_latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and download the image into the folder of your choice (we assume
&lt;code&gt;~/Download&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;etcher-from-windows-and-macos-linux&#34;&gt;Etcher from Windows and macOS, Linux&lt;/h4&gt;
&lt;p&gt;An easy way to burn a SD Cards on Windows, macOS, and Linux is with a
program called Etcher. Etcher can be downloaded from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcher.io/&#34;&gt;https://etcher.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chose the download suitable for your OS. On Windows you have a couple
of options. We recommend that you use the 64 bit Installer version if
your OS supports it. If you have a Windows 32bit OS, it may be time to
upgrade your computer and/or OS. Also on Linux you need to make sure
you distinguish between 32bit and 64bit.&lt;/p&gt;
&lt;h4 id=&#34;windows-10&#34;&gt;Windows 10&lt;/h4&gt;
&lt;p&gt;Once you download it, start Etcher and select the
unzipped Raspbian image file. Now select the drive of the SD
card. Click Burn and your image will be written to the SD card. You
can monitor the progress and once it is completed the SD card will
automatically unmount. Use it now in your Raspberry Pi.&lt;/p&gt;
&lt;p&gt;The process is the same as the one on macOS&lt;/p&gt;
&lt;h4 id=&#34;macos&#34;&gt;macOS&lt;/h4&gt;
&lt;p&gt;Once the image is downloaded you copy it with Etcher onto the SD-card.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place an SD Card into a SD card reader. We recommend a 32GB card.&lt;/li&gt;
&lt;li&gt;Attach the card reader to the computer&lt;/li&gt;
&lt;li&gt;Open Etcher and select the downloaded &lt;code&gt;.img&lt;/code&gt; or &lt;code&gt;.zip&lt;/code&gt;
file which you will likely find in the &lt;code&gt;~/Download&lt;/code&gt; folder if you
followed our previous steps&lt;/li&gt;
&lt;li&gt;Select the SD card to write the image to. Be careful, to chose the
right location as otherwise you could create unexpected data loss&lt;/li&gt;
&lt;li&gt;Hence, review selections carefully and click &lt;em&gt;Flash!&lt;/em&gt; to begin
writing data to the SD card.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;ubuntu-from-etcher&#34;&gt;Ubuntu from Etcher&lt;/h4&gt;
&lt;p&gt;The process is the same as on macOS.&lt;/p&gt;
&lt;h4 id=&#34;ubuntu-from-commandline&#34;&gt;Ubuntu from Commandline&lt;/h4&gt;
&lt;p&gt;In Ubuntu we can use the advanced Linux commands to burn the SD Cards.
In the file explorer, right click on the SD card and format the SD
card. This is done as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ df -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to list all the drives in the computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert the SD card and run the command again&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now a new entry will be listed which is the SD card&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The left column of the results from &lt;code&gt;df -h&lt;/code&gt; command gives the device
name of your SD card.  It will be listed as something like
&lt;code&gt;/dev/mmcblk0p1&lt;/code&gt; or &lt;code&gt;/dev/sdX1&lt;/code&gt;, where X is a lower case letter
indicating the device.  The last part (p1 or 1 respectively) is the
partition number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write down the name of the SD card (without the partition)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unmount the card so that the card can not be read from or written
to with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ unmount dev/mmcblk0p1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to use correct name for the card. If your card has
multiple partitions unmount all partitions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next write the image to the SD card by running the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dd &lt;span style=&#34;color:#000&#34;&gt;bs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4M &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;path to .img&amp;gt; &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/mmcblk0 &lt;span style=&#34;color:#000&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;progress &lt;span style=&#34;color:#000&#34;&gt;conv&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;fsunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure &lt;code&gt;if=&lt;/code&gt; contains the path to image and &lt;code&gt;of=&lt;/code&gt; contains the name
of the SD card otherwise you may ruin your hard disk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To check, if the image was properly written you can do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create an image again from the SD card by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dd &lt;span style=&#34;color:#000&#34;&gt;bs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4M &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/dev/sdX &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;from-sd-card.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Truncate the image to be the same size as that of the Raspbian image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ truncate --reference &amp;lt;original raspbian image&amp;gt; from-sd-card.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;diff&lt;/code&gt; to see if the two files are same by running the following
command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ diff -s from-sd-card.img &amp;lt;original raspbian image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything is OK, &lt;code&gt;diff&lt;/code&gt; should say that the two files are the same.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In most cases the verification step will not be needed.&lt;/p&gt;
&lt;h3 id=&#34;s-pi-setup-password&#34;&gt;Password&lt;/h3&gt;
&lt;p&gt;Before you bring your Raspberry Pi on the network, you need to reset
the password. This can be done by starting the terminal and typing in
it the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The original password is &lt;code&gt;raspberrypi&lt;/code&gt; and everyone knows it. So if
you put your pi on the network it is easily compromised. Hence, change
your password first.&lt;/p&gt;
&lt;h3 id=&#34;locale&#34;&gt;Locale&lt;/h3&gt;
&lt;p&gt;You want to also set your system to use your language settings for the
keyboard. You can do this from the terminal with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    pi$ sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    pi$ sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or using the GUI.&lt;/p&gt;
&lt;h3 id=&#34;s-pi-set-hostname&#34;&gt;Set the Hostname&lt;/h3&gt;
&lt;p&gt;The hostname is stored in &lt;code&gt;/etc/hostname&lt;/code&gt;. Edit the file and change it
to a name such as green00, green01, green02, green03, green04, green05.
Be consistent with the names. The 00 host should be the topmost host in
the cluster.&lt;/p&gt;
&lt;p&gt;edit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ sudo nano /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after you edited the hostname&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ sudo /etc/init.d/hostname.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Pi can also give an error if the hostname set in &lt;code&gt;/etc/hostname&lt;/code&gt; does not
also have an entry in &lt;code&gt;/etc/hosts&lt;/code&gt; as the local loopback. To fix this, edit
&lt;code&gt;/etc/hosts&lt;/code&gt; and on the last line you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.1.1       raspberrypi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This should be changed to the new host name set in &lt;code&gt;/etc/hostname&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    pi$ sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;s-wireless-at-home&#34;&gt;Wireless Network at Home&lt;/h3&gt;
&lt;p&gt;The easiest way to get internet access and to continue the setup is using a
wireless network. You can configure it either via the GUI or command line. The
&lt;code&gt;raspi-config&lt;/code&gt; utility can also setup a WiFi connection. The steps shown next were taken from the
&lt;a href=&#34;https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md&#34;&gt;Offical Raspberry Pi Wireless setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Raspberry Pi is already configured to connect to a WiFi network, all you
need to do is set your network name (ssid) and passphrase. Additionally, you
should set the current country since some locations have different restrictions
on the available WiFi radio bands. The file
&lt;code&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; contains details about network names
and passwords and you can add your details directly to the bottom of this file
for any wireless networks you would like to connect to. You can directly add the
plain text of your wireless passphrase but it is much better to add the hash of
the passphrase since this will not expose your passphrase. (Please note, however,
that the hash can be used by any computer to connect to the network and a brute
force search could recover your password, but it still better than plain text).&lt;/p&gt;
&lt;p&gt;To find the WiFi networks that your Pi can currently detect run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo iwlist wlan0 scan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The proper format for a wireless network definition is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
country=US
network={
        ssid=&amp;quot;network_name&amp;quot;
        psk=&amp;quot;WiFi passphrase or hash
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Pi comes with a utility that can automatically generate your WiFi passphrase
hash called &lt;code&gt;wpa_passphrase&lt;/code&gt;. You can execute this command to hash your
passphrase and append it to the correct file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wpa_passphrase &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;network_name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;passphrase&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you can run this command and type your pass phrase at the prompt followed by
Enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wpa_passphrase &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;network_name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, &lt;code&gt;wpa_passphrase&lt;/code&gt; includes the original passphrase in plain text
so you will need to edit the file by hand to remove it. Use your favorite editor
and remove the commented out line with the plain text passphrase. At this time
you should also add the country designation as this may be necessary in some
cases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The original file should be changed from this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        ssid=&amp;quot;network_name&amp;quot;
        #psk=&amp;quot;my plaintext passphrase&amp;quot;
        psk=0617cac0927403beefda5705f5ff97bbc562f5d1907b40f02c39912a7d595b0f
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US
network={
        ssid=&amp;quot;network_name&amp;quot;
        psk=0617cac0927403beefda5705f5ff97bbc562f5d1907b40f02c39912a7d595b0f
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can then reconfigure the wireless adapter and it should get an IP address.
You can complete this and see the current setup with the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wpa_cli -i wlan0 reconfigure
$ ifconfig wlan0
$ iwgetid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if you have configured your &lt;code&gt;wlan0&lt;/code&gt; interface with a static IP address
then it will only use this static address. Also, if you configure the same
static IP address for both &lt;code&gt;eth0&lt;/code&gt; and &lt;code&gt;wlan0&lt;/code&gt; (this is the default if you
use &lt;code&gt;cm-burn&lt;/code&gt;) then only one of the interfaces will be assigned an IP address.
This is not a problem and if you disconnect either of the interfaces then the
other one will immediately be assigned the IP address.&lt;/p&gt;
&lt;p&gt;If you need to renew your DHCP lease you can use the following command. If you
want to renew the lease for the Ethernet adapter then replace &lt;code&gt;wlan0&lt;/code&gt; with
&lt;code&gt;eth0&lt;/code&gt;. Note that you will lose your connection to the Pi during this process if
you are connected using the same interface, but the Pi should come back online
after 20 seconds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo dhclient -r wlan0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sleep 10&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; sudo dhclient wlan0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;wireless-network-at-iu-o2&#34;&gt;Wireless Network at IU :o2:&lt;/h3&gt;
&lt;p&gt;:o2: {#s-wireless-at-iu}&lt;/p&gt;
&lt;p&gt;:o2: TODO: Update with new IU public wireless information&lt;/p&gt;
&lt;p&gt;IU runs several different networks. This includes IUSecure, Eduroam,
and ATT Wifi.  The first two would require you to use your IU username
and password to be entered in the configuration. Although technically
possible we find the method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;strong&gt;HIGHLY&lt;/strong&gt; insecure and&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;strong&gt;STRONGLY&lt;/strong&gt; advice against doing so.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us assume you put
your information on a PI and than someone takes the SD Card from
it. They can than look into the card and steal your
password. Obviously this is not advisable. In other cases you may have
configured your software wrong and someone could login remotely and
lift your password remotely. Obviously this is not advisable.&lt;/p&gt;
&lt;p&gt;Regardless, we have seen from instructors the advice to use
IUSecure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is&lt;/em&gt; &lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;strong&gt;WRONG&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do not listen to them about
this particular issue and advise them to use an alternative setup.&lt;/p&gt;
&lt;p&gt;One such alternative (which is also not ideal) is to use the free wifi
offered by ATT Wifi. It is a bit complex to setup as you need to go to
the Web browser to the address &lt;a href=&#34;http:%5C%5Ciu.edu&#34;&gt;http:\\iu.edu&lt;/a&gt; and click on the
connect button. Sometimes that button is not visible so you need to
scroll down to see it.&lt;/p&gt;
&lt;p&gt;We also have an internal network that we will not discuss here, but
can be used upon consultation with Dr. von Laszewski.&lt;/p&gt;
&lt;h3 id=&#34;s-pi-update-system&#34;&gt;Update&lt;/h3&gt;
&lt;p&gt;We want to update the software and make sure
everything is up to date. This is done with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To develop easily we need a number of programs on our Pi. Additional programs can
be installed with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ apt-get install PACKAGE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;PACKAGE&lt;/code&gt; is the name of the software we like to install.
A good example is emacs which can be installed with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ apt-get install emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;remote-access-via-ssh&#34;&gt;Remote access via ssh&lt;/h3&gt;
&lt;p&gt;In the latest Raspbian OS ssh is enabled by default. However, if you discover
that it is not enabled, the following commands should enable it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ sudo systemctl enable ssh
pi$ sudo systemctl start ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally you need to do a bit more such as placing your public key in
the &lt;code&gt;authorized_keys&lt;/code&gt; file explained later, but for now we will just
activate ssh.&lt;/p&gt;
&lt;p&gt;To access the machine using public keys we recommend that you add your
public key to the &lt;code&gt;~pi/.ssh/authorized_keys&lt;/code&gt; file&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-small-cluster-by-hand&#34;&gt;Setting up a Small Cluster by Hand&lt;/h2&gt;
&lt;p&gt;If you would like to setup a Raspberry Pi cluster please refer to the section
&lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt; for details on configuring a cluster by hand or
with our convenient tools and scripts such as &lt;code&gt;cm-burn&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;system-preparation-without-monitor&#34;&gt;System Preparation without Monitor&lt;/h2&gt;
&lt;p&gt;:o2: there is lots of duplication here to the ultimate setup&lt;/p&gt;
&lt;h3 id=&#34;hostname&#34;&gt;hostname&lt;/h3&gt;
&lt;p&gt;Find a way on how to name the host as each of the cluster nodes will
need its own unique name. We simple use color01, where color is the
color of the USB cables you have and the number is the ith PI starting
from the top&lt;/p&gt;
&lt;h3 id=&#34;ssh&#34;&gt;SSH&lt;/h3&gt;
&lt;p&gt;Describe how you enable SSH without a monitor&lt;/p&gt;
&lt;h3 id=&#34;key&#34;&gt;key&lt;/h3&gt;
&lt;p&gt;Describe how you can generate a private key at the right location on the
SD Card. Place your own public key on the SD Card&lt;/p&gt;
&lt;p&gt;Write python programs for this.&lt;/p&gt;
&lt;h3 id=&#34;password&#34;&gt;password&lt;/h3&gt;
&lt;p&gt;Describe how you can change the password on the SD Card&lt;/p&gt;
&lt;h2 id=&#34;post-configuration&#34;&gt;Post configuration&lt;/h2&gt;
&lt;h3 id=&#34;network-addresses&#34;&gt;Network Addresses&lt;/h3&gt;
&lt;p&gt;Some online guides recommend sending a ping to the broadcast address of your
network but Raspbian ignores broadcast pings by default so the Raspberry Pis
will not respond to this and then will not show up in arp tables. &lt;code&gt;nmap&lt;/code&gt; will
work, however.&lt;/p&gt;
&lt;p&gt;This works on a Pi substitute your network submask for &lt;code&gt;192.168.1.0/24&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install -y nmap
$ nmap -sn 192.168.1.0/24
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# will list all devices on the network&lt;/span&gt;
$ arp -a
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# will list devices in arp cache and lookup hostname&lt;/span&gt;
$ arp -a -n
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Same as previous but skips hostname lookup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nmap&lt;/code&gt; is also available on Windows and macOS. It can be downloaded directly from
&lt;a href=&#34;https://nmap.org/book/install.html&#34;&gt;Nmap installation instructions&lt;/a&gt; or
using Homebrew on macOS as &lt;code&gt;brew install nmap&lt;/code&gt;. Usage is as listed previously.&lt;/p&gt;
&lt;h3 id=&#34;key-1&#34;&gt;key&lt;/h3&gt;
&lt;p&gt;Write a python program that does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;login with ssh on each PI and call ssh-keygen to generate a
unique key on each PI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;copy this .pub keys to your computer and store them into a file
called &lt;code&gt;authorized_keys&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;copy that file to all Pis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you may also have to copy your authorized key file to&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vnc&#34;&gt;VNC&lt;/h3&gt;
&lt;p&gt;find out how to set up vnc so you can login into the PI and see its GUI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=74176&#34;&gt;https://www.raspberrypi.org/forums/viewtopic.php?t=74176&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/vnc/&#34;&gt;https://www.raspberrypi.org/documentation/remote-access/vnc/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;host$ &lt;span style=&#34;color:#204a87&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IP&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;IPADDRESSOFPI&amp;gt;
host$ sh pi@&lt;span style=&#34;color:#000&#34;&gt;$IP&lt;/span&gt;

pi@IP&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;s password:
Linux raspberrypi 3.10.25+ &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#622 PREEMPT Fri Feb 3 20:00:00 GMT 2018 armv6l&lt;/span&gt;
pi@raspberrypi ~ $ sudo apt-get tightvncserver   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# download the VNC server&lt;/span&gt;
pi@raspberrypi ~ $ tightvncserver                &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# start the VNC server&lt;/span&gt;
pi@raspberrypi ~ $ vncserver :0 -geometry 1920x1080 -depth &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#start a VNC session&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, back on your Mac:
In the Finder, select Go =&amp;gt; Connect To Server&amp;hellip;
Type &lt;code&gt;vnc://xxx.xxx.xxx.xxx&lt;/code&gt; (where &lt;code&gt;xxx.xxx.xxx.xxx&lt;/code&gt; is the IP address that you discovered in step 2.
Click [Connect]. This will launch the Screen Sharing application, and
with a little luck, you should see this image.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-small-cluster-with-cm-burn&#34;&gt;Setting up a Small Cluster with cm-burn&lt;/h2&gt;
&lt;p&gt;This discusses how to set things up for many PIs with &lt;code&gt;cm-burn&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-large-cluster-with-cm-burn&#34;&gt;Setting up a large cluster with cm-burn&lt;/h2&gt;
&lt;h2 id=&#34;dhcp-setup&#34;&gt;DHCP setup&lt;/h2&gt;
&lt;h3 id=&#34;configure-head-node-port-forwarding-and-dns&#34;&gt;Configure Head Node (port forwarding and DNS)&lt;/h3&gt;
&lt;p&gt;Install Dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ apt-get update
$ apt-get install -qy dnsmasq clusterssh iptables-persistent
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;create-static-ip&#34;&gt;Create Static IP&lt;/h4&gt;
&lt;p&gt;TODO: Verify: This should already be done by &lt;code&gt;cm-burn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Copy old config (-n flag prevents overwrite):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ \cp -n /etc/dhcpcd.conf /etc/dhcpcd.conf.old
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To update DHCP configuration, add the following to &lt;strong&gt;/etc/dhcpd.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface wlan0
metric 200

interface eth0
metric 300
static ip_address=192.168.50.1/24
static routers=192.168.50.1
static domain_name_servers=192.168.50.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;configure-dhcp-server&#34;&gt;Configure DHCP Server:&lt;/h4&gt;
&lt;p&gt;Copy old config (-n flag prevents overwrite):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ \cp -n /etc/dnsmasq.conf /etc/dnsmasq.conf.old
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To update DNS configuration, add the following to &lt;strong&gt;/etc/dhcpd.conf&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface=eth0
interface=wlan0

dhcp-range=eth0, 192.168.50.1, 192.168.50.250, 24h
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;nat-forwarding&#34;&gt;NAT Forwarding&lt;/h4&gt;
&lt;p&gt;To Setup NAT Forwarding, uncomment the following line in &lt;strong&gt;/etc/sysctl.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv4.ip_forward=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ip-tables&#34;&gt;IP Tables&lt;/h4&gt;
&lt;p&gt;Create IP Tables:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
$ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
$ sudo iptables -A FORWARD -i $INTERNAL -o wlan0 -j ACCEPT
$ sudo iptables -A FORWARD -i $EXTERNAL -o eth0 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make rules permanent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ iptables-save &amp;gt; /etc/iptables/rules.v4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ssh-configuration&#34;&gt;SSH Configuration&lt;/h3&gt;
&lt;p&gt;Generate SSH keys:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy key to each compute node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-copy-id &amp;lt;hostname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For hostnames rp1-4 (final node names will be: rp0, rp1, rp2, rp3, rp4).&lt;/p&gt;
&lt;h3 id=&#34;configure-cluster-ssh&#34;&gt;Configure Cluster SSH&lt;/h3&gt;
&lt;p&gt;To update Cluster SSH configuration, add the following to &lt;strong&gt;/etc/clusters&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rpcluster rp1 rp2 rp3 rp4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can run commands to all clusters by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cssh rpcluster
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: This seems to be related to using &lt;code&gt;cssh&lt;/code&gt;
&lt;a href=&#34;https://github.com/duncs/clusterssh/wiki&#34;&gt;Cluster SSH&lt;/a&gt; to update all the nodes
together. I would suggest this is better down by using Docker or Ansible.&lt;/p&gt;
&lt;h3 id=&#34;pxe-boot&#34;&gt;PXE Boot&lt;/h3&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;h2 id=&#34;using-advanced-setups-with-ansible&#34;&gt;Using Advanced setups with Ansible&lt;/h2&gt;
&lt;h2 id=&#34;change-password-on-the-sd-card&#34;&gt;Change Password on the SD-Card&lt;/h2&gt;
&lt;p&gt;It is possible to reset the password for a PI SD Card. This comesin
handy when you did forget it or the team that worked on a Pi has left
the project but valuable information may still be on the PI. To do so,
You need tou unplug the raspberry pi and remove the SD card from the
slot.  Next you need to have the ability to mount the file systems. On
macOS and Windows you can use extFS. Naturally if you have a linux
machine or another PI, you can use an SD Card reader/writer and mount
it directly. You will need root access on the machine where you
execute the password reset.&lt;/p&gt;
&lt;p&gt;After you inserted the card, please Locate and edit the &lt;code&gt;etc/shadow&lt;/code&gt;
file on the SD card. To create a new password use the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl passwd -1 -salt &amp;lt;unique string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we e must find the line that starts with pi and replace the text
between the first and second with the output from the previous command
we had executed in the &lt;code&gt;etc/shadow&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;Now you can Eject the SD card from the computer, and insert it into
the Pi. Boot the raspberry pi and log in to it while using the new
password. This naturally only works if you allow password login. ON
many systems we however disable it and use public key authentication
only. In this case you need to just replace the public key in the
&lt;code&gt;authorized_keys&lt;/code&gt; file. Using just keys is obviously more convenient.&lt;/p&gt;
&lt;p&gt;Naturally mounting the SD Card and looking in the filesystem would also
allow you to look at the network setup. That is certainly not good and
before a PI is returned sensitive information should be cleaned from
the SD Card.&lt;/p&gt;
&lt;h2 id=&#34;creating-backup-questionimagesquestionpng&#34;&gt;Creating Backup &lt;img src=&#34;../images/question.png&#34; alt=&#34;Question&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../images/question.png&#34; alt=&#34;Question&#34;&gt; In this section we will explain how to create a backup of
the image from the SD Card in a PI.&lt;/p&gt;
&lt;h2 id=&#34;duplication-questionimagesquestionpng&#34;&gt;Duplication &lt;img src=&#34;../images/question.png&#34; alt=&#34;Question&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Let us assume you have installed a lot of great programs on the SD Card.
In a cluster, we need to duplicate this card for each PI in the cluster.
Is there a way for us to duplicate the software&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;SD-Card.1&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Improve the Ubuntu SD-card documentation&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SD-Card.2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Could a script be written that does the entire process via a python
or shell command in Ubuntu.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SD-Card.2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Could a script be written that does the entire process via a python
or shell command in macOS?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SD-Card.3&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;could a script be written that does the entire process via a python
or shell command in gitbash for Windows?&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;SD-Card.4&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;In general the Ubuntu documentation is complex, how can it be
simplified? Maybe through automation?&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI Spark Cluster</title>
      <link>/docs/old/pi/clusters/pi-spark-orig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-spark-orig/</guid>
      <description>
        
        
        &lt;p&gt;:o2: :raised_hand: hid: 24&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; all the simple setup with sd cards, ssh, keys, and so on should be moved to the NOW cluster section. This way we can require simply a NOW and start without duplication on the real kubernetes install.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; so before you can work on the section you need to make sure the NOW section is up to date.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The section contains some issues&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A per node setup is used instead of a scripted setup&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Some text in the later part is unclear&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;See another effort documented at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edge Computing and Big Data Processing using Raspberry Pi
Naveen Kaul
&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=104&amp;amp;zoom=100,0,96&#34;&gt;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=104&amp;amp;zoom=100,0,96&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Benchmarking Hadoop and Spark on Mutiple Platforms
&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&#34;&gt;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;
&lt;p&gt;We provide step-by-step instructions on installing a Spark cluster on
a pre-installed hadoop on a cluster of raspberry pi. To start we
assume you have Hadoop installed. This is achieved by following the
instructions provided
in&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;This link needs to be changed, we also need to identify if the hadoop
install for pi is different from the regular hadoop install.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-bigdata.pdf&#34;&gt;http://cyberaide.org/papers/vonLaszewski-bigdata.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to
install Hadoop on Pi cluster. Verify that the cluster is properly
installed. After that proceed by going to the home directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;download&#34;&gt;Download&lt;/h2&gt;
&lt;p&gt;Download the most recent version from the Apache website (we use here
version 2.3.0).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;if a newer version is available, your task will be to use the
newer version and create a new updated set of instructions. At this
time the newest version is 2.3.0. Please double check.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#34;https://www.apache.org/dyn/closer.lua/spark/spark-2.3.0/spark-2.3.0-bin-hadoop2.7.tgz&#34;&gt;Apache Spark&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget http://apache.claz.org/spark/spark-2.3.0/spark-2.3.0-bin-hadoop2.7.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Create the folder for storing spark install files&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo mkdir -p /opt/spark-2.3.0
$ sudo chown -R hduser:hadoop /opt/spark-2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unzip the tar fle into destination folder&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash tar -xzf spark-2.3.0-bin-hadoop2.7.tgz -C /opt/spark-2.3.0 --strip-components=1 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Update the &lt;code&gt;PATH&lt;/code&gt; variable&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export SPARK_HOME=/opt/spark-2.3.0&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export PATH=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/bin&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export PATH=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/sbin&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
$ &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the template from &lt;code&gt;spark-env.sh.template&lt;/code&gt; to &lt;code&gt;spark-env.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cp &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/spark-env.sh.template &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/spark-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit spark-env.sh file to change configurations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ nano &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/spark-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit slaves file on master node&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf
$ cp slaves.template slaves
$ nano slaves
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Update the configurations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SPARK_MASTER_HOST = 169.254.24.132
SPARK_WORKER_MEMORY = 512m
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;it is possible to write a script doing this&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Add the hostnames to the file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pimaster (hostname of master node)&lt;/li&gt;
&lt;li&gt;pislave01 (hostname of worker slave 01)&lt;/li&gt;
&lt;li&gt;pislave02 (hostname of worker slave 02)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;it is possible to write a script doing this&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;test-setup&#34;&gt;Test Setup&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;spark-shell&lt;/code&gt; from the command line. You will have succeed if you
see something like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _&lt;span style=&#34;color:#4e9a06&#34;&gt;\ \/&lt;/span&gt; _ &lt;span style=&#34;color:#4e9a06&#34;&gt;\/&lt;/span&gt; _ &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;/ __/  &lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;_/
   /___/ .__/&lt;span style=&#34;color:#4e9a06&#34;&gt;\_&lt;/span&gt;,_/_/ /_/&lt;span style=&#34;color:#4e9a06&#34;&gt;\_\ &lt;/span&gt;  version 2.3.0
      /_/

Using Scala version 2.11.8 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;Java HotSpot&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;TM&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; Client VM, Java 1.8.0_65&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Repeat previous steps on all worker/slave nodes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;It is unclear which steps these are.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alternative to running previous steps for each worker node, you can run
the the following command on each worked node to create spark directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo mkdir -p /opt/spark-2.3.0&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;
$ sudo chown -R hduser:hadoop /opt/spark-2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run next you can copy the configuration as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rsync -avxP /opt/spark-2.3.0 hduser@pislave:/opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the previous command only after creating the /opt/spark-2.3.0 on
all worker nodes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo mkdir -p /opt/spark-2.3.0
$ sudo chown -R hduser:hadoop /opt/spark-2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;this seems duplicated&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next you need to set the spark home and add it to your path on all
worker nodes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export SPARK_HOME=/opt/spark-2.3.0&amp;#34;&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export PATH=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/bin&amp;#34;&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally you need to start the spark server and workers by running the
master command on the master and the salve command on the slaves&lt;/p&gt;
&lt;p&gt;Run this on the master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/sbin/start_master.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run this on the slave:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/sbin/start_slaves.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test it out use the following URL:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://master_host_name:8080&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Raspberry PI Spark Cluster</title>
      <link>/docs/old/pi/clusters/pi-spark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/clusters/pi-spark/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;We provide step-by-step instructions on installing a Spark cluster on
a cluster of Raspberry Pi&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; all the simple setup with sd cards, ssh, keys, and so on should be moved
to the NOW cluster section. This way we can require simply a NOW and start
without duplication on the real kubernetes install.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; so before you can work on the section you need to make sure the NOW section is up to date.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; The section contains some issues&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A per node setup is used instead of a scripted setup&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Some text in the later part is unclear&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prerequisites-o2&#34;&gt;Prerequisites :o2:&lt;/h2&gt;
&lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;#pi-now-main&#34;&gt;Network of Pis&lt;/a&gt; section we explained how to set up a network
of Pis. Here we assume that we start from such a network. We assume that you
have on all the Raspberry Pi nodes the following software and configuration
files installed:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;SSH&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Configure passwordless SSH key based authentication:
All the public keys of the nodes must be added to all the nodes&amp;rsquo;
authorized keys files. See our SSH information in section on how to
do this.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Java&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;To install Java on the PI please use the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo add-apt-repository ppa:webupd8team/java
pi$ sudo apt-get update
pi$ sudo apt-get install oracle-java8-installer
pi$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export JAVA_HOME=/usr/lib/jvm/java-8-oracle&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
pi$ &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Scala&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;To install Scala you can use the following commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo apt-get install scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Hostnames&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;this can b automatically done and needs to be documented
in the Pi NOW section. THe way we do this is set up key authentication
foirts and than use scp or better cloudmesh to copy it. We need to describe that provess
in more detail in the NOW section.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IN our example we assume we use 3 hosts. The hosts will be added to
the file &lt;code&gt;/etc/hosts&lt;/code&gt;. Please use IP numbers for your network
configuration. For us this is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; 192.168.10.2		pi-master
 192.168.10.3		pi-slave0
 192.168.10.4	 	pi-slave1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;download&#34;&gt;Download&lt;/h2&gt;
&lt;p&gt;Download the most recent version of Spark from the Apache website (we use here
version 2.3.2).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;if a newer version is available, your task will be to use the
newer version and create a new updated set of instructions. At this
time the newest version is 2.3.2. Please double check.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#34;http://spark.apache.org/downloads.html&#34;&gt;Apache Spark Latest Download&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the download is completed run the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ wget https://www.apache.org/dyn/closer.lua/spark/spark-2.3.2/spark-2.3.2-bin-hadoop2.7.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Create the folder for storing spark install files&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo mkdir -p /opt/spark-2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unzip the tar fle into destination folder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi$ bash tar -xzf spark-2.3.2-bin-hadoop2.7.tgz -C /opt/spark-2.3.0 --strip-components=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update the &lt;code&gt;PATH&lt;/code&gt; variable&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export SPARK_HOME=/opt/spark-2.3.2&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
pi$ &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export PATH=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/bin&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
pi# &lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;export PATH=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;/sbin&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;bashrc
pi$ &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the template from &lt;code&gt;spark-env.sh.template&lt;/code&gt; to &lt;code&gt;spark-env.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ cp &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf/spark-env.sh.template &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf/spark-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit &lt;code&gt;spark-env.sh&lt;/code&gt; file to change the configurations and add the
following configurations in to the &lt;code&gt;spark-env.sh&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash
SPARK_WORKER_MEMORY = 512m
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export SPARK_WORKER_CORES=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now edit slaves file on master node&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf/slaves.template &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf/slaves
vi &lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/conf/slaves
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And add the following content. (Change this according to the number of slaves you configure).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi-slave0
pi-slave1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: The previously mentioned slaves are of the same names of the
hostnames specified in the /etc/hosts file in the prerequisites
section.&lt;/p&gt;
&lt;h2 id=&#34;run-spark&#34;&gt;Run Spark&lt;/h2&gt;
&lt;p&gt;Now that you&amp;rsquo;ve followed the installation steps completely you can
start the Spark cluster.  Since the SSH server configurations have
been done, you only need to run the following command on the master
and it will automatically start the Spark workers on the slaves we&amp;rsquo;ve
mentioned in the &lt;code&gt;/etc/hosts&lt;/code&gt; file and setup the whole cluster.&lt;/p&gt;
&lt;p&gt;Run this on the master:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/sbin/start-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now view the Spark cluster information in the Spark Master UI:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://master_IP:8080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can run the following command on the master to stop the cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$SPARK_HOME&lt;/span&gt;/sbin/stop-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;:o2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;see also the file &lt;code&gt;pi-spark-orig.md&lt;/code&gt; as it still contains
useful information such as the output when running pi spark.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;towards-a-cm4-command-for-pi-spar-instalation&#34;&gt;Towards a cm4 command for pi-spar instalation&lt;/h2&gt;
&lt;p&gt;We suggest that a command be developed as part of cm4 taht installs
sparck on a number of machines. THis needs t be done in phases as not
to duplicated work&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Phase 1: add keys: here you add keys to the hosts in the network
using python hostlists as already demonstrated in cm4&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cm4 deploy keys --hosts HOSTNAMES [--key FILEANME]&lt;/code&gt; uses the publick key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phase 2: deploy spark: This deployes spark on the different hosts&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cm4 deploy spark --hosts HOSTNAMES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phase 3: test spark: This runs a simple test to see if things work&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cm4 test spark --hosts HOSTNAMES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the implementation either ansible could be used, or simply a queue
in python executing the various commands or shell scripts.&lt;/p&gt;
&lt;h2 id=&#34;refernces&#34;&gt;Refernces&lt;/h2&gt;
&lt;p&gt;See another effort documented at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Edge Computing and Big Data Processing using Raspberry Pi
&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=104&amp;amp;zoom=100,0,96&#34;&gt;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=104&amp;amp;zoom=100,0,96&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benchmarking Hadoop and Spark on Mutiple Platforms
&lt;a href=&#34;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&#34;&gt;http://cyberaide.org/papers/vonLaszewski-cloud-vol-9.pdf#page=27&amp;amp;zoom=100,0,96&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have an extensive section on how to use SSH keys. However others
also pointed to this
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2&#34;&gt;article&lt;/a&gt;
It describes also how to disable the password for root.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Run Commands at Boot time</title>
      <link>/docs/old/pi/run-at-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/run-at-boot/</guid>
      <description>
        
        
        &lt;p&gt;In many cases we need to provide configurations and programs that run
at boot time.  A number of different methods exist to run commands and
programs at boot time.&lt;/p&gt;
&lt;p&gt;We will be focusing here only a few of them&lt;/p&gt;
&lt;h2 id=&#34;rclocal&#34;&gt;rc.local&lt;/h2&gt;
&lt;p&gt;On your Pi you will find under &lt;code&gt;/etc/rc.local&lt;/code&gt; a file in which you can
list programs that are started up at boot time. The programs should
success fully run and exit with the status 0, and they must not
continuously run in which case they need to be started in background.&lt;/p&gt;
&lt;p&gt;To make sure you do not forget it, simply add the following line at
the end of your program&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;indicating that the start was successful. Programs in rc.local must
use the absolute file path.&lt;/p&gt;
&lt;h2 id=&#34;crontab&#34;&gt;Crontab&lt;/h2&gt;
&lt;p&gt;Crontab is a service the schedules jobs that can run at
various times repeatedly.  For example we can use &lt;code&gt;crontab&lt;/code&gt; to run
commands every hour, every day, every half hour or other time
intervals or at reboot.&lt;/p&gt;
&lt;p&gt;To use crontab follow these steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a terminal and enter the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are doing this for the first time, you will be asked to chose
an editor. Please, choose your favorite editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To run the program at boot time, add the following line to the at the end
of the file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @reboot &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let us look at an example and assume we have test.py program in your
home directory at &lt;code&gt;/home/pi/test.py&lt;/code&gt;. Once you add it to crontab with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @reboot python /home/pi/test.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it will be run at boot time&lt;/p&gt;
&lt;p&gt;It is important to provide the absolute path to the file. In case your
file produces output you need to redirect it into a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  @reboot python /home/pi/test.py &amp;gt; /home/pi/test.log
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When the raspberry pi reboots, the program will run automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;A good introduction to the various methods is provided at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dexterindustries.com/howto/run-a-program-on-your-raspberry-pi-at-startup/&#34;&gt;https://www.dexterindustries.com/howto/run-a-program-on-your-raspberry-pi-at-startup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on crontab see for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adminschoice.com/crontab-quick-reference&#34;&gt;http://www.adminschoice.com/crontab-quick-reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sensors</title>
      <link>/docs/old/iot/sensors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/sensors/</guid>
      <description>
        
        
        &lt;p&gt;This section contains the wiring diagrams and associated classes for sensors that can be used with the Raspberry Pi.  In addition to the individual sensors an example project is also included.  Before getting started with sensors for the Raspberry Pi you will need to ensure that the Pi is set up with python3 and has the latest version of Raspbian installed.  Instructions for setting up the Raspberry Pi can be found &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/iot/pi.md&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ds18b20-temperature-sensor&#34;&gt;DS18B20 Temperature Sensor&lt;/h2&gt;
&lt;p&gt;The DS18B20 is a thermoresistive temperature sensor and can be found in many of the sensor kits referenced in this book.  To set up the DS18B20 connect the jumper wires as shown in @fig:ds18b20_setup.  If you have an individual sensor instead of a sensor module you will need to use a 4.7k ohm resistor as shown in the diagram.  The resistor allows the one wire interface to work properly and should be used to avoid damage to the sensor [@DS18B20_resistor].  If you have a DS18B20 module it may already include a resistor and you will not need to add another.  Be sure to check before setting up your sensor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/DS18B20_setup.png&#34; alt=&#34;DS18B20 Setup&#34;&gt;{#fig:ds18b20_setup}&lt;/p&gt;
&lt;p&gt;Once you have set up the wiring of the DS18B20 you will need to set up the one wire interface.  This can be done with the following steps [@DS18B20_code_setup].&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In a terminal enter:  &lt;code&gt;sudo nano /boot/config.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scroll to the bottom of this text file and enter &lt;code&gt;dtoverlay=w1â€“gpio&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the setup is complete you can use the DS18B20 code provided to output the temperature to the terminal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/ds18b20.py&#34;&gt;DS18B20 Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;temperature-and-humidity-sensor-module&#34;&gt;Temperature and Humidity Sensor Module&lt;/h2&gt;
&lt;p&gt;The temperature and humidity sensor used in this example is the DHT11 sensor which can be purchased as a part of the &lt;a href=&#34;https://www.amazon.com/gp/product/B01J9GD3DG/ref=oh_aui_detailpage_o03_s01?ie=UTF8&amp;amp;psc=1&#34;&gt;Kookye Smart Home Sensor kit&lt;/a&gt; or the &lt;a href=&#34;https://www.amazon.com/ELEGOO-Project-Starter-Tutorial-Arduino/dp/B01D8KOZF4/ref=sr_1_6?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1542065611&amp;amp;sr=1-6&amp;amp;keywords=dht11+temperature+and+humidity+module&#34;&gt;Elegoo Uno Kit.&lt;/a&gt;.  The humidity component of the DHT11 works by measuring the conductivity between two electrodes. Between these electrodes there is a substrate that holds moisture and as the moisture changes the conductivity changes [@How_DHT11_Works]. The temperature sensor of the DHT11 works in the same way as the DS18B20.&lt;/p&gt;
&lt;p&gt;To set up the DHT11 sensor connect jumper wires to the Raspberry Pi as shown in @fig:dht11_setup.  Ensure that the ground wire of the DHT11 is connected to the ground rail of the breadboard or a ground pin on the Raspberry Pi.  The VCC wire of the DHT11 should be connected to 3.3v from the Raspberry Pi.  To receive data the middle pin should be connected to one of the GPIO pins on the Raspberry Pi.  In this example and associated code we connect the data wire to GPIO 4 on the Raspberry Pi as shown in @fig:dht11_setup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/DHT11_setup.png&#34; alt=&#34;DHT11 Setup&#34;&gt;{#fig:dht11_setup}&lt;/p&gt;
&lt;p&gt;Once you have checked that the DHT11 is set up correctly you will need to set up the Adafruit_DHT module for python.  The sample python class utilizes the Adafruit_DHT module which can be set up by executing the following code in a terminal on your Raspberry Pi [@Adafruit_setup].&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/adafruit/Adafruit_Python_DHT.git
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; Adafruit_Python_DHT
sudo apt-get update
sudo apt-get install build-essential python-dev
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have set up the Adafruit_DHT module you can use the python class to display the temperature and humidity reading to the terminal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/temp_humid.py&#34;&gt;Temperature &amp;amp; Humidity Sensor Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;photosensitive-light-sensor-module&#34;&gt;Photosensitive Light Sensor Module&lt;/h2&gt;
&lt;p&gt;The light sensor used in this example can be purchased &lt;a href=&#34;https://www.amazon.com/Gowoops-Digital-Intensity-Detection-Photosensitive/dp/B01N1FKS4L/ref=sr_1_3?ie=UTF8&amp;amp;qid=1543528066&amp;amp;sr=8-3&amp;amp;keywords=arduino+light+sensor+module&#34;&gt;individually&lt;/a&gt; or as part of a sensor kit.  To set up the light sensor module connect the wires to the Raspberry Pi as shown in @fig:light_setup.  The sensor shown in this example has three pins.  However, some sensor modules may have four pins.  In most cases the extra pin is not necessary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/light_setup.png&#34; alt=&#34;Light Sensor Setup&#34;&gt;{#fig:light_setup}&lt;/p&gt;
&lt;p&gt;Once you have set up the light sensor you can use the light_sensor class to retrieve data from the light sensor.  The light sensor will return &amp;ldquo;1&amp;rdquo; if light is not detected and a &amp;ldquo;0&amp;rdquo; if the sensor detects light.  Some sensor modules also include a potentiometer which can be adjusted to change the sensitivity of the light sensor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/light_sensor.py&#34;&gt;Light Sensor Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;capacitive-touch-sensor-module&#34;&gt;Capacitive Touch Sensor Module&lt;/h2&gt;
&lt;p&gt;In this example we are using a &lt;a href=&#34;https://www.adafruit.com/product/1374&#34;&gt;momentary capacitive touch sensor&lt;/a&gt;.  The sensor kits mentioned in this book will also contain this sensor.  To set up the touch sensor connect the wires to the Raspberry Pi as shown in @fig:touch_setup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/touch_setup.png&#34; alt=&#34;Touch Sensor Setup&#34;&gt;{#fig:touch_setup}&lt;/p&gt;
&lt;p&gt;Once you have set up the sensor you can use the touch_sensor class to execute another function when the sensor is touched.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/touch_sensor.py&#34;&gt;Touch Sensor Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;relay-module&#34;&gt;Relay Module&lt;/h2&gt;
&lt;p&gt;The relay module can be used as a switch to complete a circuit.  The module can be purchased as an individual component or may be included on a board with 2, 4 or more relay switches.  In this example we will be using a two channel relay module. To set up the relay module connect the wires to the Raspberry Pi as shown in @fig:relay_setup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/relay_setup.png&#34; alt=&#34;Relay Module Setup&#34;&gt;{#fig:relay_setup}&lt;/p&gt;
&lt;p&gt;Once the module is set up you can use the relay_switch class to turn the relays on and off.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/relay_switch.py&#34;&gt;Relay Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;16-x-2-lcd-screen&#34;&gt;16 x 2 LCD Screen&lt;/h2&gt;
&lt;p&gt;The 16x2 LCD screen can be used as a display for the Raspberry Pi.  To set up the LCD screen connect the wires as shown in @fig:LCD_setup.  You will also need two potentiometers in order to adjust the contrast and the brightness.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/lcd_setup.png&#34; alt=&#34;LCD Setup&#34;&gt;{#fig:lcd_setup}&lt;/p&gt;
&lt;p&gt;Once everything is correctly wired up the LCD class can be used to print text to the LCD display.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/LCD.py&#34;&gt;LCD Class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;compass-noimagesnopng&#34;&gt;Compass &lt;img src=&#34;images/no.png&#34; alt=&#34;No&#34;&gt;&lt;/h2&gt;
&lt;p&gt;TODO: which compass sensor&lt;/p&gt;
&lt;p&gt;The default pins are defined in variants/nodemcu/pins_arduino.h as GPIO&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    SDA=4
    SCL=5
    D1=5
    D2=4.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also choose the pins yourself using the I2C constructor
Wire.begin(int sda, int scl);&lt;/p&gt;
&lt;h2 id=&#34;project-smart-thermostat&#34;&gt;Project: Smart Thermostat&lt;/h2&gt;
&lt;p&gt;In this example we will combine some of the sensors discussed in this section to create a smart thermostat.  The first step of this project is to make sure that you have a Raspberry Pi which has Raspbian installed and is configured appropriately.  Instructions for how to complete the basic set up of your Raspberry Pi can be found in the &lt;a href=&#34;https://github.com/ahilgenkamp/book/blob/master/chapters/pi/setup-ultimate.md&#34;&gt;Setting up a Single Raspberry PI&lt;/a&gt; section of this book.&lt;/p&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 with Raspbian installed&lt;/li&gt;
&lt;li&gt;DHT11 Temperature and Humidity Sensor&lt;/li&gt;
&lt;li&gt;Photosensitive Light Sensor&lt;/li&gt;
&lt;li&gt;Capacitive Touch Sensor&lt;/li&gt;
&lt;li&gt;2 Channel Relay Module&lt;/li&gt;
&lt;li&gt;16x2 LCD display&lt;/li&gt;
&lt;li&gt;Three bread boards&lt;/li&gt;
&lt;li&gt;Two potentiometers&lt;/li&gt;
&lt;li&gt;4 female to female jumper wires&lt;/li&gt;
&lt;li&gt;24 male to male jumper wires&lt;/li&gt;
&lt;li&gt;12 male to female jumper wires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If using the LED&amp;rsquo;s you will want the additional components listed next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three 4.7k ohm resistors&lt;/li&gt;
&lt;li&gt;Three LED&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;3 additional male to male jumper wires&lt;/li&gt;
&lt;li&gt;4 additional male to female jumper wires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have the necessary components you will need to connect the wires as shown in @fig:smart_therm.  The LED lights in this example represent the connections to the actual thermostat. It is suggested that you test the set up using the LED&amp;rsquo;s to ensure that everything is wired correctly and that you are getting the expected results.  We will cover how to connect the smart thermostat to your HVAC system later in this example. For this project three separate breadboards are used to hold different components.  The first one will hold the LCD and potentiometers used to adjust contrast and brightness.  The second will hold all of the sensors and the third will be used to either hold the LED&amp;rsquo;s or distribute power from the HVAC system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/smart_therm_diagram.png&#34; alt=&#34;Smart_Thermostat Setup&#34;&gt;{#fig:smart_therm}&lt;/p&gt;
&lt;p&gt;Once all of the components are connected as shown in @fig:smart_therm we need to test each of the sensors.  To do this we will first need to set up the raspberry pi.  This can be done by running the thermostat_setup.sh shell script.  To run this open a terminal and type &lt;code&gt;nano thermostat_setup.sh&lt;/code&gt; then copy the code from &lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/thermostat_setup.sh&#34;&gt;thermostat_setup.sh&lt;/a&gt;.  Once you have copied the code, close the editor and run &lt;code&gt;chmod u+x thermostat_setup.sh&lt;/code&gt;.  Then run &lt;code&gt;./thermostat_setup.sh&lt;/code&gt; to run the code to add the code and dependencies needed for this project.&lt;/p&gt;
&lt;p&gt;Once the thermostat_setup.sh script has finished running there will be a new directory containing the code for this project.  Navigate to this directory with &lt;code&gt;cd ~/git-repos/fa18-523-84/paper/code&lt;/code&gt;.  We will now test each of the components by running the following commands.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 LCD.py&lt;/code&gt; This should show the output &amp;ldquo;Hello World!&amp;rdquo; on the LCD screen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 temp_humid.py&lt;/code&gt; Should show the current temp and humidity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 ds18b20.py&lt;/code&gt; Should show temp. (using this sensor as well because temp is more accurate)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 light_sensor.py&lt;/code&gt; Should show either 1 or 0 depending on if light is detected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 relay_switch.py&lt;/code&gt; Connected to the LED&amp;rsquo;s this should turn the LED&amp;rsquo;s on and off.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 touch_sensor.py&lt;/code&gt; When the sensor is touched &amp;ldquo;Hey!&amp;rdquo; should be printed to the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have tested the components and have ensured that they work you can run &lt;code&gt;python3 smart_therm_not_connected.py&lt;/code&gt; to start the smart thermostat.  The code should print the current system status to the terminal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/fa18-523-84/blob/master/paper/code/smart_therm_not_connected.py&#34;&gt;Smart Thermostat Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that we have tested each of the components and have tested the smart thermostat code using the LED&amp;rsquo;s we can connect to the HVAC system. Each HVAC system is different so be sure to do some research on how your specific system works.  Generally there will be a power wire that you can connect to the relay switch and then connect the other wires to the appropriate terminals [@Smart_therm_example].  Based on the readings from the other sensors the code will determine which relay to turn on, which will complete the circuit sending a signal to the HVAC system.  The system used in this example is shown in @fig:wiring_start.  For this system the red wire is 24v power, green connects to the fan, white connects to the heat, yellow connects to the AC compressor and blue is ground [@Smart_therm_example].&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/wiring_start.JPG&#34; alt=&#34;HVAC Wiring&#34;&gt;{#fig:wiring_start}&lt;/p&gt;
&lt;p&gt;To connect the Raspberry Pi smart thermostat to the system we need a way to supply power to each of the signal wires.  To do this we can use a breadboard to supply power to each of the three relay switches as shown in @fig:wiring_final.  When the relay switch is activated the signal will be supplied to the appropriate wire.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/wiring_final.JPG&#34; alt=&#34;HVAC Wiring Final&#34;&gt;{#fig:wiring_final}&lt;/p&gt;
&lt;p&gt;Once the system is wired correctly we can test the code again now that it is wired to the HVAC system.  Running &lt;code&gt;python3 smart_therm_not_connected.py&lt;/code&gt; will start the program but to run the program in the background use &lt;code&gt;nohup python3 smart_therm_not_connected.py &amp;amp;&lt;/code&gt;.  When running the program in the background the output will be saved to the nohup.out file.  Now you can adjust settings in the program to make your HVAC system more efficient.  The final result is shown in @fig:smart_therm_final.  Also in this book you can find &lt;a href=&#34;&#34;&gt;an example&lt;/a&gt; which connects the smart thermostat to a database to store data and also allows anyone on the local network to change settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/smart_therm_final.JPG&#34; alt=&#34;Smart Thermostat Final&#34;&gt;{#fig:smart_therm_final}&lt;/p&gt;
&lt;h2 id=&#34;sources-for-this-section&#34;&gt;Sources for this section:&lt;/h2&gt;
&lt;p&gt;need to integrate into &lt;a href=&#34;https://github.com/cloudmesh-community/book/blob/master/chapters/SECTION/SECTION-REFERENCES.md&#34;&gt;https://github.com/cloudmesh-community/book/blob/master/chapters/SECTION/SECTION-REFERENCES.md&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DS18B20_resistor: &lt;a href=&#34;https://arduino.stackexchange.com/questions/30822/the-use-of-4-7kohm-resistor-with-ds18b20-temperature-sensor&#34;&gt;https://arduino.stackexchange.com/questions/30822/the-use-of-4-7kohm-resistor-with-ds18b20-temperature-sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DS18B20_code_setup: &lt;a href=&#34;http://www.circuitbasics.com/raspberry-pi-ds18b20-temperature-sensor-tutorial/&#34;&gt;http://www.circuitbasics.com/raspberry-pi-ds18b20-temperature-sensor-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adafruit_setup: &lt;a href=&#34;https://stackoverflow.com/questions/28913592/python-gpio-code-for-dht-11-temperature-sensor-fails-in-pi-2&#34;&gt;https://stackoverflow.com/questions/28913592/python-gpio-code-for-dht-11-temperature-sensor-fails-in-pi-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How_DHT11_Works: &lt;a href=&#34;https://howtomechatronics.com/tutorials/arduino/dht11-dht22-sensors-temperature-and-humidity-tutorial-using-arduino/&#34;&gt;https://howtomechatronics.com/tutorials/arduino/dht11-dht22-sensors-temperature-and-humidity-tutorial-using-arduino/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Smart_therm_example: &lt;a href=&#34;https://dzone.com/articles/how-to-build-your-own-arduino-thermostat&#34;&gt;https://dzone.com/articles/how-to-build-your-own-arduino-thermostat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Setting up Large PI clusters :o2:</title>
      <link>/docs/old/pi/setup-multiple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/setup-multiple/</guid>
      <description>
        
        
        &lt;p&gt;:o2:
&lt;img src=&#34;../images/construction.png&#34; alt=&#34;Construction&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cm-burn&#34;&gt;cm-burn&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cm-burn&lt;/code&gt; is a program to burn many SD cards for the preparation of
building clusters with Raspberry Pi&amp;rsquo;s.  The program is developed in
Python and is portable on Linux, Windows, and OSX. It allows users to
create readily bootable SD cards that have the network configured,
contain a public ssh key from your machine that you used to configure
the cards.  The unique feature is that you can burn multiple cards in
a row.&lt;/p&gt;
&lt;p&gt;A sample command invocation looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cm-burn â€”-name  red[5-7] \
        --key ~/.ssh/id_rsa.pub \
        â€”-ips 192.168.1.[5-7] \
        â€”-image 2018-06-27-raspbian-stretch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command creates 3 SD cards where the hostnames &lt;code&gt;red5&lt;/code&gt;, &lt;code&gt;red6&lt;/code&gt;, &lt;code&gt;red 7&lt;/code&gt;
with the network addresses &lt;code&gt;192.168.1.5&lt;/code&gt;, &lt;code&gt;192.168.1.6&lt;/code&gt;,
and &lt;code&gt;192.168.1.7&lt;/code&gt;. The public key is added to the authorized_keys file
of the pi user.  The password login is automatically disabled and only
the ssh key authentication is enabled.&lt;/p&gt;
&lt;h2 id=&#34;process&#34;&gt;Process&lt;/h2&gt;
&lt;p&gt;The process of the burn is as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start the programm with the appropriate parameters the program will
ask you to place an SD Card in the SD Card writer. Place it in&lt;/li&gt;
&lt;li&gt;the specified image will be burned on the SD Card&lt;/li&gt;
&lt;li&gt;next the SD Card will be mounted by the program and the appropriate
modifications will bbe conducted.&lt;/li&gt;
&lt;li&gt;after the modifications the SD Card will be unmounted&lt;/li&gt;
&lt;li&gt;you will be asked to remove the card&lt;/li&gt;
&lt;li&gt;if additional cards need to be burned, you will go to step 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case a SD Card of a PI in the cluster goes bad, you can simply burn
it again by providing the appropriate parameters, and just print the
subset that are broken.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-single-large-cluster-with-cm-burn&#34;&gt;Setting up a Single Large Cluster with cm-burn&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cm-burn&lt;/code&gt; will setup a simple network on all cluster nodes
configured. There are different models for networking configuration we
could use.  However we have decided for one that allows you to
interface with your local Laptop to the cluster via Wifi.  The setup
is illustrated in Figure Networking.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/network.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figure: Networking&lt;/p&gt;
&lt;p&gt;We assume that you have used cm-burn to create all SD cards for the
Pi&amp;rsquo;s. One of the Pi&amp;rsquo;s is specially configured with the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cm-burn --master red01
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The SD Card in the SD Card writer will be configured as a &lt;code&gt;master&lt;/code&gt;. If
the name does not match it will be configured as a worker.  Only the
&lt;code&gt;master&lt;/code&gt; is connected with the Wifi network. All other nodes rout the
internet connection through the master node.  As the &lt;code&gt;master&lt;/code&gt; node is
on the same Wifi network as the laptop you can login to the &amp;lsquo;master&amp;rsquo;
node and from there log into the workers.  To simplify access you
could even setup ssh tunneled connections from the Laptop via the
master. But this is left up to you if you wish.&lt;/p&gt;
&lt;p&gt;As a result you will be able to login on each of the machines and
execute commands such as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Certainly you can even have a much simpler setup by just attaching a keyboard, mouse and monitor/TV to your &lt;code&gt;master&lt;/code&gt;.
This will allow you to directly work on the master node, not needing any additional hardware.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-a-cluster-of-clusters-with-cm-burn&#34;&gt;Setting up a Cluster of Clusters with cm-burn&lt;/h2&gt;
&lt;p&gt;To integrate the clusters into a single network, we need a switch  or combination of switches to which we connect the clusters.
This is depicted in the Figure Cluster of Clusters&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/network-cluster.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each cluster is naemed cluster01-clusterNN. The hostnames are node followed by 3 zeros padded with the node number
There is a correlation between the cluster number and the node numbers in the following interval&lt;/p&gt;
&lt;p&gt;a cluster has the nodes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[(clustername - 1) * 5 + 1, (clustername - 1) * 5 + 5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For convenience we will be also enabeling a cluster burn logic, that burns all images for a given cluster&lt;/p&gt;
&lt;p&gt;cm-burn &amp;ndash;workers=5 &amp;ndash;name=cluster &amp;ndash;nodes=nodes &amp;ndash;id=3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/pi_clusters.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;prerequisits&#34;&gt;Prerequisits&lt;/h2&gt;
&lt;h3 id=&#34;raspberry-pi&#34;&gt;Raspberry Pi&lt;/h3&gt;
&lt;p&gt;We assume that you have set up a raspberry pi with the newest raspbian
OS. We assume that you have changed the default password and can log
into the pi.&lt;/p&gt;
&lt;p&gt;We assume you have not done anything else to the OS.&lt;/p&gt;
&lt;p&gt;The easiest way to duplicate the SD card is simply to clone it with
the build in SD Card copier. This program can be found in the menu
under Accessories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/sdcc.png&#34; alt=&#34;SD Card Copier&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figure: SD Card Copier&lt;/p&gt;
&lt;p&gt;This program will copy the contents of the card plugged into the PI
onto another one. The only thing you need is an USB SD Card
writer. You cn accept the defaults when the cards are plugged in which
allow you to copy the Internal SD Card onto the other one. Just be
carefull that you do not overwrite your internal one. This feature can
also be used to create backups of images that you have worked on and
want to preserve.&lt;/p&gt;
&lt;p&gt;Thus as you can see there is not much you need to do to prepare a PI
to be used for burning the SD Card.&lt;/p&gt;
&lt;p&gt;TODO: Python3&lt;/p&gt;
&lt;h4 id=&#34;card-burning-from-commandline&#34;&gt;Card Burning from commandline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Insert card and find mmcblk0, e.g. no letter p in it for partition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sudo ls -ltr /dev/*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo dd bs=1M if=~/.cloudmesh/images/imagename.img of=mmcblk0 status=progress conv=fsync&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;osx&#34;&gt;OSX&lt;/h3&gt;
&lt;h4 id=&#34;card-burning&#34;&gt;Card Burning&lt;/h4&gt;
&lt;p&gt;On OSX a good program is to use etcher for burning the images on disk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcher.io&#34;&gt;https://etcher.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To access it form the commandline you can also use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcher.io/cli&#34;&gt;https://etcher.io/cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;file-system-management&#34;&gt;File System Management&lt;/h4&gt;
&lt;p&gt;Unfortunately, the free versions of writing the ext file system are no
longer supported on OSX. This means that as of writing of this document
the best solution we found is to purchase and install extFS on the
MacOS computer you use for burning the SD Cards. If you find an
alternative, please let us know. (We tested ext4fuse, which
unfortunately only supports read access, see Appendix)&lt;/p&gt;
&lt;p&gt;To easily read and write ext file systems, please install extFS which
can be downloaded from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paragon-software.com/home/extfs-mac&#34;&gt;https://www.paragon-software.com/home/extfs-mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purchase price of the software is $39.95.&lt;/p&gt;
&lt;p&gt;If you like to not spend any money we recommend that you conduct the
burning on a raspberry pi.&lt;/p&gt;
&lt;p&gt;TODO: PYTHON3 use pyenv&lt;/p&gt;
&lt;p&gt;Tip: An alternative would be using virtualbox and using a virtual machine
to avoid purchasing extFS.&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h4 id=&#34;elevate-permissions-for-pythonexe-in-windows&#34;&gt;Elevate permissions for Python.exe in Windows&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create a shortcut for python.exe&lt;/li&gt;
&lt;li&gt;Change the shortcut target into something like C:\xxx...\python.exe&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;advance&amp;hellip;&amp;rdquo; in the property panel of the shortcut, and click
the option &amp;ldquo;run as administrator&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;executable-needed-to-burn-the-image-on-sd-card&#34;&gt;Executable needed to burn the image on SD Card:&lt;/h4&gt;
&lt;p&gt;Download CommandLineDiskImager from the following url&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidferguson/CommandLineDiskImager&#34;&gt;https://github.com/davidferguson/CommandLineDiskImager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The previous executable will be used by cm-burn script.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s necessary to burn the raspbian image to the SD card with this executable manually or thru Etcher in order to continue with next step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CommandLineDiskImager.exe C:\Users\John\Downloads\raspbian.img G&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;file-system-management-1&#34;&gt;File System Management&lt;/h4&gt;
&lt;p&gt;Download the Open source ext3/4 file system driver for Windows installer from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ext2fsd.com&#34;&gt;http://www.ext2fsd.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Ext2fsd exe&lt;/li&gt;
&lt;li&gt;The burned image in the previous step in SD card will have 2 partition&lt;/li&gt;
&lt;li&gt;FAT32 partition will be assigned with the Drive letter - Boot Drive&lt;/li&gt;
&lt;li&gt;Assign Drive Letter for EXT4 (Right click on the EXT4,
Assign letter.
The drive letter will be used while running cm-burn) - Root Drive&lt;/li&gt;
&lt;li&gt;Setting Automount of this EXT4&lt;/li&gt;
&lt;li&gt;F3 or Tools-&amp;gt;Ext2 Volume Management&lt;/li&gt;
&lt;li&gt;Check-&amp;gt; Automatically mount via Ext2Mgr&lt;/li&gt;
&lt;li&gt;The previous instructions needed for the Ext2fsd to reserve the Drive Letters and any raspbian image burned to SD will be auto mounted to the specific reserved drive letters. These drive letters need to be specified while using cm-burn&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h3 id=&#34;install-on-your-os&#34;&gt;Install on your OS&lt;/h3&gt;
&lt;p&gt;Once you have decided which Computer system (MacOS, Linux, or Windows)
you like to use for using the cm-burn program you need to install
it. The program is written in python3 which we assume you have
installed and is your default python in your terminal.&lt;/p&gt;
&lt;p&gt;To install cm-burn, please execute&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/cloudmesh/cm-burn.git
cd cm-burn
pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In future it will also be hosted on pypi and you will be able to
install it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/cloudmesh/cm-burn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To check if the program works please issue the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cm-burn check install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It will check if you have installed all prerequisites and are able to
run the command as on some OSes you must be in the sudo list to runi
it and access the SD card burner as well as mounting some file systems.&lt;/p&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;h4 id=&#34;cmburnyaml&#34;&gt;cmburn.yaml&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cloudmesh:
    burn:
       image: None
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;manual-page&#34;&gt;Manual page&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;git clone &lt;a href=&#34;https://github.com/cloudmesh/cm-burn&#34;&gt;https://github.com/cloudmesh/cm-burn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd cm-burn&lt;/li&gt;
&lt;li&gt;python setup.py install&lt;/li&gt;
&lt;li&gt;Copy the Raspberyy PI images to be burned under ~/.cloudmesh/images&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The manual page is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cm-burn -h
Cloudmesh Raspberry Pi Mass Image Burner.

Usage:
  cm-burn create --group GROUP --names HOSTS --image IMAGE [--key=KEY]  [--ips=IPS]
  cm-burn gregor --group GROUP --names HOSTS --image IMAGE [--key=KEY]  [--ips=IPS]
  cm-burn ls
  cm-burn rm IMAGE
  cm-burn get [URL]
  cm-burn update
  cm-burn check install
  cm-burn (-h | --help)
  cm-burn --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --key=KEY     the path of the public key [default: ~/.ssh/id_rsa.pub].
  --ips=IPS     th ips in hostlist format

Location of the images to be stored for reuse:

  ~/.cloudmesh/images
  ~/.cloudmesh/inventory


Description:
  cm-burn create [--image=IMAGE] [--group=GROUP] [--names=HOSTS]
                 [--ips=IPS] [--key=PUBLICKEY] [--ssid=SSID] [--psk=PSK]
                 [--domain=DOMAIN]
                 [--bootdrive=BOOTDRIVE] [--rootdrive=ROOTDRIVE]
                 [-n --dry-run] [-i --interactive]
  cm-burn ls [-ni]
  cm-burn rm IMAGE [-ni]
  cm-burn get [URL]
  cm-burn update
  cm-burn check install
  cm-burn hostname [HOSTNAME] [-ni]
  cm-burn ssh [PUBLICKEY] [-ni]
  cm-burn ip IPADDRESS [--domain=DOMAIN] [-ni]
  cm-burn wifi SSID [PASSWD] [-ni]
  cm-burn info [-ni]
  cm-burn image [--image=IMAGE] [--device=DEVICE]
                [-ni]
  cm-burn (-h | --help)
  cm-burn --version

Options:
  -h --help         Show this screen.
  -n --dry-run      Show output of commands but don&#39;t execute them
  -i --interactive  Confirm each change before doing it
  --version         Show version.
  --key=KEY         the path of the public key [default: ~/.ssh/id_rsa.pub].
  --ips=IPS         the IPs in hostlist format
  --image=IMAGE     the image to be burned [default: 2018-06-27-raspbian-stretch.img].

Example:
  cm-burn create --names red[000-010] ips --image rasbian_latest
  cmb-urn create --group g1 --names red[001-003] --key c:/users/&amp;lt;user&amp;gt;/.ssh/id_rsa.pub --image 2018-06-27-raspbian-stretch.img --bootdrive I --rootdrive G --domain 192.168.1.254 --ip 192.168.1.[111-113]

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;osx-ext4fuse&#34;&gt;OSX ext4fuse&lt;/h3&gt;
&lt;p&gt;Unfortunately ext4fuse only supports read access. To install it please
use the following steps. However it will not allow you to use the
cm-burn program. It may be useful for inspection of SD Cards&lt;/p&gt;
&lt;p&gt;On OSX you will need brew and install osxfuse and ext4fuse&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew cask install osxfuse
brew install ext4fuse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To run it, your account must be in the sudoers list. Than you can do the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir linux
mkdir boot
cp  ../*.img 00.img
brew cask install osxfuse
brew install ext4fuse
hdiutil mount 00.img
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will return&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/dev/disk3          	FDisk_partition_scheme
/dev/disk3s1        	Windows_FAT_32                 	/Volumes/boot
/dev/disk3s2        	Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now access the boot partition with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /Volumes/boot/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This partition is writable as it is not in ext format.&lt;/p&gt;
&lt;p&gt;However to access the Linux partition in read only form we need to mount it with fuse&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir /Volumes/Linux
sudo ext4fuse /dev/disk2s2 /Volumes/Linux -o allow_other
ext4fuse /dev/disk2s2 linux
less linux/etc/hosts
sudo umount /Volumes/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activate-ssh&#34;&gt;Activate SSH&lt;/h3&gt;
&lt;p&gt;see method 3 in &lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh&#34;&gt;https://www.raspberrypi.org/documentation/remote-access/ssh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Draft:&lt;/p&gt;
&lt;p&gt;Set up ssh key on windows (use and document the ubuntu on windows thing)&lt;/p&gt;
&lt;p&gt;you will have ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa&lt;/p&gt;
&lt;p&gt;copy the content of the file ~/.ssh/id_rsa.pub into ???/.ssh/authorized_keys
??? is the location of the admin user i think the username is pi&lt;/p&gt;
&lt;p&gt;enable ssh on the other partition while creating the fike to activate ssh&lt;/p&gt;
&lt;h3 id=&#34;hostname&#34;&gt;Hostname&lt;/h3&gt;
&lt;p&gt;change /etc/hostname&lt;/p&gt;
&lt;h3 id=&#34;activate-network&#34;&gt;Activate Network&lt;/h3&gt;
&lt;p&gt;see &lt;a href=&#34;https://www.raspberrypi.org/learning/networking-lessons/rpi-static-ip-address&#34;&gt;https://www.raspberrypi.org/learning/networking-lessons/rpi-static-ip-address&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;change-default-password&#34;&gt;Change default password&lt;/h3&gt;
&lt;p&gt;From the net (wrong method):&lt;/p&gt;
&lt;p&gt;Mount the SD card, go into the file system, and edit /etc/passwd. Find the line starting with &amp;ldquo;pi&amp;rdquo; that begins like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pi:x:1000:1000...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get rid of the x; leave the colons on either side. This will eliminate the need for a password.&lt;/p&gt;
&lt;p&gt;You probably then want to create a new password by using the passwd command after you log in.&lt;/p&gt;
&lt;p&gt;The right thing to do is to create a new hash and store it in place of x.
not yet sure how that can be done a previous student from the class may have been aboe to do that
Bertholt is firstname.&lt;/p&gt;
&lt;p&gt;could this work? &lt;a href=&#34;https://unix.stackexchange.com/questions/81240/manually-generate-password-for-etc-shadow&#34;&gt;https://unix.stackexchange.com/questions/81240/manually-generate-password-for-etc-shadow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 -c &amp;quot;from getpass import getpass; from crypt import *; p=getpass(); print(&#39;\n&#39;+crypt(p, METHOD_SHA512)) if p==getpass(&#39;Please repeat: &#39;) else print(&#39;\nFailed repeating.&#39;)&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;unmount-drives-on-windows&#34;&gt;Unmount Drives on Windows&lt;/h2&gt;
&lt;p&gt;RemoveDrive.exe needs to be downloaded to c:\Tools from the following path and to have the Administrator rights (Right Click on the exe -&amp;gt; Properties -&amp;gt; Compatibility Tab -&amp;gt; Run this program as an Administrator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.uwe-sieber.de/drivetools_e.html&#34;&gt;https://www.uwe-sieber.de/drivetools_e.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/remove-psdrive?view=powershell-6&#34;&gt;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/remove-psdrive?view=powershell-6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gregor thinks that unmounting is much easier in an aelevated command prompt using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mountvol &amp;lt;Drive Letter&amp;gt;: /d
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh-community/hid-sp18-419/blob/master/cluster/headless_setup.md&#34;&gt;https://github.com/cloudmesh-community/hid-sp18-419/blob/master/cluster/headless_setup.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@viveks3th/how-to-bootstrap-a-headless-raspberry-pi-with-a-mac-6eba3be20b26&#34;&gt;https://medium.com/@viveks3th/how-to-bootstrap-a-headless-raspberry-pi-with-a-mac-6eba3be20b26&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;network setup is not good as it requires additional step, we want to preconfigure on sd card and plug in multiple pis at once not a single one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudmesh/cloudmesh-pi/blob/dev/bin/cm-burn&#34;&gt;https://github.com/cloudmesh/cloudmesh-pi/blob/dev/bin/cm-burn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microhowto.info/howto/mount_a_partition_located_inside_a_file_or_logical_volume.html&#34;&gt;http://www.microhowto.info/howto/mount_a_partition_located_inside_a_file_or_logical_volume.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.janosgyerik.com/mounting-a-raspberry-pi-image-on-osx/&#34;&gt;http://www.janosgyerik.com/mounting-a-raspberry-pi-image-on-osx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Hitabis/pibakery&#34;&gt;https://github.com/Hitabis/pibakery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osxdaily.com/2014/03/20/mount-ext-linux-file-system-mac/&#34;&gt;http://osxdaily.com/2014/03/20/mount-ext-linux-file-system-mac/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxconfig.org/how-to-mount-rasberry-pi-filesystem-image&#34;&gt;https://linuxconfig.org/how-to-mount-rasberry-pi-filesystem-image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jeffgeerling.com/blogs/jeff-geerling/mounting-raspberry-pis-ext4-sd&#34;&gt;https://www.jeffgeerling.com/blogs/jeff-geerling/mounting-raspberry-pis-ext4-sd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.hypriot.com/post/cloud-init-cloud-on-hypriot-x64/&#34;&gt;https://blog.hypriot.com/post/cloud-init-cloud-on-hypriot-x64/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paragon-software.com/home/extfs-mac/&#34;&gt;https://www.paragon-software.com/home/extfs-mac/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;osx-during-burning&#34;&gt;OSX during burning&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         2.0 TB     disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         2.0 TB     disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +2.0 TB     disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            811.4 GB   disk1s1
   2:                APFS Volume Preboot                 26.8 MB    disk1s2
   3:                APFS Volume Recovery                519.0 MB   disk1s3
   4:                APFS Volume VM                      9.7 GB     disk1s4

/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *31.9 GB    disk2

/dev/disk3 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *31.9 GB    disk3


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;experiment-diy-multisdcard-writer&#34;&gt;Experiment DIY multiSDCard writer&lt;/h2&gt;
&lt;p&gt;We intend to experiment to build a multiSD card writer via USB.
We will attempt to do this for OSX initially, therefore we like to order the following product&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Splitter-LYFNLOVE-Charging-Individual-Switches/dp/B072LW1RGG/ref=sr_1_9?ie=UTF8&amp;amp;qid=1534418434&amp;amp;sr=8-9&amp;amp;keywords=usb+3.0+hub&#34;&gt;USB Hub 3.0 Splitter, LYFNLOVE 7 Port USB Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will use multiple USB card readers (possibly just USB2 till we replacethem with USB3)&lt;/p&gt;
&lt;p&gt;Than we will rewrite our program to attempt using the SDcard writers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Setup of a Development Environment</title>
      <link>/docs/old/pi/setup-dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/setup-dev/</guid>
      <description>
        
        
        &lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;
&lt;p&gt;Naturally we need a useful editor. We have made good experience with
emacs as it supports a variety of different formats and is also
available for macOS and Windows.&lt;/p&gt;
&lt;p&gt;You can install it with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ apt-get install &amp;lt;program&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Other editors include &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;gedit&lt;/code&gt; and so on. If you are concerned
about space, use &lt;code&gt;vi&lt;/code&gt; which is pre-installed. If you like to use other
editors use the command we can install them respectively with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ apt-get install emacs
$ apt-get install vim
$ apt-get install gedit
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;python-on-the-pi-constructionimagesconstructionpng&#34;&gt;Python on the Pi &lt;img src=&#34;../images/construction.png&#34; alt=&#34;Construction&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Raspbian Stretch Lite version 2018-11-13 comes by default with Python 2.7.16 and
Python 3.5.3. However, it does not come with &lt;code&gt;pip&lt;/code&gt; which is the default Python
configuration management tool.&lt;/p&gt;
&lt;p&gt;Add instructions to install pip and pip3 which are not installed by default in
the Lite images:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install -y python-pip python3-pip
$ pip -V
pip 9.0.1 from /usr/lib/python2.7/dist-packages &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;python 2.7&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
$ pip3 -V
pip 9.0.1 from /usr/lib/python3/dist-packages &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;python 3.5&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that pip for Python 3 can also be run by using the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 -m pip install ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The installation packages for pip on Raspbian will also properly setup the
&lt;a href=&#34;https://www.piwheels.org&#34;&gt;https://www.piwheels.org&lt;/a&gt; package repository which contains pre-compiled binary
wheels for many popular python packages. A &lt;em&gt;wheel&lt;/em&gt; is a python package that is
already compiled into a binary form for a particular OS and hardware chipset.
Installing a wheel is much faster and less error prone than building a package
from source. These wheels have also been optimized for the ARM chipset that the
Raspberry Pi uses so they will run at the highest speeds possible. For example,
you can install the wheel for numpy and scipy with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ pip3 install numpy scipy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to upgrade to the latest python version you can build it from source
as follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install build-essential checkinstall
$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev
$ sudo apt-get install libssl-dev libsqlite3-dev tk-dev libgdbm-dev
$ sudo apt-get install libc6-dev libbz2-dev
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /usr/src
$ wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz
$ sudo tar xzf Python-3.6.5.tgz
$ &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; Python-3.6.5
$ sudo -s
$ bash configure
$ make altinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;python-idle&#34;&gt;Python IDLE&lt;/h2&gt;
&lt;p&gt;Click Menu -&amp;gt; Programming -&amp;gt; Python 3 (IDLE), and you&amp;rsquo;ll get a new
window called &amp;lsquo;Python 3.6.5 Shell:&amp;rsquo;. This Shell works just like Python
on the command line. Enter print(&amp;ldquo;Hello World&amp;rdquo;) to see the message.&lt;/p&gt;
&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;
&lt;p&gt;To install go use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget https://storage.googleapis.com/golang/go1.9.linux-armv6l.tar.gz
$ sudo tar -C /usr/local -xzf go1.9.linux-armv6l.tar.gz
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;:/usr/local/go/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you like to have it included every time you start a terminal please
please the line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in your ~/.profile file and reboot.&lt;/p&gt;
&lt;p&gt;Now you are also able to program go on your Pi.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SLURM</title>
      <link>/docs/old/pi/slurm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/slurm/</guid>
      <description>
        
        
        &lt;p&gt;:o2:&lt;/p&gt;
&lt;p&gt;This may be inspiring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ajdecon/ansible-pi-cluster/blob/master/README.md&#34;&gt;https://github.com/ajdecon/ansible-pi-cluster/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;provide a information&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;provide a information&lt;/p&gt;
&lt;h2 id=&#34;example-mpi-program&#34;&gt;Example MPI program&lt;/h2&gt;
&lt;p&gt;provide a information&lt;/p&gt;
&lt;h2 id=&#34;using-the-batch-queue&#34;&gt;Using the Batch Queue&lt;/h2&gt;
&lt;p&gt;provide a information&lt;/p&gt;
&lt;h2 id=&#34;rest-services&#34;&gt;REST Services&lt;/h2&gt;
&lt;p&gt;develop OpenAPI REST services to interact with the cluster&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tools</title>
      <link>/docs/old/iot/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/tools/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: On macOS, when you navigate to the search magnification
glass, you can type in &lt;em&gt;terminal&lt;/em&gt; to start it. A terminal allows you
to execute a number of commands to interact with the computer from a
commandline interface, e.g. the terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxconfig.org/bash-scripting-tutorial&#34;&gt;Bash&lt;/a&gt; it the
command language used in terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osxhttps://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osx&#34;&gt;Pyenv&lt;/a&gt;
allows to manage multiple versions of python easily. &lt;a href=&#34;https://github.com/pyenv/pyenv#how-it-works&#34;&gt;Pyenv
link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osxhttps://cloudmesh.github.io/classes/lesson/prg/pyenv.html?highlight=xcode#install-pyenv-on-osx&#34;&gt;XCode&lt;/a&gt;
is an integrated development environment for macOS containing a
suite of software development tools developed by Apple for
developing software for macOS, iOS, watchOS and tvOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; is a &lt;em&gt;package manager&lt;/em&gt; for OS X which
lets the user &lt;em&gt;install software&lt;/em&gt; from &lt;em&gt;UNIX&lt;/em&gt; and &lt;em&gt;open source
software&lt;/em&gt; that is not included in macOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=mac&amp;amp;code=PCC&#34;&gt;pyCharm&lt;/a&gt;:
is an Integrated Development Environment for Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Matplotlib&lt;/em&gt;: Matplotlib is a library that allows us to create nice
graphs in python. As we typically install python with virtualenv, we
need to configure matplotlib properly to use it. The easiest way to
do this is to execute the following commands. After you run them you
can use matplotlib.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install numpy
$ pip install matplotlib
$ echo &amp;quot;backend : TkAgg&amp;quot; &amp;gt; ~/.matplotlib/matplotlibrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://macdown.uranusjr.com/&#34;&gt;Macdown&lt;/a&gt; a macdown editor for macOS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.ghost.org/markdown/&#34;&gt;Markdown&lt;/a&gt; (from Markdown)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://oracc.museum.upenn.edu/doc/help/usingemacs/aquamacs/&#34;&gt;AquaEmacs&lt;/a&gt;
(from Aquamacs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://marvelmind.com/&#34;&gt;Marvelmind&lt;/a&gt; (from Marvelmind if you have
marvelmind positioning sensors which are optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/en/guide/macOSX&#34;&gt;Arduino&lt;/a&gt; (from Arduino if
you like to use their interface to access the esp8266 boards)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://computers.tutsplus.com/tutorials/40-terminal-tips-and-tricks-you-never-thought-you-needed--mac-51192&#34;&gt;40 OSX Terminal
Tricks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;markdown&#34;&gt;Markdown&lt;/h2&gt;
&lt;p&gt;MarkDown is a format convention that produces nicely formatted text with
simple ASCII text. Markdown has very good support for editors that
render the final output in a view window next to the editor pane. Two
such editors are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://macdown.uranusjr.com/&#34;&gt;Macdown&lt;/a&gt;: MacDown provides a nice
integrated editor that works well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=mac&amp;amp;code=PCC&#34;&gt;pyCharm&lt;/a&gt;:
We have successfully used Vladimir Schhneiders &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7896-markdown-navigator&#34;&gt;Markdown Navigator
plugin&lt;/a&gt;.
Once installed you click on a .md file pycharm will automatically
ask to install the plugins from Markdown for you.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A detailed set of syntax rules can be found at: &lt;strong&gt;BUG: LINK TO MARKDOWN
SYNTAX MISSING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following are some basic examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To &lt;em&gt;emphasise&lt;/em&gt; a text you use &lt;code&gt;*emphasize*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make text &lt;strong&gt;bold&lt;/strong&gt; use &lt;code&gt;**bold**&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To make text &lt;em&gt;&lt;strong&gt;bold-and-emphasize&lt;/strong&gt;&lt;/em&gt; use &lt;code&gt;***bold-and-emphasize***&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To create a hyperlink use &lt;code&gt;[Google](https://google.com)&lt;/code&gt; which will
result in &lt;a href=&#34;https://google.com&#34;&gt;Google&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To include an image use &lt;code&gt;![Bracketed Text](link)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A list can be created by item starting with *, a - , or a + or a number&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. one
2. two
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* one
* two
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to indent items underneath already bulleted items, precede
the indent items with four spaces and they will be nested under the item
previous to them.&lt;/p&gt;
&lt;p&gt;To qoute textc precede it with a &amp;ldquo;&amp;gt;&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Quote
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Quote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other syntax options can be found in the Format drop-down at the top of
the screen between View and Plug-ins of macdown.&lt;/p&gt;
&lt;h2 id=&#34;aquamacs&#34;&gt;Aquamacs&lt;/h2&gt;
&lt;p&gt;There are many different versions of emacs available on OSX. Aquamacs is
often used as it integrates nicely with the OSX GUI interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aquamacs.org/download.shtml&#34;&gt;AquaEmacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Aquamacs&lt;/em&gt; is a program for Mac devices which allows the user to edit
text, HTML, LaTeX, C++, Java, Python, R, Perl, Ruby, PHP, and more.
Aquamacs integrates well with OSX and provides many functions through a
menu. You will mostly be using the File, Edit, menus or toolbar icons.&lt;/p&gt;
&lt;p&gt;Emacs provides convenient keyboard shortcuts, most of which are
combinations with the Control or Meta key (The Meta key is the ESC key).
If you accidentally end up doing something wrong simply press &lt;code&gt;CTRL-g&lt;/code&gt;
to get out without issue. Other Keyboard Shortcuts include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CTRL-x u&lt;/code&gt; or File&amp;gt;Undo will cancel any command that you did not
want done. (CHECK)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ESC-g&lt;/code&gt; will cancel any command you are in the middle of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can break paragraph lines with &lt;code&gt;Ctrl-x w&lt;/code&gt;, where &lt;code&gt;w&lt;/code&gt; will wrap
text around word boundaries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To delete text to the end of the current word, press &lt;code&gt;ESC-d&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to delete the whole line from the position of the cursor to the end,
press &lt;code&gt;CTRL-k&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bash&#34;&gt;Bash&lt;/h2&gt;
&lt;p&gt;Bash is pre-installed in OSX. A &lt;em&gt;bash&lt;/em&gt; script contains &lt;em&gt;commands&lt;/em&gt; in
plain text. In order to create a bash script please decide for a
convenient name. Let us assume we name our script &lt;em&gt;myscript&lt;/em&gt;. Than you can
create and edit such a script with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch myscript.sh
$ emacs myscripts.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you need to add the following line to the top ogf the script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!# /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To demonstrate how to continue writing a script we will be using the
bash &lt;code&gt;echo&lt;/code&gt; command that allows you to print text. Lets make the second
line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now save and start executing your script. Click &amp;ldquo;File&amp;rdquo; and then
&amp;ldquo;Save&amp;rdquo;. Open Terminal and type in &lt;code&gt;cd&lt;/code&gt; followed by the name of the
folder you put the document in. Now we need to execute the script.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Executing&lt;/em&gt; a Bash script is rather easy. In order to execute a script,
we need to first execute the &lt;em&gt;permission set&lt;/em&gt;. In order to give Terminal
permission to read/execute a Bash script, you have to type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod u+x myscript.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the script has been granted permission to be executed, you can
test it by typing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./myscript.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the terminal. You will see it prints&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello World
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;arduino&#34;&gt;Arduino&lt;/h2&gt;
&lt;p&gt;This installation is optional. In the event that there is a TTY error,
you will need to install Arduino, since your Mac may be missing some
drivers that are included in Arduino. Simply go to
&lt;a href=&#34;https://www.arduino.cc/en/guide/macOSX&#34;&gt;Arduino&lt;/a&gt; and follow the
installation instructions.&lt;/p&gt;
&lt;h2 id=&#34;osx-terminal&#34;&gt;OSX Terminal&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.sparkfun.com/tutorials/terminal-basics/coolterm-windows-mac-linux&#34;&gt;CoolTerm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;download &lt;a href=&#34;http://freeware.the-meiers.org/CoolTermMac.zip&#34;&gt;http://freeware.the-meiers.org/CoolTermMac.zip&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Turtle Graphics</title>
      <link>/docs/old/iot/turtle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/iot/turtle/</guid>
      <description>
        
        
        &lt;p&gt;Python comes with a nice demonstration program that allows you to learn
some simple programming concepts while moving a turtle on the screen. It
can be started with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m turtledemo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;program-example&#34;&gt;Program example&lt;/h2&gt;
&lt;p&gt;You can also create programs with your favorite editor and run it. Let
us put the following code into the program &lt;code&gt;turtle_demo.py&lt;/code&gt;. Never save
a file with the name &lt;code&gt;turtle.py&lt;/code&gt; because python will import it instead
of the built-in turtle import that you need.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import turtle

window = turtle.Screen()
robot = turtle.Turtle()

robot.forward(50)   # Moves forward 50 pixels
robot.right(90)     # Rotate clockwise by 90 degrees

robot.forward(50)
robot.right(90)

robot.forward(50)
robot.right(90)

robot.forward(50)
robot.right(90)

turtle.done()

window.mainloop()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After saving it you can run it from a terminal with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python turtle_demo.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shape&#34;&gt;Shape&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;shapes: &amp;quot;arrow&amp;quot;, &amp;quot;turtle&amp;quot;, &amp;quot;circle&amp;quot;, &amp;quot;square&amp;quot;, &amp;quot;triangle&amp;quot;, &amp;quot;classic&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the shape of your turtle to any of these shapes with the
Turtle method &lt;code&gt;shape(name)&lt;/code&gt;. For example, if you have an instance of the
Turtle class called &lt;code&gt;robot&lt;/code&gt;, you can make it appear as a turtle by
calling &lt;code&gt;robot.shape(&amp;quot;turtle&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can add your own shapes with the following functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;turtle.register_shape(name, shape=None)

turtle.addshape(name, shape=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three different ways to call this function:&lt;/p&gt;
&lt;p&gt;name is the name of a gif-file and shape is None: Install the
corresponding image shape.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.register_shape(&amp;quot;turtle.gif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Image shapes do not rotate when turning the turtle, so they do not
display the heading of the turtle!&lt;/p&gt;
&lt;p&gt;name is an arbitrary string and shape is a tuple of pairs of
coordinates: Install the corresponding polygon shape.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.register_shape(&amp;quot;triangle&amp;quot;, ((5,-3), (0,5), (-5,-3)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;name is an arbitrary string and shape is a (compound) Shape object:
Install the corresponding compound shape.&lt;/p&gt;
&lt;p&gt;Add a turtle shape to TurtleScreen&amp;rsquo;s shapelist. Only the registered
shapes can be used by issuing the command shape(shapename).&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html&#34;&gt;http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/turtle.html&#34;&gt;https://docs.python.org/3/library/turtle.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;robot-dance-simulator&#34;&gt;Robot Dance Simulator&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cms robot dance dance.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scratch&#34;&gt;Scratch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scratch.mit.edu/scratchr2/static/sa/Scratch-456.0.2.dmg&#34;&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mblock&#34;&gt;MBlock&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mblock.cc/download/&#34;&gt;MBlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Visual Feedback Management</title>
      <link>/docs/old/pi/config-display/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/config-display/</guid>
      <description>
        
        
        &lt;p&gt;Now that we have a Pi configured we need to make sure that we can
send sometimes visual clues about its operations. This can be done via
displays and LEDs. In case no display is available we can even connect
to the PI with a virtual display redirection.&lt;/p&gt;
&lt;h2 id=&#34;default-display-setup&#34;&gt;Default Display Setup&lt;/h2&gt;
&lt;p&gt;The raspberry pi comes with a defualt setup and any modern HDMI enabled
TV or monitor will most likely work out of the box without any modifications.
Just plug the HDMI cable in and start the Pi and you will probably see some
boot messages and after a while see the splash screen for your installed
operating system.&lt;/p&gt;
&lt;h2 id=&#34;automatic-display-detection&#34;&gt;Automatic Display Detection&lt;/h2&gt;
&lt;p&gt;In case you like to use the Raspberry Pi in your office, at home, or
in the field, you may find yourself in a situation where different
monitors with different resolutions are attached. Especially in the
field it is convenient if the Pi could do this adjustment for you and
use the resolution assigned for the attached device.&lt;/p&gt;
&lt;p&gt;In this section we describe such a solution. We will automatically
detect the resolution based on the monitor attached. Once detected the
config file will be rewritten if necessary and the Pi will be rebooted
with the correct resolution in the configuration file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;In order for your monitor to work, you will need to add it
to the script we provide. Use the following program and add
appropriate cases for your monitor.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/bin/tvservice -d /boot/edid.dat
/usr/bin/edidparser /boot/edid.dat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;
&lt;p&gt;To achieve this we have developed the file
&lt;a href=&#34;https://raw.githubusercontent.com/cloudmesh/cloudmesh-pi/master/displaydetect.py&#34;&gt;displaydetect.py&lt;/a&gt;
that automatically detects and set the display for the pi. To
integrate it in the Raspbian OS please follow these steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the display detect script. Run this as root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/cloudmesh/cloudmesh-pi/master/displaydetect.py -O /bin/displaydetect.py
$ chmod a+x /bin/displaydetect.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a copy of &lt;code&gt;/boot/config.txt&lt;/code&gt; and rename it to
&lt;code&gt;/boot/config.txt.in&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cp /boot/config.txt /boot/config.txt.in
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following lines to the end of the config.txt.in file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# customized display setting&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;hdmi_group&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;hdmi_mode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;87&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;hdmi_cvt&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;display_rotate&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;display_rotate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the display detect script to rc.local so it runs every time the
pi is booting. Add this to end of /etc/rc.local before the &amp;ldquo;exit 0&amp;rdquo; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/bin/python /bin/displaydetect.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure rc.local would be running during boot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ systemctl status rc-local.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the service is &amp;lsquo;active&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Once it is installed, the pi will be check the display during the
first boot, and it will set the correct display parameters if found
necessary and do a second boot to finish the configuration change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can go in the filed and use the monitor of your choice&lt;/p&gt;
&lt;h3 id=&#34;adding-new-monitors&#34;&gt;Adding new monitors&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Look at the monitor name&lt;/li&gt;
&lt;li&gt;look at the preferred resolution&lt;/li&gt;
&lt;li&gt;create an new condition in the switch&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;using-the-laptop-as-a-monitor&#34;&gt;Using the Laptop as a monitor&lt;/h2&gt;
&lt;p&gt;In case you do not have a monitor at hand there are various ways on
using your computer as a monitor fo the Pi. The initial setup is
recommended to do with an HDMI monitor. There are instructions on the
Web that will let you set up the PI even without such a monitor, but
here we go the simpler route to set it up once, so you can access it
without monitor once you completed the setup.&lt;/p&gt;
&lt;p&gt;First, install the remote desktop program on the Pi with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ sudo apt-get install xrdp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second, connect now your Laptop with an an ethernet cable to the
Laptop. As services start up automatically, you will have to wait for
a while. till the LAptop has assigned an IP address. Furthermore you
may need to allow the Laptop to assign DHCP addresses when you plug in
the ethernet cable.&lt;/p&gt;
&lt;p&gt;:o2: we could need your help here telling us how you do this for your
machine.&lt;/p&gt;
&lt;p&gt;After some time you will see that the Laptop has assigned an ip
address&lt;/p&gt;
&lt;p&gt;You can run on your Pi, but also on your Laptop (if it supports
&lt;code&gt;ifconfig&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi$ ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and on your laptop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;laptop$ ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will see the typical output from &lt;code&gt;ifconfig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;look on the pi for the line that starts with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inet addr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;it will be followed by an ip address such as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now you can connect to this address, with the help of a program such
as &lt;em&gt;Remote Desktop Connection&lt;/em&gt; on Windows or Bonjour on macOS.&lt;/p&gt;
&lt;p&gt;Type in the ip address and you will see the desktop.&lt;/p&gt;
&lt;p&gt;In order to avoid always having to do the first step and getting
different ip addresses, we recommend that you set up a static address
for the raspberry.&lt;/p&gt;
&lt;p&gt;:o2: please help identifying how to do this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../images/warning.png&#34; alt=&#34;Warning&#34;&gt; &lt;em&gt;We recommend not to use the WiFi and the ethernet adapter at the same
time as it can come to issues when you boot them up while they are
both connected.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;E.Display.1:&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Configure your Raspberry Pi so you can access it via VNC.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;E.Display.2:&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Make the displaydetect.py truly discoverable, find a default
resolution that you put in to the else statement. Identify the
preferred solution from the script and use that. Parse the appropriate
parameters such as x,y, ans aspect ratio, rotation and other
parameters.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: VNC</title>
      <link>/docs/old/pi/vnc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/old/pi/vnc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;If you like to connect to your Raspberry from your laptop, we
recommend to use VNC. If you rather like to connect a monitor and
keyboard as well as a mouse to the Raspberry, you can skip the steps
with the VNC update.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-vnc&#34;&gt;Setting up VNC&lt;/h2&gt;
&lt;p&gt;We had some issues with the installed version of VNC that is customized
for connecting a Laptop via the ethernet cable to the PI. However as we
connect wirelessly, our setup is slightly different. The easiest way that
we found is to update the Raspbian OS as follows. In a terminal type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install realvnc-vnc-server
sudo apt-get install realvnc-vnc-viewer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you enable the VNC server in the configuration panel via the
Raspbian GUI by selecting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Menu &amp;gt;
    Preferences &amp;gt;
       Raspberry Pi Configuration &amp;gt;
          Interfaces.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you toggle the VNC service to enabled. As we are already at it in
our setup we enabled all other services, especially those that deal with
Grove sensor related bins and wires.&lt;/p&gt;
&lt;p&gt;Next reboot and double check if the settings are preserved after the
reboot&lt;/p&gt;
&lt;h3 id=&#34;install-vnc-on-macos&#34;&gt;Install VNC on macOS&lt;/h3&gt;
&lt;p&gt;To install a vnc server of your liking on your Mac. You find one at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.realvnc.com/download/vnc/latest/%5D&#34;&gt;http://www.realvnc.com/download/vnc/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Be sure to download the version of the VNC Viewer for the computer you
are going to use to virtually control the Pi (there is a version listed
for Raspberry Pi&amp;ndash; do not download this one. For us this is the Mac
version.)&lt;/p&gt;
&lt;h3 id=&#34;run-vnc-viewer-on-macos&#34;&gt;Run VNC Viewer on macOS&lt;/h3&gt;
&lt;p&gt;Once you have downloaded the VNC viewer installed it you can open the
program. Next you can start vnc viewer and enter the ip address of your
raspberry. Make sure you are on the same network. You can find the
address by using ifconfig.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
